ListLines, Off
Menu Tray, Tip, AutoHotKey
Menu, Tray, Icon, %A_AhkPath%, -159, 1

#NoEnv
#SingleInstance, force
SetMouseDelay,-1
SetDefaultMouseSpeed, 0
SetKeyDelay, 0
SetControlDelay -1
SetBatchLines, -1
global TibiaFileDir, GuiVersion
IniRead, TibiaFileDir, TibiaSettings.ini, Config, MHPath
Menu, Tray, NoStandard
global TibiaVersion
global settingsFile := A_WorkingDir "\TibiaSettings.ini"
global defaultSettingsFile
global userData
global timeAHRemaining
global TColor:="378ED6", GColor1:=242424, GColor2:=333333
global ProfileComb, HKProfileComb, Vocation, Locked, LockedID
global HotkeysConfigured := []
global Macro := 0, Waiting := 1, SleepExaust1sg, SleepExaust500ms, SleepFast
global StartButton := 0, ConfigHotkeys:="ConfigHotkeys"
global Timer := { exaustFood: 0, exaustRing: 0, exaustSupport: 0, exaustNormalFood: 0, AntiAfk: 0, exaustAmulet: 0, exaustAmmo: 0, exaustSpecialPotion: 0, exaustWeapon: 0, exaustPotion: 0, ClickAttack: 0, exaustDummy: 0, Targeting: 1, TimedSpell1: 0, TimedSpell2: 0, TimedSpell3: 0, OCRQuiver: 0, exaustBoots: 0, exaustMagicShield: 0, SecondaryBattleList: 0, MessagesSound: 0, exaustGoldConverter: 0, TakeFromFloor: 0 }
global connectionLost := 0
global LootMessage := []
global Ptr := A_PtrSize ? "UPtr" : "UInt"
global WindowInfo := []
global WinID, IDClassNN, WinExE, MHTibia, ConfigID, RunningID, ComboID
global AllReads := []
global PNG := []
global Hotkeys:=[]
global InI:=[]
global Tabs:=[]
global SQTLoot:=[]
global SP:=[]
global isAttacking := False
global emptyBattle := False
global TargetingCounter := 5
global ProfileToCopy
global GlobalLanguage := "Portuguese"
global VersionType := "OTServer"
global WindowTitle, FindProcessesID, arrLIST
global ArColor:=[], Data:=[], Dados:=[], Cords:=[], OldLootCor:="Nada"

Cords.Potions:=[]
global classButton:=[], PartyListButton:=[]
global bw := 0 , bh := 0, TogWinTab := 0, MoveTest:=0
global ProcBitBlt, ProcCreateBitmap, ProcBitmapLock, ProcBitmapUnlock, ProcDisposeImage
global StrideBit, ScanBit, PNGScanWidth, PNGScanHeight, ImageSearchMCode
class classOBJ {
__New(file) {
if !FileExist(file)
FileAppend,% emptyvar,% file
else {
FileRead, src, % file
Temp := this.base
this := this.objLoad(src)
if ( !IsObject(this) )
this := {}
this.base := Temp
}
this.file := file
Return this
}
Write(Section, Key, Value) {
if ( !IsObject(this[Section]) )
this[Section] := {}
if (value == "")
this[Section].Remove(Key)
else
this[Section][Key] := value
}
Save(obj) {
saveObj := this.objSave(obj)
FileDelete, % this.file
FileAppend, % saveObj, % this.file
}
objLoad(ByRef src) {
static q := Chr(34)
key := ""
is_key := false
stack := [ tree := [] ]
is_arr := { (tree): 1 }
pos := 0
while ( (ch := SubStr(src, ++pos, 1)) != "" ) {
if InStr(" `t`n`r", ch)
continue
is_array := is_arr[obj := stack[1]]
if i := InStr("{[", ch) {
val := {}
is_array ? ObjPush(obj, val) : obj[key] := val
ObjInsertAt(stack, 1, val)
is_arr[val] := !(is_key := ch == "{")
}
else if InStr("}]", ch)
ObjRemoveAt(stack, 1)
else if InStr(",:", ch)
is_key := (!is_array && ch == ",")
else {
if (ch == q) {
i := pos
i := InStr(src, q,, i+1)
val := SubStr(src, pos+1, i-pos-1)
pos := i
i := 0
if is_key {
key := val
continue
}
}
else {
val := SubStr(src, pos, i := RegExMatch(src, "[\]\},\s]|$",, pos)-pos) + 0
pos += i-1
}
is_array ? ObjPush(obj, val) : obj[key] := val
}
}
return tree[1]
}
objSave(obj) {
static q := Chr(34)
if IsObject(obj) {
is_array := 0, out := ""
for k in obj
is_array := k == A_Index
until !is_array
for k, v in obj {
if !is_array
out .= ( ObjGetCapacity([k], 1) ? this.objSave(k) : q . k . q ) .  ":"
out .= this.objSave(v) . ","
}
if (out != "")
out := Trim(out, ",")
return is_array ? "[" . out . "]" : "{" . out . "}"
}
else if (ObjGetCapacity([obj], 1) == "")
return obj
return q . obj . q
}
}
class bcrypt
{
static BCRYPT_OBJECT_LENGTH        := "ObjectLength"
static BCRYPT_HASH_LENGTH          := "HashDigestLength"
static BCRYPT_ALG_HANDLE_HMAC_FLAG := 0x00000008
static hBCRYPT := DllCall("LoadLibrary", "str", "bcrypt.dll", "ptr")
hash(String, AlgID, encoding := "utf-8")
{
AlgID         := this.CheckAlgorithm(AlgID)
ALG_HANDLE    := this.BCryptOpenAlgorithmProvider(AlgID)
OBJECT_LENGTH := this.BCryptGetProperty(ALG_HANDLE, this.BCRYPT_OBJECT_LENGTH, 4)
HASH_LENGTH   := this.BCryptGetProperty(ALG_HANDLE, this.BCRYPT_HASH_LENGTH, 4)
HASH_HANDLE   := this.BCryptCreateHash(ALG_HANDLE, HASH_OBJECT, OBJECT_LENGTH)
this.BCryptHashData(HASH_HANDLE, STRING, encoding)
HASH_LENGTH   := this.BCryptFinishHash(HASH_HANDLE, HASH_LENGTH, HASH_DATA)
hash          := this.CalcHash(HASH_DATA, HASH_LENGTH)
this.BCryptDestroyHash(HASH_HANDLE)
this.BCryptCloseAlgorithmProvider(ALG_HANDLE)
return hash
}
hmac(String, Hmac, AlgID, encoding := "utf-8")
{
AlgID         := this.CheckAlgorithm(AlgID)
ALG_HANDLE    := this.BCryptOpenAlgorithmProvider(AlgID, this.BCRYPT_ALG_HANDLE_HMAC_FLAG)
OBJECT_LENGTH := this.BCryptGetProperty(ALG_HANDLE, this.BCRYPT_OBJECT_LENGTH, 4)
HASH_LENGTH   := this.BCryptGetProperty(ALG_HANDLE, this.BCRYPT_HASH_LENGTH, 4)
HASH_HANDLE   := this.BCryptCreateHmac(ALG_HANDLE, HMAC, HASH_OBJECT, OBJECT_LENGTH, encoding)
this.BCryptHashData(HASH_HANDLE, STRING, encoding)
HASH_LENGTH   := this.BCryptFinishHash(HASH_HANDLE, HASH_LENGTH, HASH_DATA)
hash          := this.CalcHash(HASH_DATA, HASH_LENGTH)
this.BCryptDestroyHash(HASH_HANDLE)
this.BCryptCloseAlgorithmProvider(ALG_HANDLE)
return hash
}
BCryptOpenAlgorithmProvider(ALGORITHM, FLAGS := 0)
{
if (NT_STATUS := DllCall("bcrypt\BCryptOpenAlgorithmProvider", "ptr*", BCRYPT_ALG_HANDLE
, "ptr",  &ALGORITHM
, "ptr",  0
, "uint", FLAGS) != 0)
throw Exception("BCryptOpenAlgorithmProvider: " NT_STATUS, -1)
return BCRYPT_ALG_HANDLE
}
BCryptGetProperty(BCRYPT_HANDLE, PROPERTY, cbOutput)
{
if (NT_STATUS := DllCall("bcrypt\BCryptGetProperty", "ptr",   BCRYPT_HANDLE
, "ptr",   &PROPERTY
, "uint*", pbOutput
, "uint",  cbOutput
, "uint*", cbResult
, "uint",  0) != 0)
throw Exception("BCryptGetProperty: " NT_STATUS, -1)
return pbOutput
}
BCryptCreateHash(BCRYPT_ALG_HANDLE, ByRef pbHashObject, cbHashObject)
{
VarSetCapacity(pbHashObject, cbHashObject, 0)
if (NT_STATUS := DllCall("bcrypt\BCryptCreateHash", "ptr",  BCRYPT_ALG_HANDLE
, "ptr*", BCRYPT_HASH_HANDLE
, "ptr",  &pbHashObject
, "uint", cbHashObject
, "ptr",  0
, "uint", 0
, "uint", 0) != 0)
throw Exception("BCryptCreateHash: " NT_STATUS, -1)
return BCRYPT_HASH_HANDLE
}
BCryptCreateHmac(BCRYPT_ALG_HANDLE, HMAC, ByRef pbHashObject, cbHashObject, encoding := "utf-8")
{
VarSetCapacity(pbHashObject, cbHashObject, 0)
VarSetCapacity(pbSecret, (StrPut(HMAC, encoding) - 1) * ((encoding = "utf-16" || encoding = "cp1200") ? 2 : 1), 0)
cbSecret := StrPut(HMAC, &pbSecret, encoding) - 1
if (NT_STATUS := DllCall("bcrypt\BCryptCreateHash", "ptr",  BCRYPT_ALG_HANDLE
, "ptr*", BCRYPT_HASH_HANDLE
, "ptr",  &pbHashObject
, "uint", cbHashObject
, "ptr",  &pbSecret
, "uint", cbSecret
, "uint", 0) != 0)
throw Exception("BCryptCreateHash: " NT_STATUS, -1)
return BCRYPT_HASH_HANDLE
}
BCryptHashData(BCRYPT_HASH_HANDLE, STRING, encoding := "utf-8")
{
VarSetCapacity(pbInput, (StrPut(STRING, encoding) - 1) * ((encoding = "utf-16" || encoding = "cp1200") ? 2 : 1), 0)
cbInput := StrPut(STRING, &pbInput, encoding) - 1
if (NT_STATUS := DllCall("bcrypt\BCryptHashData", "ptr",  BCRYPT_HASH_HANDLE
, "ptr",  &pbInput
, "uint", cbInput
, "uint", 0) != 0)
throw Exception("BCryptHashData: " NT_STATUS, -1)
return true
}
BCryptHashFile(BCRYPT_HASH_HANDLE, pbInput, cbInput)
{
if (NT_STATUS := DllCall("bcrypt\BCryptHashData", "ptr",  BCRYPT_HASH_HANDLE
, "ptr",  &pbInput
, "uint", cbInput
, "uint", 0) != 0)
throw Exception("BCryptHashData: " NT_STATUS, -1)
return true
}
BCryptFinishHash(BCRYPT_HASH_HANDLE, cbOutput, ByRef pbOutput)
{
VarSetCapacity(pbOutput, cbOutput, 0)
if (NT_STATUS := DllCall("bcrypt\BCryptFinishHash", "ptr",  BCRYPT_HASH_HANDLE
, "ptr",  &pbOutput
, "uint", cbOutput
, "uint", 0) != 0)
throw Exception("BCryptFinishHash: " NT_STATUS, -1)
return cbOutput
}
BCryptDestroyHash(BCRYPT_HASH_HANDLE)
{
if (NT_STATUS := DllCall("bcrypt\BCryptDestroyHash", "ptr", BCRYPT_HASH_HANDLE) != 0)
throw Exception("BCryptDestroyHash: " NT_STATUS, -1)
return true
}
BCryptCloseAlgorithmProvider(BCRYPT_ALG_HANDLE)
{
if (NT_STATUS := DllCall("bcrypt\BCryptCloseAlgorithmProvider", "ptr",  BCRYPT_ALG_HANDLE
, "uint", 0) != 0)
throw Exception("BCryptCloseAlgorithmProvider: " NT_STATUS, -1)
return true
}
CheckAlgorithm(ALGORITHM)
{
static HASH_ALGORITHM := ["MD2", "MD4", "MD5", "SHA1", "SHA256", "SHA384", "SHA512"]
for index, value in HASH_ALGORITHM
if (value = ALGORITHM)
return Format("{:U}", ALGORITHM)
throw Exception("Invalid hash algorithm", -1, ALGORITHM)
}
CalcHash(Byref HASH_DATA, HASH_LENGTH)
{
loop % HASH_LENGTH
HASH .= Format("{:02x}", NumGet(HASH_DATA, A_Index - 1, "uchar"))
return HASH
}
}
UpdateLayeredWindow(hwnd, hdc, x:="", y:="", w:="", h:="", Alpha:=255) {
Static Ptr := "UPtr"
if ((x != "") && (y != ""))
VarSetCapacity(pt, 8), NumPut(x, pt, 0, "UInt"), NumPut(y, pt, 4, "UInt")
if (w = "") || (h = "")
GetWindowRect(hwnd, W, H)
return DllCall("UpdateLayeredWindow"
, Ptr, hwnd
, Ptr, 0
, Ptr, ((x = "") && (y = "")) ? 0 : &pt
, "int64*", w|h<<32
, Ptr, hdc
, "int64*", 0
, "uint", 0
, "UInt*", Alpha<<16|1<<24
, "uint", 2)
}
BitBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, raster:="") {
Static Ptr := "UPtr"
return DllCall("gdi32\BitBlt"
, Ptr, dDC
, "int", dX, "int", dY
, "int", dW, "int", dH
, Ptr, sDC
, "int", sX, "int", sY
, "uint", Raster ? Raster : 0x00CC0020)
}
StretchBlt(ddc, dx, dy, dw, dh, sdc, sx, sy, sw, sh, Raster:="") {
Static Ptr := "UPtr"
return DllCall("gdi32\StretchBlt"
, Ptr, ddc
, "int", dX, "int", dY
, "int", dW, "int", dH
, Ptr, sdc
, "int", sX, "int", sY
, "int", sW, "int", sH
, "uint", Raster ? Raster : 0x00CC0020)
}
SetStretchBltMode(hdc, iStretchMode:=4) {
return DllCall("gdi32\SetStretchBltMode"
, "UPtr", hdc
, "int", iStretchMode)
}
SetImage(hwnd, hBitmap) {
Static Ptr := "UPtr"
E := DllCall("SendMessage", Ptr, hwnd, "UInt", 0x172, "UInt", 0x0, Ptr, hBitmap )
DeleteObject(E)
return E
}
SetSysColorToControl(hwnd, SysColor:=15) {
Static Ptr := "UPtr"
GetWindowRect(hwnd, W, H)
bc := DllCall("GetSysColor", "Int", SysColor, "UInt")
pBrushClear := Gdip_BrushCreateSolid(0xff000000 | (bc >> 16 | bc & 0xff00 | (bc & 0xff) << 16))
pBitmap := Gdip_CreateBitmap(w, h)
G := Gdip_GraphicsFromImage(pBitmap)
Gdip_FillRectangle(G, pBrushClear, 0, 0, w, h)
hBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
SetImage(hwnd, hBitmap)
Gdip_DeleteBrush(pBrushClear)
Gdip_DeleteGraphics(G)
Gdip_DisposeImage(pBitmap)
DeleteObject(hBitmap)
return 0
}
Gdip_BitmapFromScreen(Screen:=0, Raster:="") {
hhdc := 0
Static Ptr := "UPtr"
if (Screen = 0)
{
_x := DllCall("GetSystemMetrics", "Int", 76 )
_y := DllCall("GetSystemMetrics", "Int", 77 )
_w := DllCall("GetSystemMetrics", "Int", 78 )
_h := DllCall("GetSystemMetrics", "Int", 79 )
} else if (SubStr(Screen, 1, 5) = "hwnd:")
{
hwnd := SubStr(Screen, 6)
if !WinExist("ahk_id " hwnd)
return -2
GetWindowRect(hwnd, _w, _h)
_x := _y := 0
hhdc := GetDCEx(hwnd, 3)
} else if IsInteger(Screen)
{
M := GetMonitorInfo(Screen)
_x := M.Left, _y := M.Top, _w := M.Right-M.Left, _h := M.Bottom-M.Top
} else
{
S := StrSplit(Screen, "|")
_x := S[1], _y := S[2], _w := S[3], _h := S[4]
}
if (_x = "") || (_y = "") || (_w = "") || (_h = "")
return -1
chdc := CreateCompatibleDC(), hbm := CreateDIBSection(_w, _h, chdc)
obm := SelectObject(chdc, hbm), hhdc := hhdc ? hhdc : GetDC()
BitBlt(chdc, 0, 0, _w, _h, hhdc, _x, _y, Raster)
ReleaseDC(hhdc)
pBitmap := Gdip_CreateBitmapFromHBITMAP(hbm)
SelectObject(chdc, obm), DeleteObject(hbm), DeleteDC(hhdc), DeleteDC(chdc)
return pBitmap
}
Gdip_BitmapFromHWND(hwnd, clientOnly:=0) {
if DllCall("IsIconic", "ptr", hwnd)
DllCall("ShowWindow", "ptr", hwnd, "int", 4)
Static Ptr := "UPtr"
thisFlag := 0
If (clientOnly=1)
{
VarSetCapacity(rc, 16, 0)
DllCall("GetClientRect", "ptr", hwnd, "ptr", &rc)
Width := NumGet(rc, 8, "int")
Height := NumGet(rc, 12, "int")
thisFlag := 1
} Else GetWindowRect(hwnd, Width, Height)
hbm := CreateDIBSection(Width, Height)
hdc := CreateCompatibleDC(), obm := SelectObject(hdc, hbm)
PrintWindow(hwnd, hdc, 2 + thisFlag)
pBitmap := Gdip_CreateBitmapFromHBITMAP(hbm)
SelectObject(hdc, obm), DeleteObject(hbm), DeleteDC(hdc)
return pBitmap
}
CreateRectF(ByRef RectF, x, y, w, h) {
VarSetCapacity(RectF, 16)
NumPut(x, RectF, 0, "float"), NumPut(y, RectF, 4, "float")
NumPut(w, RectF, 8, "float"), NumPut(h, RectF, 12, "float")
}
CreateRect(ByRef Rect, x, y, x2, y2) {
VarSetCapacity(Rect, 16)
NumPut(x, Rect, 0, "uint"), NumPut(y, Rect, 4, "uint")
NumPut(x2, Rect, 8, "uint"), NumPut(y2, Rect, 12, "uint")
}
CreateSizeF(ByRef SizeF, w, h) {
VarSetCapacity(SizeF, 8)
NumPut(w, SizeF, 0, "float")
NumPut(h, SizeF, 4, "float")
}
CreatePointF(ByRef PointF, x, y) {
VarSetCapacity(PointF, 8)
NumPut(x, PointF, 0, "float")
NumPut(y, PointF, 4, "float")
}
CreatePointsF(ByRef PointsF, inPoints) {
Points := StrSplit(inPoints, "|")
PointsCount := Points.Length()
VarSetCapacity(PointsF, 8 * PointsCount, 0)
for eachPoint, Point in Points
{
Coord := StrSplit(Point, ",")
NumPut(Coord[1], &PointsF, 8*(A_Index-1), "float")
NumPut(Coord[2], &PointsF, (8*(A_Index-1))+4, "float")
}
Return PointsCount
}
CreateDIBSection(w, h, hdc:="", bpp:=32, ByRef ppvBits:=0, Usage:=0, hSection:=0, Offset:=0) {
Static Ptr := "UPtr"
hdc2 := hdc ? hdc : GetDC()
VarSetCapacity(bi, 40, 0)
NumPut(40, bi, 0, "uint")
NumPut(w, bi, 4, "uint")
NumPut(h, bi, 8, "uint")
NumPut(1, bi, 12, "ushort")
NumPut(bpp, bi, 14, "ushort")
NumPut(0, bi, 16, "uInt")
hbm := DllCall("CreateDIBSection"
, Ptr, hdc2
, Ptr, &bi
, "uint", Usage
, "UPtr*", ppvBits
, Ptr, hSection
, "uint", OffSet, Ptr)
if !hdc
ReleaseDC(hdc2)
return hbm
}
PrintWindow(hwnd, hdc, Flags:=2) {
Static Ptr := "UPtr"
return DllCall("PrintWindow", Ptr, hwnd, Ptr, hdc, "uint", Flags)
}
DestroyIcon(hIcon) {
return DllCall("DestroyIcon", "UPtr", hIcon)
}
GetIconDimensions(hIcon, ByRef Width, ByRef Height) {
Static Ptr := "UPtr"
Width := Height := 0
VarSetCapacity(ICONINFO, size := 16 + 2 * A_PtrSize, 0)
if !DllCall("user32\GetIconInfo", Ptr, hIcon, Ptr, &ICONINFO)
return -1
hbmMask := NumGet(&ICONINFO, 16, Ptr)
hbmColor := NumGet(&ICONINFO, 16 + A_PtrSize, Ptr)
VarSetCapacity(BITMAP, size, 0)
if DllCall("gdi32\GetObject", Ptr, hbmColor, "Int", size, Ptr, &BITMAP)
{
Width := NumGet(&BITMAP, 4, "Int")
Height := NumGet(&BITMAP, 8, "Int")
}
if !DeleteObject(hbmMask)
return -2
if !DeleteObject(hbmColor)
return -3
return 0
}
PaintDesktop(hdc) {
return DllCall("PaintDesktop", "UPtr", hdc)
}
CreateCompatibleDC(hdc:=0) {
return DllCall("CreateCompatibleDC", "UPtr", hdc)
}
SelectObject(hdc, hgdiobj) {
Static Ptr := "UPtr"
return DllCall("SelectObject", Ptr, hdc, Ptr, hgdiobj)
}
DeleteObject(hObject) {
return DllCall("DeleteObject", "UPtr", hObject)
}
GetDC(hwnd:=0) {
return DllCall("GetDC", "UPtr", hwnd)
}
GetDCEx(hwnd, flags:=0, hrgnClip:=0) {
Static Ptr := "UPtr"
return DllCall("GetDCEx", Ptr, hwnd, Ptr, hrgnClip, "int", flags)
}
ReleaseDC(hdc, hwnd:=0) {
Static Ptr := "UPtr"
return DllCall("ReleaseDC", Ptr, hwnd, Ptr, hdc)
}
DeleteDC(hdc) {
return DllCall("DeleteDC", "UPtr", hdc)
}
Gdip_LibraryVersion() {
return 1.45
}
Gdip_LibrarySubVersion() {
return 1.85
}
Gdip_BitmapFromBRA(ByRef BRAFromMemIn, File, Alternate := 0) {
pBitmap := 0
pStream := 0
If !(BRAFromMemIn)
Return -1
Headers := StrSplit(StrGet(&BRAFromMemIn, 256, "CP0"), "`n")
Header := StrSplit(Headers.1, "|")
If (Header.Length() != 4) || (Header.2 != "BRA!")
Return -2
_Info := StrSplit(Headers.2, "|")
If (_Info.Length() != 3)
Return -3
OffsetTOC := StrPut(Headers.1, "CP0") + StrPut(Headers.2, "CP0")
OffsetData := _Info.2
SearchIndex := Alternate ? 1 : 2
TOC := StrGet(&BRAFromMemIn + OffsetTOC, OffsetData - OffsetTOC - 1, "CP0")
RX1 := A_AhkVersion < "2" ? "mi`nO)^" : "mi`n)^"
Offset := Size := 0
If RegExMatch(TOC, RX1 . (Alternate ? File "\|.+?" : "\d+\|" . File) . "\|(\d+)\|(\d+)$", FileInfo) {
Offset := OffsetData + FileInfo.1
Size := FileInfo.2
}
If (Size=0)
Return -4
hData := DllCall("GlobalAlloc", "UInt", 2, "UInt", Size, "UPtr")
pData := DllCall("GlobalLock", "Ptr", hData, "UPtr")
DllCall("RtlMoveMemory", "Ptr", pData, "Ptr", &BRAFromMemIn + Offset, "Ptr", Size)
DllCall("GlobalUnlock", "Ptr", hData)
DllCall("Ole32.dll\CreateStreamOnHGlobal", "Ptr", hData, "Int", 1, "PtrP", pStream)
pBitmap := Gdip_CreateBitmapFromStream(pStream)
ObjRelease(pStream)
Return pBitmap
}
Gdip_BitmapFromBase64(ByRef Base64) {
Static Ptr := "UPtr"
pBitmap := 0
DecLen := 0
if !(DllCall("crypt32\CryptStringToBinary", Ptr, &Base64, "UInt", 0, "UInt", 0x01, Ptr, 0, "UIntP", DecLen, Ptr, 0, Ptr, 0))
return -1
VarSetCapacity(Dec, DecLen, 0)
if !(DllCall("crypt32\CryptStringToBinary", Ptr, &Base64, "UInt", 0, "UInt", 0x01, Ptr, &Dec, "UIntP", DecLen, Ptr, 0, Ptr, 0))
return -2
if !(pStream := DllCall("shlwapi\SHCreateMemStream", Ptr, &Dec, "UInt", DecLen, "UPtr"))
return -3
pBitmap := Gdip_CreateBitmapFromStream(pStream, 1)
ObjRelease(pStream)
return pBitmap
}
Gdip_CreateBitmapFromStream(pStream, ICM:=0) {
pBitmap := 0
If (ICM=1)
DllCall("gdiplus\GdipCreateBitmapFromStreamICM", "UPtr", pStream, "PtrP", pBitmap)
Else
DllCall("gdiplus\GdipCreateBitmapFromStream", "UPtr", pStream, "PtrP", pBitmap)
Return pBitmap
}
Gdip_DrawRectangle(pGraphics, pPen, x, y, w, h) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawRectangle", Ptr, pGraphics, Ptr, pPen, "float", x, "float", y, "float", w, "float", h)
}
Gdip_DrawRoundedRectangle(pGraphics, pPen, x, y, w, h, r) {
Gdip_SetClipRect(pGraphics, x-r, y-r, 2*r, 2*r, 4)
Gdip_SetClipRect(pGraphics, x+w-r, y-r, 2*r, 2*r, 4)
Gdip_SetClipRect(pGraphics, x-r, y+h-r, 2*r, 2*r, 4)
Gdip_SetClipRect(pGraphics, x+w-r, y+h-r, 2*r, 2*r, 4)
_E := Gdip_DrawRectangle(pGraphics, pPen, x, y, w, h)
Gdip_ResetClip(pGraphics)
Gdip_SetClipRect(pGraphics, x-(2*r), y+r, w+(4*r), h-(2*r), 4)
Gdip_SetClipRect(pGraphics, x+r, y-(2*r), w-(2*r), h+(4*r), 4)
Gdip_DrawEllipse(pGraphics, pPen, x, y, 2*r, 2*r)
Gdip_DrawEllipse(pGraphics, pPen, x+w-(2*r), y, 2*r, 2*r)
Gdip_DrawEllipse(pGraphics, pPen, x, y+h-(2*r), 2*r, 2*r)
Gdip_DrawEllipse(pGraphics, pPen, x+w-(2*r), y+h-(2*r), 2*r, 2*r)
Gdip_ResetClip(pGraphics)
return _E
}
Gdip_DrawRoundedRectangle2(pGraphics, pPen, x, y, w, h, r, Angle:=0) {
penWidth := Gdip_GetPenWidth(pPen)
pw := penWidth / 2
if (w <= h && (r + pw > w / 2))
{
r := (w / 2 > pw) ? w / 2 - pw : 0
} else if (h < w && r + pw > h / 2)
{
r := (h / 2 > pw) ? h / 2 - pw : 0
} else if (r < pw / 2)
{
r := pw / 2
}
r2 := r * 2
path1 := Gdip_CreatePath(0)
Gdip_AddPathArc(path1, x + pw, y + pw, r2, r2, 180, 90)
Gdip_AddPathLine(path1, x + pw + r, y + pw, x + w - r - pw, y + pw)
Gdip_AddPathArc(path1, x + w - r2 - pw, y + pw, r2, r2, 270, 90)
Gdip_AddPathLine(path1, x + w - pw, y + r + pw, x + w - pw, y + h - r - pw)
Gdip_AddPathArc(path1, x + w - r2 - pw, y + h - r2 - pw, r2, r2, 0, 90)
Gdip_AddPathLine(path1, x + w - r - pw, y + h - pw, x + r + pw, y + h - pw)
Gdip_AddPathArc(path1, x + pw, y + h - r2 - pw, r2, r2, 90, 90)
Gdip_AddPathLine(path1, x + pw, y + h - r - pw, x + pw, y + r + pw)
Gdip_ClosePathFigure(path1)
If (Angle>0)
Gdip_RotatePathAtCenter(path1, Angle)
_E := Gdip_DrawPath(pGraphics, pPen, path1)
Gdip_DeletePath(path1)
return _E
}
Gdip_DrawEllipse(pGraphics, pPen, x, y, w, h) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawEllipse", Ptr, pGraphics, Ptr, pPen, "float", x, "float", y, "float", w, "float", h)
}
Gdip_DrawBezier(pGraphics, pPen, x1, y1, x2, y2, x3, y3, x4, y4) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawBezier"
, Ptr, pGraphics
, Ptr, pPen
, "float", x1
, "float", y1
, "float", x2
, "float", y2
, "float", x3
, "float", y3
, "float", x4
, "float", y4)
}
Gdip_DrawBezierCurve(pGraphics, pPen, Points) {
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipDrawBeziers", "UPtr", pGraphics, "UPtr", pPen, "UPtr", &PointsF, "UInt", iCount)
}
Gdip_DrawClosedCurve(pGraphics, pPen, Points, Tension:="") {
iCount := CreatePointsF(PointsF, Points)
If Tension
return DllCall("gdiplus\GdipDrawClosedCurve2", "UPtr", pGraphics, "UPtr", pPen, "UPtr", &PointsF, "UInt", iCount, "float", Tension)
Else
return DllCall("gdiplus\GdipDrawClosedCurve", "UPtr", pGraphics, "UPtr", pPen, "UPtr", &PointsF, "UInt", iCount)
}
Gdip_DrawCurve(pGraphics, pPen, Points, Tension:="") {
iCount := CreatePointsF(PointsF, Points)
If Tension
return DllCall("gdiplus\GdipDrawCurve2", "UPtr", pGraphics, "UPtr", pPen, "UPtr", &PointsF, "UInt", iCount, "float", Tension)
Else
return DllCall("gdiplus\GdipDrawCurve", "UPtr", pGraphics, "UPtr", pPen, "UPtr", &PointsF, "UInt", iCount)
}
Gdip_DrawPolygon(pGraphics, pPen, Points) {
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipDrawPolygon", "UPtr", pGraphics, "UPtr", pPen, "UPtr", &PointsF, "UInt", iCount)
}
Gdip_DrawArc(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawArc"
, Ptr, pGraphics
, Ptr, pPen
, "float", x, "float", y
, "float", w, "float", h
, "float", StartAngle
, "float", SweepAngle)
}
Gdip_DrawPie(pGraphics, pPen, x, y, w, h, StartAngle, SweepAngle) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawPie", Ptr, pGraphics, Ptr, pPen, "float", x, "float", y, "float", w, "float", h, "float", StartAngle, "float", SweepAngle)
}
Gdip_DrawLine(pGraphics, pPen, x1, y1, x2, y2) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawLine"
, Ptr, pGraphics
, Ptr, pPen
, "float", x1, "float", y1
, "float", x2, "float", y2)
}
Gdip_DrawLines(pGraphics, pPen, Points) {
Static Ptr := "UPtr"
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipDrawLines", Ptr, pGraphics, Ptr, pPen, Ptr, &PointsF, "int", iCount)
}
Gdip_FillRectangle(pGraphics, pBrush, x, y, w, h) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillRectangle"
, Ptr, pGraphics
, Ptr, pBrush
, "float", x, "float", y
, "float", w, "float", h)
}
Gdip_FillRoundedRectangle2(pGraphics, pBrush, x, y, w, h, r) {
r := (w <= h) ? (r < w // 2) ? r : w // 2 : (r < h // 2) ? r : h // 2
path1 := Gdip_CreatePath(0)
Gdip_AddPathRectangle(path1, x+r, y, w-(2*r), r)
Gdip_AddPathRectangle(path1, x+r, y+h-r, w-(2*r), r)
Gdip_AddPathRectangle(path1, x, y+r, r, h-(2*r))
Gdip_AddPathRectangle(path1, x+w-r, y+r, r, h-(2*r))
Gdip_AddPathRectangle(path1, x+r, y+r, w-(2*r), h-(2*r))
Gdip_AddPathPie(path1, x, y, 2*r, 2*r, 180, 90)
Gdip_AddPathPie(path1, x+w-(2*r), y, 2*r, 2*r, 270, 90)
Gdip_AddPathPie(path1, x, y+h-(2*r), 2*r, 2*r, 90, 90)
Gdip_AddPathPie(path1, x+w-(2*r), y+h-(2*r), 2*r, 2*r, 0, 90)
E := Gdip_FillPath(pGraphics, pBrush, path1)
Gdip_DeletePath(path1)
return E
}
Gdip_FillRoundedRectangle(pGraphics, pBrush, x, y, w, h, r) {
Region := Gdip_GetClipRegion(pGraphics)
Gdip_SetClipRect(pGraphics, x-r, y-r, 2*r, 2*r, 4)
Gdip_SetClipRect(pGraphics, x+w-r, y-r, 2*r, 2*r, 4)
Gdip_SetClipRect(pGraphics, x-r, y+h-r, 2*r, 2*r, 4)
Gdip_SetClipRect(pGraphics, x+w-r, y+h-r, 2*r, 2*r, 4)
_E := Gdip_FillRectangle(pGraphics, pBrush, x, y, w, h)
Gdip_SetClipRegion(pGraphics, Region, 0)
Gdip_SetClipRect(pGraphics, x-(2*r), y+r, w+(4*r), h-(2*r), 4)
Gdip_SetClipRect(pGraphics, x+r, y-(2*r), w-(2*r), h+(4*r), 4)
Gdip_FillEllipse(pGraphics, pBrush, x, y, 2*r, 2*r)
Gdip_FillEllipse(pGraphics, pBrush, x+w-(2*r), y, 2*r, 2*r)
Gdip_FillEllipse(pGraphics, pBrush, x, y+h-(2*r), 2*r, 2*r)
Gdip_FillEllipse(pGraphics, pBrush, x+w-(2*r), y+h-(2*r), 2*r, 2*r)
Gdip_SetClipRegion(pGraphics, Region, 0)
Gdip_DeleteRegion(Region)
return _E
}
Gdip_FillPolygon(pGraphics, pBrush, Points, FillMode:=0) {
Static Ptr := "UPtr"
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipFillPolygon", Ptr, pGraphics, Ptr, pBrush, Ptr, &PointsF, "int", iCount, "int", FillMode)
}
Gdip_FillPie(pGraphics, pBrush, x, y, w, h, StartAngle, SweepAngle) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillPie"
, Ptr, pGraphics
, Ptr, pBrush
, "float", x
, "float", y
, "float", w
, "float", h
, "float", StartAngle
, "float", SweepAngle)
}
Gdip_FillEllipse(pGraphics, pBrush, x, y, w, h) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillEllipse", Ptr, pGraphics, Ptr, pBrush, "float", x, "float", y, "float", w, "float", h)
}
Gdip_FillRegion(pGraphics, pBrush, Region) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillRegion", Ptr, pGraphics, Ptr, pBrush, Ptr, Region)
}
Gdip_FillPath(pGraphics, pBrush, pPath) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFillPath", Ptr, pGraphics, Ptr, pBrush, Ptr, pPath)
}
Gdip_FillClosedCurve(pGraphics, pBrush, Points, Tension:="", FillMode:=0) {
Static Ptr := "UPtr"
iCount := CreatePointsF(PointsF, Points)
If Tension
Return DllCall("gdiplus\GdipFillClosedCurve2", Ptr, pGraphics, Ptr, pBrush, "UPtr", &PointsF, "int", iCount, "float", Tension, "int", FillMode)
Else
Return DllCall("gdiplus\GdipFillClosedCurve", Ptr, pGraphics, Ptr, pBrush, "UPtr", &PointsF, "int", iCount)
}
Gdip_DrawImagePointsRect(pGraphics, pBitmap, Points, sx:="", sy:="", sw:="", sh:="", Matrix:=1, Unit:=2, ImageAttr:=0) {
Static Ptr := "UPtr"
If !ImageAttr
{
if !IsNumber(Matrix)
ImageAttr := Gdip_SetImageAttributesColorMatrix(Matrix)
else if (Matrix != 1)
ImageAttr := Gdip_SetImageAttributesColorMatrix("1|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|" Matrix "|0|0|0|0|0|1")
} Else usrImageAttr := 1
if (sx="" && sy="" && sw="" && sh="")
{
sx := sy := 0
Gdip_GetImageDimensions(pBitmap, sw, sh)
}
iCount := CreatePointsF(PointsF, Points)
_E := DllCall("gdiplus\GdipDrawImagePointsRect"
, Ptr, pGraphics
, Ptr, pBitmap
, Ptr, &PointsF
, "int", iCount
, "float", sX
, "float", sY
, "float", sW
, "float", sH
, "int", Unit
, Ptr, ImageAttr ? ImageAttr : 0
, Ptr, 0
, Ptr, 0)
if (ImageAttr && usrImageAttr!=1)
Gdip_DisposeImageAttributes(ImageAttr)
return _E
}
Gdip_DrawImage(pGraphics, pBitmap, dx:="", dy:="", dw:="", dh:="", sx:="", sy:="", sw:="", sh:="", Matrix:=1, Unit:=2, ImageAttr:=0) {
Static Ptr := "UPtr"
If !ImageAttr
{
if !IsNumber(Matrix)
ImageAttr := Gdip_SetImageAttributesColorMatrix(Matrix)
else if (Matrix!=1)
ImageAttr := Gdip_SetImageAttributesColorMatrix("1|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|" Matrix "|0|0|0|0|0|1")
} Else usrImageAttr := 1
If (dx!="" && dy!="" && dw="" && dh="" && sx="" && sy="" && sw="" && sh="")
{
sx := sy := 0
sw := dw := Gdip_GetImageWidth(pBitmap)
sh := dh := Gdip_GetImageHeight(pBitmap)
} Else If (sx="" && sy="" && sw="" && sh="")
{
If (dx="" && dy="" && dw="" && dh="")
{
sx := dx := 0, sy := dy := 0
sw := dw := Gdip_GetImageWidth(pBitmap)
sh := dh := Gdip_GetImageHeight(pBitmap)
} Else
{
sx := sy := 0
Gdip_GetImageDimensions(pBitmap, sw, sh)
}
}
_E := DllCall("gdiplus\GdipDrawImageRectRect"
, Ptr, pGraphics
, Ptr, pBitmap
, "float", dX, "float", dY
, "float", dW, "float", dH
, "float", sX, "float", sY
, "float", sW, "float", sH
, "int", Unit
, Ptr, ImageAttr ? ImageAttr : 0
, Ptr, 0, Ptr, 0)
if (ImageAttr && usrImageAttr!=1)
Gdip_DisposeImageAttributes(ImageAttr)
return _E
}
Gdip_DrawImageFast(pGraphics, pBitmap, X:=0, Y:=0) {
Static Ptr := "UPtr"
_E := DllCall("gdiplus\GdipDrawImage"
, Ptr, pGraphics
, Ptr, pBitmap
, "float", X
, "float", Y)
return _E
}
Gdip_DrawImageRect(pGraphics, pBitmap, X, Y, W, H) {
Static Ptr := "UPtr"
_E := DllCall("gdiplus\GdipDrawImageRect"
, Ptr, pGraphics
, Ptr, pBitmap
, "float", X, "float", Y
, "float", W, "float", H)
return _E
}
Gdip_SetImageAttributesColorMatrix(clrMatrix, ImageAttr:=0, grayMatrix:=0, ColorAdjustType:=1, fEnable:=1, ColorMatrixFlag:=0) {
Static Ptr := "UPtr"
If (StrLen(clrMatrix)<5 && ImageAttr)
Return -1
If StrLen(clrMatrix)<5
Return
VarSetCapacity(ColourMatrix, 100, 0)
Matrix := RegExReplace(RegExReplace(clrMatrix, "^[^\d-\.]+([\d\.])", "$1", , 1), "[^\d-\.]+", "|")
Matrix := StrSplit(Matrix, "|")
Loop 25
{
M := (Matrix[A_Index] != "") ? Matrix[A_Index] : Mod(A_Index-1, 6) ? 0 : 1
NumPut(M, ColourMatrix, (A_Index-1)*4, "float")
}
Matrix := ""
Matrix := RegExReplace(RegExReplace(grayMatrix, "^[^\d-\.]+([\d\.])", "$1", , 1), "[^\d-\.]+", "|")
Matrix := StrSplit(Matrix, "|")
If (StrLen(Matrix)>2 && ColorMatrixFlag=2)
{
VarSetCapacity(GrayscaleMatrix, 100, 0)
Loop 25
{
M := (Matrix[A_Index] != "") ? Matrix[A_Index] : Mod(A_Index-1, 6) ? 0 : 1
NumPut(M, GrayscaleMatrix, (A_Index-1)*4, "float")
}
}
If !ImageAttr
{
created := 1
ImageAttr := Gdip_CreateImageAttributes()
}
E := DllCall("gdiplus\GdipSetImageAttributesColorMatrix"
, Ptr, ImageAttr
, "int", ColorAdjustType
, "int", fEnable
, Ptr, &ColourMatrix
, Ptr, &GrayscaleMatrix
, "int", ColorMatrixFlag)
E := created=1 ? ImageAttr : E
return E
}
Gdip_CreateImageAttributes() {
ImageAttr := 0
DllCall("gdiplus\GdipCreateImageAttributes", "UPtr*", ImageAttr)
return ImageAttr
}
Gdip_CloneImageAttributes(ImageAttr) {
Static Ptr := "UPtr"
newImageAttr := 0
DllCall("gdiplus\GdipCloneImageAttributes", Ptr, ImageAttr, "UPtr*", newImageAttr)
return newImageAttr
}
Gdip_SetImageAttributesThreshold(ImageAttr, Threshold, ColorAdjustType:=1, fEnable:=1) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetImageAttributesThreshold", Ptr, ImageAttr, "int", ColorAdjustType, "int", fEnable, "float", Threshold)
}
Gdip_SetImageAttributesResetMatrix(ImageAttr, ColorAdjustType) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetImageAttributesToIdentity", Ptr, ImageAttr, "int", ColorAdjustType)
}
Gdip_SetImageAttributesGamma(ImageAttr, Gamma, ColorAdjustType:=1, fEnable:=1) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetImageAttributesGamma", Ptr, ImageAttr, "int", ColorAdjustType, "int", fEnable, "float", Gamma)
}
Gdip_SetImageAttributesToggle(ImageAttr, ColorAdjustType, fEnable) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetImageAttributesNoOp", Ptr, ImageAttr, "int", ColorAdjustType, "int", fEnable)
}
Gdip_SetImageAttributesOutputChannel(ImageAttr, ColorChannelFlags, ColorAdjustType:=1, fEnable:=1) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetImageAttributesOutputChannel", Ptr, ImageAttr, "int", ColorAdjustType, "int", fEnable, "int", ColorChannelFlags)
}
Gdip_SetImageAttributesColorKeys(ImageAttr, ARGBLow, ARGBHigh, ColorAdjustType:=1, fEnable:=1) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetImageAttributesColorKeys", Ptr, ImageAttr, "int", ColorAdjustType, "int", fEnable, "uint", ARGBLow, "uint", ARGBHigh)
}
Gdip_SetImageAttributesWrapMode(ImageAttr, WrapMode, ARGB) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetImageAttributesWrapMode", Ptr, ImageAttr, "int", WrapMode, "uint", ARGB, "int", 0)
}
Gdip_ResetImageAttributes(ImageAttr, ColorAdjustType) {
Static Ptr := "UPtr"
DllCall("gdiplus\GdipResetImageAttributes", Ptr, ImageAttr, "int", ColorAdjustType)
}
Gdip_GraphicsFromImage(pBitmap, InterpolationMode:="", SmoothingMode:="", PageUnit:="", CompositingQuality:="") {
pGraphics := 0
DllCall("gdiplus\GdipGetImageGraphicsContext", "UPtr", pBitmap, "UPtr*", pGraphics)
If pGraphics
{
If (InterpolationMode!="")
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
If (SmoothingMode!="")
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
If (PageUnit!="")
Gdip_SetPageUnit(pGraphics, PageUnit)
If (CompositingQuality!="")
Gdip_SetCompositingQuality(pGraphics, CompositingQuality)
}
return pGraphics
}
Gdip_GraphicsFromHDC(hDC, hDevice:="", InterpolationMode:="", SmoothingMode:="", PageUnit:="", CompositingQuality:="") {
pGraphics := 0
If hDevice
DllCall("Gdiplus\GdipCreateFromHDC2", "UPtr", hDC, "UPtr", hDevice, "UPtr*", pGraphics)
Else
DllCall("gdiplus\GdipCreateFromHDC", "UPtr", hdc, "UPtr*", pGraphics)
If pGraphics
{
If (InterpolationMode!="")
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
If (SmoothingMode!="")
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
If (PageUnit!="")
Gdip_SetPageUnit(pGraphics, PageUnit)
If (CompositingQuality!="")
Gdip_SetCompositingQuality(pGraphics, CompositingQuality)
}
return pGraphics
}
Gdip_GraphicsFromHWND(HWND, useICM:=0, InterpolationMode:="", SmoothingMode:="", PageUnit:="", CompositingQuality:="") {
pGraphics := 0
function2call := (useICM=1) ? "GdipCreateFromHWNDICM" : "GdipCreateFromHWND"
DllCall("gdiplus\" function2call, "UPtr", HWND, "UPtr*", pGraphics)
If pGraphics
{
If (InterpolationMode!="")
Gdip_SetInterpolationMode(pGraphics, InterpolationMode)
If (SmoothingMode!="")
Gdip_SetSmoothingMode(pGraphics, SmoothingMode)
If (PageUnit!="")
Gdip_SetPageUnit(pGraphics, PageUnit)
If (CompositingQuality!="")
Gdip_SetCompositingQuality(pGraphics, CompositingQuality)
}
return pGraphics
}
Gdip_GetDC(pGraphics) {
hDC := 0
DllCall("gdiplus\GdipGetDC", "UPtr", pGraphics, "UPtr*", hDC)
return hDC
}
Gdip_ReleaseDC(pGraphics, hdc) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipReleaseDC", Ptr, pGraphics, Ptr, hdc)
}
Gdip_GraphicsClear(pGraphics, ARGB:=0x00ffffff) {
return DllCall("gdiplus\GdipGraphicsClear", "UPtr", pGraphics, "int", ARGB)
}
Gdip_GraphicsFlush(pGraphics, intent) {
return DllCall("gdiplus\GdipFlush", "UPtr", pGraphics, "int", intent)
}
Gdip_BlurBitmap(pBitmap, BlurAmount, usePARGB:=0, quality:=7) {
If (BlurAmount>100)
BlurAmount := 100
Else If (BlurAmount<1)
BlurAmount := 1
PixelFormat := (usePARGB=1) ? "0xE200B" : "0x26200A"
Gdip_GetImageDimensions(pBitmap, sWidth, sHeight)
dWidth := sWidth//BlurAmount
dHeight := sHeight//BlurAmount
pBitmap1 := Gdip_CreateBitmap(dWidth, dHeight, PixelFormat)
G1 := Gdip_GraphicsFromImage(pBitmap1)
Gdip_SetInterpolationMode(G1, quality)
Gdip_DrawImage(G1, pBitmap, 0, 0, dWidth, dHeight, 0, 0, sWidth, sHeight)
Gdip_DeleteGraphics(G1)
pBitmap2 := Gdip_CreateBitmap(sWidth, sHeight, PixelFormat)
G2 := Gdip_GraphicsFromImage(pBitmap2)
Gdip_SetInterpolationMode(G2, quality)
Gdip_DrawImage(G2, pBitmap1, 0, 0, sWidth, sHeight, 0, 0, dWidth, dHeight)
Gdip_DeleteGraphics(G2)
Gdip_DisposeImage(pBitmap1)
return pBitmap2
}
Gdip_SaveBitmapToFile(pBitmap, sOutput, Quality:=75, toBase64:=0) {
Static Ptr := "UPtr"
nCount := 0
nSize := 0
_p := 0
SplitPath sOutput,,, Extension
If !RegExMatch(Extension, "^(?i:BMP|DIB|RLE|JPG|JPEG|JPE|JFIF|GIF|TIF|TIFF|PNG)$")
Return -1
Extension := "." Extension
DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", nCount, "uint*", nSize)
VarSetCapacity(ci, nSize)
DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, Ptr, &ci)
If !(nCount && nSize)
Return -2
If (A_IsUnicode)
{
StrGet_Name := "StrGet"
N := (A_AhkVersion < 2) ? nCount : "nCount"
Loop %N%
{
sString := %StrGet_Name%(NumGet(ci, (idx := (48+7*A_PtrSize)*(A_Index-1))+32+3*A_PtrSize), "UTF-16")
If !InStr(sString, "*" Extension)
Continue
pCodec := &ci+idx
Break
}
} Else
{
N := (A_AhkVersion < 2) ? nCount : "nCount"
Loop %N%
{
Location := NumGet(ci, 76*(A_Index-1)+44)
nSize := DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "uint", 0, "int",  0, "uint", 0, "uint", 0)
VarSetCapacity(sString, nSize)
DllCall("WideCharToMultiByte", "uint", 0, "uint", 0, "uint", Location, "int", -1, "str", sString, "int", nSize, "uint", 0, "uint", 0)
If !InStr(sString, "*" Extension)
Continue
pCodec := &ci+76*(A_Index-1)
Break
}
}
If !pCodec
Return -3
If (Quality!=75)
{
Quality := (Quality < 0) ? 0 : (Quality > 100) ? 100 : Quality
If (quality>90 && toBase64=1)
Quality := 90
If RegExMatch(Extension, "^\.(?i:JPG|JPEG|JPE|JFIF)$")
{
DllCall("gdiplus\GdipGetEncoderParameterListSize", Ptr, pBitmap, Ptr, pCodec, "uint*", nSize)
VarSetCapacity(EncoderParameters, nSize, 0)
DllCall("gdiplus\GdipGetEncoderParameterList", Ptr, pBitmap, Ptr, pCodec, "uint", nSize, Ptr, &EncoderParameters)
nCount := NumGet(EncoderParameters, "UInt")
N := (A_AhkVersion < 2) ? nCount : "nCount"
Loop %N%
{
elem := (24+A_PtrSize)*(A_Index-1) + 4 + (pad := A_PtrSize = 8 ? 4 : 0)
If (NumGet(EncoderParameters, elem+16, "UInt") = 1) && (NumGet(EncoderParameters, elem+20, "UInt") = 6)
{
_p := elem+&EncoderParameters-pad-4
NumPut(Quality, NumGet(NumPut(4, NumPut(1, _p+0)+20, "UInt")), "UInt")
Break
}
}
}
}
If (toBase64=1)
{
DllCall("ole32\CreateStreamOnHGlobal", "ptr",0, "int",true, "ptr*",pStream)
_E := DllCall("gdiplus\GdipSaveImageToStream", "ptr",pBitmap, "ptr",pStream, "ptr",pCodec, "uint", _p ? _p : 0)
If _E
Return -6
DllCall("ole32\GetHGlobalFromStream", "ptr",pStream, "uint*",hData)
pData := DllCall("GlobalLock", "ptr",hData, "ptr")
nSize := DllCall("GlobalSize", "uint",pData)
VarSetCapacity(bin, nSize, 0)
DllCall("RtlMoveMemory", "ptr",&bin, "ptr",pData, "uptr",nSize)
DllCall("GlobalUnlock", "ptr",hData)
ObjRelease(pStream)
DllCall("GlobalFree", "ptr",hData)
DllCall("Crypt32.dll\CryptBinaryToStringA", "ptr",&bin, "uint",nSize, "uint",0x40000001, "ptr",0, "uint*",base64Length)
VarSetCapacity(base64, base64Length, 0)
_E := DllCall("Crypt32.dll\CryptBinaryToStringA", "ptr",&bin, "uint",nSize, "uint",0x40000001, "ptr",&base64, "uint*",base64Length)
If !_E
Return -7
VarSetCapacity(bin, 0)
Return StrGet(&base64, base64Length, "CP0")
}
_E := DllCall("gdiplus\GdipSaveImageToFile", Ptr, pBitmap, "WStr", sOutput, Ptr, pCodec, "uint", _p ? _p : 0)
Return _E ? -5 : 0
}
Gdip_GetPixel(pBitmap, x, y) {
ARGB := 0
DllCall("gdiplus\GdipBitmapGetPixel", "UPtr", pBitmap, "int", x, "int", y, "uint*", ARGB)
return ARGB
}
Gdip_GetPixelColor(pBitmap, x, y, Format) {
ARGBdec := Gdip_GetPixel(pBitmap, x, y)
If (format=1)
{
Return Format("{1:#x}", ARGBdec)
} Else If (format=2)
{
Gdip_FromARGB(ARGBdec, A, R, G, B)
Return R "," G "," B "," A
} Else If (format=3)
{
clr := Format("{1:#x}", ARGBdec)
Return "0x" SubStr(clr, -1) SubStr(clr, 7, 2) SubStr(clr, 5, 2)
} Else If (format=4)
{
Return SubStr(Format("{1:#x}", ARGBdec), 5)
} Else Return ARGBdec
}
Gdip_SetPixel(pBitmap, x, y, ARGB) {
return DllCall("gdiplus\GdipBitmapSetPixel", "UPtr", pBitmap, "int", x, "int", y, "int", ARGB)
}
Gdip_GetImageWidth(pBitmap) {
Width := 0
DllCall("gdiplus\GdipGetImageWidth", "UPtr", pBitmap, "uint*", Width)
return Width
}
Gdip_GetImageHeight(pBitmap) {
Height := 0
DllCall("gdiplus\GdipGetImageHeight", "UPtr", pBitmap, "uint*", Height)
return Height
}
Gdip_GetImageDimensions(pBitmap, ByRef Width, ByRef Height) {
If StrLen(pBitmap)<3
Return -1
Width := 0, Height := 0
E := Gdip_GetImageDimension(pBitmap, Width, Height)
Width := Round(Width)
Height := Round(Height)
return E
}
Gdip_GetImageDimension(pBitmap, ByRef w, ByRef h) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipGetImageDimension", Ptr, pBitmap, "float*", w, "float*", h)
}
Gdip_GetImageBounds(pBitmap) {
rData := {}
VarSetCapacity(RectF, 16, 0)
status := DllCall("gdiplus\GdipGetImageBounds", "UPtr", pBitmap, "UPtr", &RectF, "Int*", 0)
If (!status) {
rData.x := NumGet(&RectF, 0, "float")
, rData.y := NumGet(&RectF, 4, "float")
, rData.w := NumGet(&RectF, 8, "float")
, rData.h := NumGet(&RectF, 12, "float")
} Else {
Return status
}
return rData
}
Gdip_GetImageFlags(pBitmap) {
Flags := 0
DllCall("gdiplus\GdipGetImageFlags", "UPtr", pBitmap, "UInt*", Flags)
Return Flags
}
Gdip_GetImageRawFormat(pBitmap) {
Static RawFormatsList := {"{B96B3CA9-0728-11D3-9D7B-0000F81EF32E}":"Undefined", "{B96B3CAA-0728-11D3-9D7B-0000F81EF32E}":"MemoryBMP", "{B96B3CAB-0728-11D3-9D7B-0000F81EF32E}":"BMP", "{B96B3CAC-0728-11D3-9D7B-0000F81EF32E}":"EMF", "{B96B3CAD-0728-11D3-9D7B-0000F81EF32E}":"WMF", "{B96B3CAE-0728-11D3-9D7B-0000F81EF32E}":"JPEG", "{B96B3CAF-0728-11D3-9D7B-0000F81EF32E}":"PNG", "{B96B3CB0-0728-11D3-9D7B-0000F81EF32E}":"GIF", "{B96B3CB1-0728-11D3-9D7B-0000F81EF32E}":"TIFF", "{B96B3CB2-0728-11D3-9D7B-0000F81EF32E}":"EXIF", "{B96B3CB5-0728-11D3-9D7B-0000F81EF32E}":"Icon"}
VarSetCapacity(pGuid, 16, 0)
E1 := DllCall("gdiplus\GdipGetImageRawFormat", "UPtr", pBitmap, "Ptr", &pGuid)
size := VarSetCapacity(sguid, (38 << !!A_IsUnicode) + 1, 0)
E2 := DllCall("ole32.dll\StringFromGUID2", "ptr", &pguid, "ptr", &sguid, "int", size)
R1 := E2 ? StrGet(&sguid) : E2
R2 := RawFormatsList[R1]
Return R2 ? R2 : R1
}
Gdip_GetImagePixelFormat(pBitmap, mode:=0) {
Static PixelFormatsList := {0x30101:"1-INDEXED", 0x30402:"4-INDEXED", 0x30803:"8-INDEXED", 0x101004:"16-GRAYSCALE", 0x021005:"16-RGB555", 0x21006:"16-RGB565", 0x61007:"16-ARGB1555", 0x21808:"24-RGB", 0x22009:"32-RGB", 0x26200A:"32-ARGB", 0xE200B:"32-PARGB", 0x10300C:"48-RGB", 0x34400D:"64-ARGB", 0x1A400E:"64-PARGB"}
PixelFormat := 0
E := DllCall("gdiplus\GdipGetImagePixelFormat", "UPtr", pBitmap, "UPtr*", PixelFormat)
If E
Return -1
If (mode=0)
Return PixelFormat
inHEX := Format("{1:#x}", PixelFormat)
If (PixelFormatsList.Haskey(inHEX) && mode=2)
result := PixelFormatsList[inHEX]
Else
result := inHEX
return result
}
Gdip_GetImageType(pBitmap) {
result := 0
E := DllCall("gdiplus\GdipGetImageType", Ptr, pBitmap, "int*", result)
If E
Return -1
Return result
}
Gdip_GetDPI(pGraphics, ByRef DpiX, ByRef DpiY) {
DpiX := Gdip_GetDpiX(pGraphics)
DpiY := Gdip_GetDpiY(pGraphics)
}
Gdip_GetDpiX(pGraphics) {
dpix := 0
DllCall("gdiplus\GdipGetDpiX", "UPtr", pGraphics, "float*", dpix)
return Round(dpix)
}
Gdip_GetDpiY(pGraphics) {
dpiy := 0
DllCall("gdiplus\GdipGetDpiY", "UPtr", pGraphics, "float*", dpiy)
return Round(dpiy)
}
Gdip_GetImageHorizontalResolution(pBitmap) {
dpix := 0
DllCall("gdiplus\GdipGetImageHorizontalResolution", "UPtr", pBitmap, "float*", dpix)
return Round(dpix)
}
Gdip_GetImageVerticalResolution(pBitmap) {
dpiy := 0
DllCall("gdiplus\GdipGetImageVerticalResolution", "UPtr", pBitmap, "float*", dpiy)
return Round(dpiy)
}
Gdip_BitmapSetResolution(pBitmap, dpix, dpiy) {
return DllCall("gdiplus\GdipBitmapSetResolution", "UPtr", pBitmap, "float", dpix, "float", dpiy)
}
Gdip_BitmapGetDPIResolution(pBitmap, ByRef dpix, ByRef dpiy) {
dpix := dpiy := 0
If StrLen(pBitmap)<3
Return
dpix := Gdip_GetImageHorizontalResolution(pBitmap)
dpiy := Gdip_GetImageVerticalResolution(pBitmap)
}
Gdip_CreateBitmapFromGraphics(pGraphics, Width, Height) {
pBitmap := 0
DllCall("gdiplus\GdipCreateBitmapFromGraphics", "int", Width, "int", Height, "UPtr", pGraphics, "UPtr*", pBitmap)
Return pBitmap
}
Gdip_CreateBitmapFromFile(sFile, IconNumber:=1, IconSize:="", useICM:=0) {
Static Ptr := "UPtr"
PtrA := "UPtr*"
pBitmap := 0
pBitmapOld := 0
hIcon := 0
SplitPath sFile,,, Extension
if RegExMatch(Extension, "^(?i:exe|dll)$")
{
Sizes := IconSize ? IconSize : 256 "|" 128 "|" 64 "|" 48 "|" 32 "|" 16
BufSize := 16 + (2*A_PtrSize)
VarSetCapacity(buf, BufSize, 0)
For eachSize, Size in StrSplit( Sizes, "|" )
{
DllCall("PrivateExtractIcons", "str", sFile, "int", IconNumber-1, "int", Size, "int", Size, PtrA, hIcon, PtrA, 0, "uint", 1, "uint", 0)
if !hIcon
continue
if !DllCall("GetIconInfo", Ptr, hIcon, Ptr, &buf)
{
DestroyIcon(hIcon)
continue
}
hbmMask  := NumGet(buf, 12 + (A_PtrSize - 4))
hbmColor := NumGet(buf, 12 + (A_PtrSize - 4) + A_PtrSize)
if !(hbmColor && DllCall("GetObject", Ptr, hbmColor, "int", BufSize, Ptr, &buf))
{
DestroyIcon(hIcon)
continue
}
break
}
if !hIcon
return -1
Width := NumGet(buf, 4, "int"), Height := NumGet(buf, 8, "int")
hbm := CreateDIBSection(Width, -Height), hdc := CreateCompatibleDC(), obm := SelectObject(hdc, hbm)
if !DllCall("DrawIconEx", Ptr, hdc, "int", 0, "int", 0, Ptr, hIcon, "uint", Width, "uint", Height, "uint", 0, Ptr, 0, "uint", 3)
{
DestroyIcon(hIcon)
return -2
}
VarSetCapacity(dib, 104)
DllCall("GetObject", Ptr, hbm, "int", A_PtrSize = 8 ? 104 : 84, Ptr, &dib)
Stride := NumGet(dib, 12, "Int")
Bits := NumGet(dib, 20 + (A_PtrSize = 8 ? 4 : 0))
pBitmapOld := Gdip_CreateBitmap(Width, Height, 0, Stride, Bits)
pBitmap := Gdip_CreateBitmap(Width, Height)
_G := Gdip_GraphicsFromImage(pBitmap)
Gdip_DrawImage(_G, pBitmapOld, 0, 0, Width, Height, 0, 0, Width, Height)
SelectObject(hdc, obm), DeleteObject(hbm), DeleteDC(hdc)
Gdip_DeleteGraphics(_G), Gdip_DisposeImage(pBitmapOld)
DestroyIcon(hIcon)
} else
{
function2call := (useICM=1) ? "GdipCreateBitmapFromFileICM" : "GdipCreateBitmapFromFile"
E := DllCall("gdiplus\" function2call, "WStr", sFile, PtrA, pBitmap)
}
return pBitmap
}
Gdip_CreateARGBBitmapFromHBITMAP(hImage) {
DllCall("GetObject"
, "ptr", hImage
, "int", VarSetCapacity(dib, 76+2*(A_PtrSize=8?4:0)+2*A_PtrSize)
, "ptr", &dib)
width  := NumGet(dib, 4, "uint")
height := NumGet(dib, 8, "uint")
bpp    := NumGet(dib, 18, "ushort")
if (bpp!=32)
return Gdip_CreateBitmapFromHBITMAP(hImage)
hdc := CreateCompatibleDC()
obm := SelectObject(hdc, hImage)
cdc := CreateCompatibleDC(hdc)
hbm := CreateDIBSection(width, -height, hdc, 32, pBits)
ob2 := SelectObject(cdc, hbm)
pBitmap := Gdip_CreateBitmap(width, height)
CreateRect(Rect, 0, 0, width, height)
VarSetCapacity(BitmapData, 16+2*A_PtrSize, 0)
, NumPut(       width, BitmapData,  0,  "uint")
, NumPut(      height, BitmapData,  4,  "uint")
, NumPut(   4 * width, BitmapData,  8,   "int")
, NumPut(     0xE200B, BitmapData, 12,   "int")
, NumPut(       pBits, BitmapData, 16,   "ptr")
DllCall("gdiplus\GdipBitmapLockBits"
,   "ptr", pBitmap
,   "ptr", &Rect
,  "uint", 6
,   "int", 0xE200B
,   "ptr", &BitmapData)
BitBlt(cdc, 0, 0, width, height, hdc, 0, 0)
DllCall("gdiplus\GdipBitmapUnlockBits", "ptr",pBitmap, "ptr",&BitmapData)
SelectObject(cdc, ob2)
DeleteObject(hbm), DeleteDC(cdc)
SelectObject(hdc, obm), DeleteDC(hdc)
return pBitmap
}
Gdip_CreateBitmapFromHBITMAP(hBitmap, hPalette:=0) {
Static Ptr := "UPtr"
pBitmap := 0
DllCall("gdiplus\GdipCreateBitmapFromHBITMAP", Ptr, hBitmap, Ptr, hPalette, "UPtr*", pBitmap)
return pBitmap
}
Gdip_CreateHBITMAPFromBitmap(pBitmap, Background:=0xffffffff) {
hBitmap := 0
DllCall("gdiplus\GdipCreateHBITMAPFromBitmap", "UPtr", pBitmap, "UPtr*", hBitmap, "int", Background)
return hBitmap
}
Gdip_CreateARGBHBITMAPFromBitmap(ByRef pBitmap) {
Gdip_GetImageDimensions(pBitmap, Width, Height)
hdc := CreateCompatibleDC()
hbm := CreateDIBSection(width, -height, hdc, 32, pBits)
obm := SelectObject(hdc, hbm)
CreateRect(Rect, 0, 0, width, height)
VarSetCapacity(BitmapData, 16+2*A_PtrSize, 0)
, NumPut(     width, BitmapData,  0,   "uint")
, NumPut(    height, BitmapData,  4,   "uint")
, NumPut( 4 * width, BitmapData,  8,    "int")
, NumPut(   0xE200B, BitmapData, 12,    "int")
, NumPut(     pBits, BitmapData, 16,    "ptr")
DllCall("gdiplus\GdipBitmapLockBits"
,    "ptr", pBitmap
,    "ptr", &Rect
,   "uint", 5
,    "int", 0xE200B
,    "ptr", &BitmapData)
DllCall("gdiplus\GdipBitmapUnlockBits", "ptr", pBitmap, "ptr", &BitmapData)
SelectObject(hdc, obm)
DeleteObject(hdc)
return hbm
}
Gdip_CreateBitmapFromHICON(hIcon) {
pBitmap := 0
DllCall("gdiplus\GdipCreateBitmapFromHICON", "UPtr", hIcon, "UPtr*", pBitmap)
return pBitmap
}
Gdip_CreateHICONFromBitmap(pBitmap) {
hIcon := 0
DllCall("gdiplus\GdipCreateHICONFromBitmap", "UPtr", pBitmap, "UPtr*", hIcon)
return hIcon
}
Gdip_CreateBitmap(Width, Height, PixelFormat:=0, Stride:=0, Scan0:=0) {
pBitmap := 0
If !PixelFormat
PixelFormat := 0x26200A
DllCall("gdiplus\GdipCreateBitmapFromScan0"
, "int", Width
, "int", Height
, "int", Stride
, "int", PixelFormat
, "UPtr", Scan0
, "UPtr*", pBitmap)
Return pBitmap
}
Gdip_CreateBitmapFromClipboard() {
Static Ptr := "UPtr"
pid := DllCall("GetCurrentProcessId","uint")
hwnd := WinExist("ahk_pid " . pid)
if !DllCall("IsClipboardFormatAvailable", "uint", 8)
{
if DllCall("IsClipboardFormatAvailable", "uint", 2)
{
if !DllCall("OpenClipboard", Ptr, hwnd)
return -1
hData := DllCall("User32.dll\GetClipboardData", "UInt", 0x0002, "UPtr")
hBitmap := DllCall("User32.dll\CopyImage", "UPtr", hData, "UInt", 0, "Int", 0, "Int", 0, "UInt", 0x2004, "Ptr")
DllCall("CloseClipboard")
pBitmap := Gdip_CreateBitmapFromHBITMAP(hBitmap)
DeleteObject(hBitmap)
return pBitmap
}
return -2
}
if !DllCall("OpenClipboard", Ptr, hwnd)
return -1
hBitmap := DllCall("GetClipboardData", "uint", 2, Ptr)
if !hBitmap
{
DllCall("CloseClipboard")
return -3
}
DllCall("CloseClipboard")
If hBitmap
{
pBitmap := Gdip_CreateARGBBitmapFromHBITMAP(hBitmap)
If pBitmap
isUniform := Gdip_TestBitmapUniformity(pBitmap, 7, maxLevelIndex)
If (pBitmap && isUniform=1 && maxLevelIndex<=2)
{
Gdip_DisposeImage(pBitmap)
pBitmap := Gdip_CreateBitmapFromHBITMAP(hBitmap)
}
DeleteObject(hBitmap)
}
if !pBitmap
return -4
return pBitmap
}
Gdip_SetBitmapToClipboard(pBitmap) {
Static Ptr := "UPtr"
off1 := A_PtrSize = 8 ? 52 : 44
off2 := A_PtrSize = 8 ? 32 : 24
pid := DllCall("GetCurrentProcessId","uint")
hwnd := WinExist("ahk_pid " . pid)
r1 := DllCall("OpenClipboard", Ptr, hwnd)
If !r1
Return -1
hBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap, 0)
If !hBitmap
{
DllCall("CloseClipboard")
Return -3
}
r2 := DllCall("EmptyClipboard")
If !r2
{
DeleteObject(hBitmap)
DllCall("CloseClipboard")
Return -2
}
DllCall("GetObject", Ptr, hBitmap, "int", VarSetCapacity(oi, A_PtrSize = 8 ? 104 : 84, 0), Ptr, &oi)
hdib := DllCall("GlobalAlloc", "uint", 2, Ptr, 40+NumGet(oi, off1, "UInt"), Ptr)
pdib := DllCall("GlobalLock", Ptr, hdib, Ptr)
DllCall("RtlMoveMemory", Ptr, pdib, Ptr, &oi+off2, Ptr, 40)
DllCall("RtlMoveMemory", Ptr, pdib+40, Ptr, NumGet(oi, off2 - A_PtrSize, Ptr), Ptr, NumGet(oi, off1, "UInt"))
DllCall("GlobalUnlock", Ptr, hdib)
DeleteObject(hBitmap)
r3 := DllCall("SetClipboardData", "uint", 8, Ptr, hdib)
DllCall("CloseClipboard")
DllCall("GlobalFree", Ptr, hdib)
E := r3 ? 0 : -4
Return E
}
Gdip_CloneBitmapArea(pBitmap, x:="", y:="", w:=0, h:=0, PixelFormat:=0, KeepPixelFormat:=0) {
pBitmapDest := 0
If !PixelFormat
PixelFormat := 0x26200A
If (KeepPixelFormat=1)
PixelFormat := Gdip_GetImagePixelFormat(pBitmap, 1)
If (y="")
y := 0
If (x="")
x := 0
If (!w && !h)
Gdip_GetImageDimensions(pBitmap, w, h)
E := DllCall("gdiplus\GdipCloneBitmapArea"
, "float", x, "float", y
, "float", w, "float", h
, "int", PixelFormat
, "UPtr", pBitmap
, "UPtr*", pBitmapDest)
return pBitmapDest
}
Gdip_CloneBitmap(pBitmap) {
pBitmapDest := 0
E := DllCall("gdiplus\GdipCloneImage"
, "UPtr", pBitmap
, "UPtr*", pBitmapDest)
return pBitmapDest
}
Gdip_BitmapSelectActiveFrame(pBitmap, FrameIndex) {
Countu := 0
CountFrames := 0
Static Ptr := "UPtr"
DllCall("gdiplus\GdipImageGetFrameDimensionsCount", Ptr, pBitmap, "UInt*", Countu)
VarSetCapacity(dIDs, 16, 0)
DllCall("gdiplus\GdipImageGetFrameDimensionsList", Ptr, pBitmap, "Uint", &dIDs, "UInt", Countu)
DllCall("gdiplus\GdipImageGetFrameCount", Ptr, pBitmap, "Uint", &dIDs, "UInt*", CountFrames)
If (FrameIndex>CountFrames)
FrameIndex := CountFrames
Else If (FrameIndex<1)
FrameIndex := 0
E := DllCall("gdiplus\GdipImageSelectActiveFrame", Ptr, pBitmap, Ptr, &dIDs, "uint", FrameIndex)
If E
Return -1
Return CountFrames
}
Gdip_GetBitmapFramesCount(pBitmap) {
Countu := 0
CountFrames := 0
Static Ptr := "UPtr"
DllCall("gdiplus\GdipImageGetFrameDimensionsCount", Ptr, pBitmap, "UInt*", Countu)
VarSetCapacity(dIDs, 16, 0)
DllCall("gdiplus\GdipImageGetFrameDimensionsList", Ptr, pBitmap, "Uint", &dIDs, "UInt", Countu)
DllCall("gdiplus\GdipImageGetFrameCount", Ptr, pBitmap, "Uint", &dIDs, "UInt*", CountFrames)
Return CountFrames
}
Gdip_CreateCachedBitmap(pBitmap, pGraphics) {
pCachedBitmap := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipCreateCachedBitmap", Ptr, pBitmap, Ptr, pGraphics, "Ptr*", pCachedBitmap)
return pCachedBitmap
}
Gdip_DeleteCachedBitmap(pCachedBitmap) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDeleteCachedBitmap", Ptr, pCachedBitmap)
}
Gdip_DrawCachedBitmap(pGraphics, pCachedBitmap, X, Y) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawCachedBitmap", Ptr, pGraphics, Ptr, pCachedBitmap, "int", X, "int", Y)
}
Gdip_ImageRotateFlip(pBitmap, RotateFlipType:=1) {
return DllCall("gdiplus\GdipImageRotateFlip", "UPtr", pBitmap, "int", RotateFlipType)
}
Gdip_RotateBitmapAtCenter(pBitmap, Angle, pBrush:=0, InterpolationMode:=7, PixelFormat:=0) {
If !Angle
{
newBitmap := Gdip_CloneBitmap(pBitmap)
Return newBitmap
}
Gdip_GetImageDimensions(pBitmap, Width, Height)
Gdip_GetRotatedDimensions(Width, Height, Angle, RWidth, RHeight)
Gdip_GetRotatedTranslation(Width, Height, Angle, xTranslation, yTranslation)
If (RWidth*RHeight>536848912) || (Rwidth>32100) || (RHeight>32100)
Return
If (pBrush=0)
{
pBrush := Gdip_BrushCreateSolid("0xFF000000")
defaultBrush := 1
}
PixelFormatReadable := Gdip_GetImagePixelFormat(pBitmap, 2)
If InStr(PixelFormatReadable, "indexed")
{
hbm := CreateDIBSection(RWidth, RHeight,,24)
hdc := CreateCompatibleDC()
obm := SelectObject(hdc, hbm)
G := Gdip_GraphicsFromHDC(hdc)
indexedMode := 1
} Else
{
If (PixelFormat=-1)
PixelFormat := "0xE200B"
newBitmap := Gdip_CreateBitmap(RWidth, RHeight, PixelFormat)
G := Gdip_GraphicsFromImage(newBitmap)
}
Gdip_SetInterpolationMode(G, InterpolationMode)
Gdip_SetSmoothingMode(G, 4)
If StrLen(pBrush)>1
Gdip_FillRectangle(G, pBrush, 0, 0, RWidth, RHeight)
Gdip_TranslateWorldTransform(G, xTranslation, yTranslation)
Gdip_RotateWorldTransform(G, Angle)
Gdip_DrawImageRect(G, pBitmap, 0, 0, Width, Height)
If (indexedMode=1)
{
newBitmap := Gdip_CreateBitmapFromHBITMAP(hbm)
SelectObject(hdc, obm)
DeleteObject(hbm)
DeleteDC(hdc)
}
Gdip_DeleteGraphics(G)
If (defaultBrush=1)
Gdip_DeleteBrush(pBrush)
Return newBitmap
}
Gdip_ResizeBitmap(pBitmap, givenW, givenH, KeepRatio, InterpolationMode:="", KeepPixelFormat:=0, checkTooLarge:=0) {
Gdip_GetImageDimensions(pBitmap, Width, Height)
If (KeepRatio=1)
{
calcIMGdimensions(Width, Height, givenW, givenH, ResizedW, ResizedH)
} Else
{
ResizedW := givenW
ResizedH := givenH
}
If (((ResizedW*ResizedH>536848912) || (ResizedW>32100) || (ResizedH>32100)) && checkTooLarge=1)
Return
PixelFormatReadable := Gdip_GetImagePixelFormat(pBitmap, 2)
If (KeepPixelFormat=1)
PixelFormat := Gdip_GetImagePixelFormat(pBitmap, 1)
Else If (KeepPixelFormat=-1)
PixelFormat := "0xE200B"
Else If Strlen(KeepPixelFormat)>3
PixelFormat := KeepPixelFormat
If InStr(PixelFormatReadable, "indexed")
{
hbm := CreateDIBSection(ResizedW, ResizedH,,24)
hdc := CreateCompatibleDC()
obm := SelectObject(hdc, hbm)
G := Gdip_GraphicsFromHDC(hdc, InterpolationMode, 4)
Gdip_DrawImageRect(G, pBitmap, 0, 0, ResizedW, ResizedH)
newBitmap := Gdip_CreateBitmapFromHBITMAP(hbm)
If (KeepPixelFormat=1)
Gdip_BitmapSetColorDepth(newBitmap, SubStr(PixelFormatReadable, 1, 1), 1)
SelectObject(hdc, obm)
DeleteObject(hbm)
DeleteDC(hdc)
Gdip_DeleteGraphics(G)
} Else
{
newBitmap := Gdip_CreateBitmap(ResizedW, ResizedH, PixelFormat)
G := Gdip_GraphicsFromImage(newBitmap, InterpolationMode)
Gdip_DrawImageRect(G, pBitmap, 0, 0, ResizedW, ResizedH)
Gdip_DeleteGraphics(G)
}
Return newBitmap
}
Gdip_CreatePen(ARGB, w, Unit:=2) {
pPen := 0
E := DllCall("gdiplus\GdipCreatePen1", "UInt", ARGB, "float", w, "int", Unit, "UPtr*", pPen)
return pPen
}
Gdip_CreatePenFromBrush(pBrush, w, Unit:=2) {
pPen := 0
E := DllCall("gdiplus\GdipCreatePen2", "UPtr", pBrush, "float", w, "int", 2, "UPtr*", pPen, "int", Unit)
return pPen
}
Gdip_SetPenWidth(pPen, width) {
return DllCall("gdiplus\GdipSetPenWidth", "UPtr", pPen, "float", width)
}
Gdip_GetPenWidth(pPen) {
width := 0
E := DllCall("gdiplus\GdipGetPenWidth", "UPtr", pPen, "float*", width)
If E
return -1
return width
}
Gdip_GetPenDashStyle(pPen) {
DashStyle := 0
E := DllCall("gdiplus\GdipGetPenDashStyle", "UPtr", pPen, "float*", DashStyle)
If E
return -1
return DashStyle
}
Gdip_SetPenColor(pPen, ARGB) {
return DllCall("gdiplus\GdipSetPenColor", "UPtr", pPen, "UInt", ARGB)
}
Gdip_GetPenColor(pPen) {
ARGB := 0
E := DllCall("gdiplus\GdipGetPenColor", "UPtr", pPen, "UInt*", ARGB)
If E
return -1
return Format("{1:#x}", ARGB)
}
Gdip_SetPenBrushFill(pPen, pBrush) {
return DllCall("gdiplus\GdipSetPenBrushFill", "UPtr", pPen, "UPtr", pBrush)
}
Gdip_ResetPenTransform(pPen) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipResetPenTransform", Ptr, pPen)
}
Gdip_MultiplyPenTransform(pPen, hMatrix, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipMultiplyPenTransform", Ptr, pPen, Ptr, hMatrix, "int", matrixOrder)
}
Gdip_RotatePenTransform(pPen, Angle, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipRotatePenTransform", Ptr, pPen, "float", Angle, "int", matrixOrder)
}
Gdip_ScalePenTransform(pPen, ScaleX, ScaleY, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipScalePenTransform", Ptr, pPen, "float", ScaleX, "float", ScaleY, "int", matrixOrder)
}
Gdip_TranslatePenTransform(pPen, X, Y, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipTranslatePenTransform", Ptr, pPen, "float", X, "float", Y, "int", matrixOrder)
}
Gdip_SetPenTransform(pPen, pMatrix) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetPenTransform", Ptr, pPen, Ptr, pMatrix)
}
Gdip_GetPenTransform(pPen) {
Static Ptr := "UPtr"
pMatrix := 0
DllCall("gdiplus\GdipGetPenTransform", Ptr, pPen, "UPtr*", pMatrix)
Return pMatrix
}
Gdip_GetPenBrushFill(pPen) {
Static Ptr := "UPtr"
pBrush := 0
E := DllCall("gdiplus\GdipGetPenBrushFill", Ptr, pPen, "int*", pBrush)
Return pBrush
}
Gdip_GetPenFillType(pPen) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPenFillType", Ptr, pPen, "int*", result)
If E
return -2
Return result
}
Gdip_GetPenStartCap(pPen) {
result := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetPenStartCap", Ptr, pPen, "int*", result)
If E
return -1
Return result
}
Gdip_GetPenEndCap(pPen) {
result := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetPenEndCap", Ptr, pPen, "int*", result)
If E
return -1
Return result
}
Gdip_GetPenDashCaps(pPen) {
result := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetPenDashCap197819", Ptr, pPen, "int*", result)
If E
return -1
Return result
}
Gdip_GetPenAlignment(pPen) {
result := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetPenMode", Ptr, pPen, "int*", result)
If E
return -1
Return result
}
Gdip_SetPenLineCaps(pPen, StartCap, EndCap, DashCap) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenLineCap197819", Ptr, pPen, "int", StartCap, "int", EndCap, "int", DashCap)
}
Gdip_SetPenStartCap(pPen, LineCap) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenStartCap", Ptr, pPen, "int", LineCap)
}
Gdip_SetPenEndCap(pPen, LineCap) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenEndCap", Ptr, pPen, "int", LineCap)
}
Gdip_SetPenDashCaps(pPen, LineCap) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenDashCap197819", Ptr, pPen, "int", LineCap)
}
Gdip_SetPenAlignment(pPen, Alignment) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenMode", Ptr, pPen, "int", Alignment)
}
Gdip_GetPenCompoundCount(pPen) {
result := 0
E := DllCall("gdiplus\GdipGetPenCompoundCount", Ptr, pPen, "int*", result)
If E
Return -1
Return result
}
Gdip_SetPenCompoundArray(pPen, inCompounds) {
arrCompounds := StrSplit(inCompounds, "|")
totalCompounds := arrCompounds.Length()
VarSetCapacity(pCompounds, 8 * totalCompounds, 0)
Loop %totalCompounds%
NumPut(arrCompounds[A_Index], &pCompounds, 4*(A_Index - 1), "float")
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenCompoundArray", Ptr, pPen, Ptr, &pCompounds, "int", totalCompounds)
}
Gdip_SetPenDashStyle(pPen, DashStyle) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenDashStyle", Ptr, pPen, "Int", DashStyle)
}
Gdip_SetPenDashArray(pPen, Dashes) {
Static Ptr := "UPtr"
Points := StrSplit(Dashes, ",")
PointsCount := Points.Length()
VarSetCapacity(PointsF, 8 * PointsCount, 0)
Loop %PointsCount%
NumPut(Points[A_Index], &PointsF, 4*(A_Index - 1), "float")
Return DllCall("gdiplus\GdipSetPenDashArray", Ptr, pPen, Ptr, &PointsF, "int", PointsCount)
}
Gdip_SetPenDashOffset(pPen, Offset) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenDashOffset", Ptr, pPen, "float", Offset)
}
Gdip_GetPenDashArray(pPen) {
iCount := Gdip_GetPenDashCount(pPen)
If (iCount=-1)
Return 0
VarSetCapacity(PointsF, 8 * iCount, 0)
Static Ptr := "UPtr"
DllCall("gdiplus\GdipGetPenDashArray", Ptr, pPen, "uPtr", &PointsF, "int", iCount)
Loop %iCount%
{
A := NumGet(&PointsF, 4*(A_Index-1), "float")
printList .= A ","
}
Return Trim(printList, ",")
}
Gdip_GetPenCompoundArray(pPen) {
iCount := Gdip_GetPenCompoundCount(pPen)
VarSetCapacity(PointsF, 4 * iCount, 0)
Static Ptr := "UPtr"
DllCall("gdiplus\GdipGetPenCompoundArray", Ptr, pPen, "uPtr", &PointsF, "int", iCount)
Loop %iCount%
{
A := NumGet(&PointsF, 4*(A_Index-1), "float")
printList .= A "|"
}
Return Trim(printList, "|")
}
Gdip_SetPenLineJoin(pPen, LineJoin) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenLineJoin", Ptr, pPen, "int", LineJoin)
}
Gdip_SetPenMiterLimit(pPen, MiterLimit) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenMiterLimit", Ptr, pPen, "float", MiterLimit)
}
Gdip_SetPenUnit(pPen, Unit) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetPenUnit", Ptr, pPen, "int", Unit)
}
Gdip_GetPenDashCount(pPen) {
result := 0
E := DllCall("gdiplus\GdipGetPenDashCount", Ptr, pPen, "int*", result)
If E
Return -1
Return result
}
Gdip_GetPenDashOffset(pPen) {
result := 0
E := DllCall("gdiplus\GdipGetPenDashOffset", Ptr, pPen, "float*", result)
If E
Return -1
Return result
}
Gdip_GetPenLineJoin(pPen) {
result := 0
E := DllCall("gdiplus\GdipGetPenLineJoin", Ptr, pPen, "int*", result)
If E
Return -1
Return result
}
Gdip_GetPenMiterLimit(pPen) {
result := 0
E := DllCall("gdiplus\GdipGetPenMiterLimit", Ptr, pPen, "float*", result)
If E
Return -1
Return result
}
Gdip_GetPenUnit(pPen) {
result := 0
E := DllCall("gdiplus\GdipGetPenUnit", Ptr, pPen, "int*", result)
If E
Return -1
Return result
}
Gdip_ClonePen(pPen) {
newPen := 0
E := DllCall("gdiplus\GdipClonePen", "UPtr", pPen, "UPtr*", newPen)
Return newPen
}
Gdip_BrushCreateSolid(ARGB:=0xff000000) {
pBrush := 0
E := DllCall("gdiplus\GdipCreateSolidFill", "UInt", ARGB, "UPtr*", pBrush)
return pBrush
}
Gdip_SetSolidFillColor(pBrush, ARGB) {
return DllCall("gdiplus\GdipSetSolidFillColor", "UPtr", pBrush, "UInt", ARGB)
}
Gdip_GetSolidFillColor(pBrush) {
ARGB := 0
E := DllCall("gdiplus\GdipGetSolidFillColor", "UPtr", pBrush, "UInt*", ARGB)
If E
return -1
return Format("{1:#x}", ARGB)
}
Gdip_BrushCreateHatch(ARGBfront, ARGBback, HatchStyle:=0) {
pBrush := 0
E := DllCall("gdiplus\GdipCreateHatchBrush", "int", HatchStyle, "UInt", ARGBfront, "UInt", ARGBback, "UPtr*", pBrush)
return pBrush
}
Gdip_GetHatchBackgroundColor(pHatchBrush) {
ARGB := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetHatchBackgroundColor", Ptr, pHatchBrush, "uint*", ARGB)
If E
Return -1
return Format("{1:#x}", ARGB)
}
Gdip_GetHatchForegroundColor(pHatchBrush) {
ARGB := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetHatchForegroundColor", Ptr, pHatchBrush, "uint*", ARGB)
If E
Return -1
return Format("{1:#x}", ARGB)
}
Gdip_GetHatchStyle(pHatchBrush) {
result := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetHatchStyle", Ptr, pHatchBrush, "int*", result)
If E
Return -1
Return result
}
Gdip_CreateTextureBrush(pBitmap, WrapMode:=1, x:=0, y:=0, w:="", h:="", matrix:="", ScaleX:="", ScaleY:="", Angle:=0, ImageAttr:=0) {
Static Ptr := "UPtr"
PtrA := "UPtr*"
pBrush := 0
if !(w && h)
{
DllCall("gdiplus\GdipCreateTexture", Ptr, pBitmap, "int", WrapMode, PtrA, pBrush)
} else
{
If !ImageAttr
{
if !IsNumber(Matrix)
ImageAttr := Gdip_SetImageAttributesColorMatrix(Matrix)
else if (Matrix != 1)
ImageAttr := Gdip_SetImageAttributesColorMatrix("1|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|" Matrix "|0|0|0|0|0|1")
} Else usrImageAttr := 1
If ImageAttr
{
DllCall("gdiplus\GdipCreateTextureIA", Ptr, pBitmap, Ptr, ImageAttr, "float", x, "float", y, "float", w, "float", h, PtrA, pBrush)
If pBrush
Gdip_SetTextureWrapMode(pBrush, WrapMode)
} Else
DllCall("gdiplus\GdipCreateTexture2", Ptr, pBitmap, "int", WrapMode, "float", x, "float", y, "float", w, "float", h, PtrA, pBrush)
}
if (ImageAttr && usrImageAttr!=1)
Gdip_DisposeImageAttributes(ImageAttr)
If (ScaleX && ScaleX && pBrush)
Gdip_ScaleTextureTransform(pBrush, ScaleX, ScaleY)
If (Angle && pBrush)
Gdip_RotateTextureTransform(pBrush, Angle)
return pBrush
}
Gdip_RotateTextureTransform(pTexBrush, Angle, MatrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipRotateTextureTransform", Ptr, pTexBrush, "float", Angle, "int", MatrixOrder)
}
Gdip_ScaleTextureTransform(pTexBrush, ScaleX, ScaleY, MatrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipScaleTextureTransform", Ptr, pTexBrush, "float", ScaleX, "float", ScaleY, "int", MatrixOrder)
}
Gdip_TranslateTextureTransform(pTexBrush, X, Y, MatrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipTranslateTextureTransform", Ptr, pTexBrush, "float", X, "float", Y, "int", MatrixOrder)
}
Gdip_MultiplyTextureTransform(pTexBrush, hMatrix, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipMultiplyTextureTransform", Ptr, pTexBrush, Ptr, hMatrix, "int", matrixOrder)
}
Gdip_SetTextureTransform(pTexBrush, hMatrix) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetTextureTransform", Ptr, pTexBrush, Ptr, hMatrix)
}
Gdip_GetTextureTransform(pTexBrush) {
hMatrix := 0
Static Ptr := "UPtr"
DllCall("gdiplus\GdipGetTextureTransform", Ptr, pTexBrush, "UPtr*", hMatrix)
Return hMatrix
}
Gdip_ResetTextureTransform(pTexBrush) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipResetTextureTransform", Ptr, pTexBrush)
}
Gdip_SetTextureWrapMode(pTexBrush, WrapMode) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetTextureWrapMode", Ptr, pTexBrush, "int", WrapMode)
}
Gdip_GetTextureWrapMode(pTexBrush) {
result := 0
Static Ptr := "UPtr"
E := DllCall("gdiplus\GdipGetTextureWrapMode", Ptr, pTexBrush, "int*", result)
If E
return -1
Return result
}
Gdip_GetTextureImage(pTexBrush) {
Static Ptr := "UPtr"
pBitmapDest := 0
E := DllCall("gdiplus\GdipGetTextureImage", Ptr, pTexBrush
, "UPtr*", pBitmapDest)
Return pBitmapDest
}
Gdip_CreateLineBrush(x1, y1, x2, y2, ARGB1, ARGB2, WrapMode:=1) {
return Gdip_CreateLinearGrBrush(x1, y1, x2, y2, ARGB1, ARGB2, WrapMode)
}
Gdip_CreateLinearGrBrush(x1, y1, x2, y2, ARGB1, ARGB2, WrapMode:=1) {
Static Ptr := "UPtr"
CreatePointF(PointF1, x1, y1)
CreatePointF(PointF2, x2, y2)
pLinearGradientBrush := 0
DllCall("gdiplus\GdipCreateLineBrush", Ptr, &PointF1, Ptr, &PointF2, "Uint", ARGB1, "Uint", ARGB2, "int", WrapMode, "UPtr*", pLinearGradientBrush)
return pLinearGradientBrush
}
Gdip_SetLinearGrBrushColors(pLinearGradientBrush, ARGB1, ARGB2) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetLineColors", Ptr, pLinearGradientBrush, "UInt", ARGB1, "UInt", ARGB2)
}
Gdip_GetLinearGrBrushColors(pLinearGradientBrush, ByRef ARGB1, ByRef ARGB2) {
Static Ptr := "UPtr"
VarSetCapacity(colors, 8, 0)
E := DllCall("gdiplus\GdipGetLineColors", Ptr, pLinearGradientBrush, "Ptr", &colors)
ARGB1 := NumGet(colors, 0, "UInt")
ARGB2 := NumGet(colors, 4, "UInt")
ARGB1 := Format("{1:#x}", ARGB1)
ARGB2 := Format("{1:#x}", ARGB2)
return E
}
Gdip_CreateLineBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode:=1, WrapMode:=1) {
return Gdip_CreateLinearGrBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode, WrapMode)
}
Gdip_CreateLinearGrBrushFromRect(x, y, w, h, ARGB1, ARGB2, LinearGradientMode:=1, WrapMode:=1) {
CreateRectF(RectF, x, y, w, h)
pLinearGradientBrush := 0
E := DllCall("gdiplus\GdipCreateLineBrushFromRect", "UPtr", &RectF, "int", ARGB1, "int", ARGB2, "int", LinearGradientMode, "int", WrapMode, "UPtr*", pLinearGradientBrush)
return pLinearGradientBrush
}
Gdip_GetLinearGrBrushGammaCorrection(pLinearGradientBrush) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetLineGammaCorrection", Ptr, pLinearGradientBrush, "int*", result)
If E
Return -1
Return result
}
Gdip_SetLinearGrBrushGammaCorrection(pLinearGradientBrush, UseGammaCorrection) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetLineGammaCorrection", Ptr, pLinearGradientBrush, "int", UseGammaCorrection)
}
Gdip_GetLinearGrBrushRect(pLinearGradientBrush) {
rData := {}
VarSetCapacity(RectF, 16, 0)
status := DllCall("gdiplus\GdipGetLineRect", "UPtr", pLinearGradientBrush, "UPtr", &RectF)
If (!status) {
rData.x := NumGet(&RectF, 0, "float")
, rData.y := NumGet(&RectF, 4, "float")
, rData.w := NumGet(&RectF, 8, "float")
, rData.h := NumGet(&RectF, 12, "float")
} Else {
Return status
}
return rData
}
Gdip_ResetLinearGrBrushTransform(pLinearGradientBrush) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipResetLineTransform", Ptr, pLinearGradientBrush)
}
Gdip_ScaleLinearGrBrushTransform(pLinearGradientBrush, ScaleX, ScaleY, matrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipScaleLineTransform", Ptr, pLinearGradientBrush, "float", ScaleX, "float", ScaleY, "int", matrixOrder)
}
Gdip_MultiplyLinearGrBrushTransform(pLinearGradientBrush, hMatrix, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipMultiplyLineTransform", Ptr, pLinearGradientBrush, Ptr, hMatrix, "int", matrixOrder)
}
Gdip_TranslateLinearGrBrushTransform(pLinearGradientBrush, X, Y, matrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipTranslateLineTransform", Ptr, pLinearGradientBrush, "float", X, "float", Y, "int", matrixOrder)
}
Gdip_RotateLinearGrBrushTransform(pLinearGradientBrush, Angle, matrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipRotateLineTransform", Ptr, pLinearGradientBrush, "float", Angle, "int", matrixOrder)
}
Gdip_SetLinearGrBrushTransform(pLinearGradientBrush, pMatrix) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetLineTransform", Ptr, pLinearGradientBrush, Ptr, pMatrix)
}
Gdip_GetLinearGrBrushTransform(pLineGradientBrush) {
Static Ptr := "UPtr"
pMatrix := 0
DllCall("gdiplus\GdipGetLineTransform", Ptr, pLineGradientBrush, "UPtr*", pMatrix)
Return pMatrix
}
Gdip_RotateLinearGrBrushAtCenter(pLinearGradientBrush, Angle, MatrixOrder:=1) {
Rect := Gdip_GetLinearGrBrushRect(pLinearGradientBrush)
cX := Rect.x + (Rect.w / 2)
cY := Rect.y + (Rect.h / 2)
pMatrix := Gdip_CreateMatrix()
Gdip_TranslateMatrix(pMatrix, -cX , -cY)
Gdip_RotateMatrix(pMatrix, Angle, MatrixOrder)
Gdip_TranslateMatrix(pMatrix, cX, cY, MatrixOrder)
E := Gdip_SetLinearGrBrushTransform(pLinearGradientBrush, pMatrix)
Gdip_DeleteMatrix(pMatrix)
Return E
}
Gdip_GetLinearGrBrushWrapMode(pLinearGradientBrush) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetLineWrapMode", Ptr, pLinearGradientBrush, "int*", result)
If E
return -1
Return result
}
Gdip_SetLinearGrBrushLinearBlend(pLinearGradientBrush, nFocus, nScale) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetLineLinearBlend", Ptr, pLinearGradientBrush, "float", nFocus, "float", nScale)
}
Gdip_SetLinearGrBrushSigmaBlend(pLinearGradientBrush, nFocus, nScale) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetLineSigmaBlend", Ptr, pLinearGradientBrush, "float", nFocus, "float", nScale)
}
Gdip_SetLinearGrBrushWrapMode(pLinearGradientBrush, WrapMode) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetLineWrapMode", Ptr, pLinearGradientBrush, "int", WrapMode)
}
Gdip_GetLinearGrBrushBlendCount(pLinearGradientBrush) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetLineBlendCount", Ptr, pLinearGradientBrush, "int*", result)
If E
return -1
Return result
}
Gdip_SetLinearGrBrushPresetBlend(pBrush, pA, pB, pC, pD, clr1, clr2, clr3, clr4) {
Static Ptr := "UPtr"
CreateRectF(POSITIONS, pA, pB, pC, pD)
CreateRect(COLORS, clr1, clr2, clr3, clr4)
E:= DllCall("gdiplus\GdipSetLinePresetBlend", Ptr, pBrush, "Ptr", &COLORS, "Ptr", &POSITIONS, "Int", 4)
Return E
}
Gdip_CloneBrush(pBrush) {
pBrushClone := 0
E := DllCall("gdiplus\GdipCloneBrush", "UPtr", pBrush, "UPtr*", pBrushClone)
return pBrushClone
}
Gdip_GetBrushType(pBrush) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetBrushType", Ptr, pBrush, "int*", result)
If E
return -1
Return result
}
Gdip_DeleteRegion(Region) {
return DllCall("gdiplus\GdipDeleteRegion", "UPtr", Region)
}
Gdip_DeletePen(pPen) {
return DllCall("gdiplus\GdipDeletePen", "UPtr", pPen)
}
Gdip_DeleteBrush(pBrush) {
return DllCall("gdiplus\GdipDeleteBrush", "UPtr", pBrush)
}
Gdip_DisposeImage(pBitmap, noErr:=0) {
If (StrLen(pBitmap)<=2 && noErr=1)
Return 0
r := DllCall("gdiplus\GdipDisposeImage", "UPtr", pBitmap)
If (r=2 || r=1) && (noErr=1)
r := 0
Return r
}
Gdip_DeleteGraphics(pGraphics) {
return DllCall("gdiplus\GdipDeleteGraphics", "UPtr", pGraphics)
}
Gdip_DisposeImageAttributes(ImageAttr) {
return DllCall("gdiplus\GdipDisposeImageAttributes", "UPtr", ImageAttr)
}
Gdip_DeleteFont(hFont) {
return DllCall("gdiplus\GdipDeleteFont", "UPtr", hFont)
}
Gdip_DeleteStringFormat(hStringFormat) {
return DllCall("gdiplus\GdipDeleteStringFormat", "UPtr", hStringFormat)
}
Gdip_DeleteFontFamily(hFontFamily) {
return DllCall("gdiplus\GdipDeleteFontFamily", "UPtr", hFontFamily)
}
Gdip_DeletePrivateFontCollection(hFontCollection) {
Return DllCall("gdiplus\GdipDeletePrivateFontCollection", "ptr*", hFontCollection)
}
Gdip_DeleteMatrix(hMatrix) {
return DllCall("gdiplus\GdipDeleteMatrix", "UPtr", hMatrix)
}
Gdip_DrawOrientedString(pGraphics, String, FontName, Size, Style, X, Y, Width, Height, Angle:=0, pBrush:=0, pPen:=0, Align:=0, ScaleX:=1) {
If (!pBrush && !pPen)
Return -3
If RegExMatch(FontName, "^(.\:\\.)")
{
hFontCollection := Gdip_NewPrivateFontCollection()
hFontFamily := Gdip_CreateFontFamilyFromFile(FontName, hFontCollection)
} Else hFontFamily := Gdip_FontFamilyCreate(FontName)
If !hFontFamily
hFontFamily := Gdip_FontFamilyCreateGeneric(1)
If !hFontFamily
{
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Return -1
}
FormatStyle := 0x4000
hStringFormat := Gdip_StringFormatCreate(FormatStyle)
If !hStringFormat
hStringFormat := Gdip_StringFormatGetGeneric(1)
If !hStringFormat
{
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Return -2
}
Gdip_SetStringFormatTrimming(hStringFormat, 3)
Gdip_SetStringFormatAlign(hStringFormat, Align)
pPath := Gdip_CreatePath()
E := Gdip_AddPathString(pPath, String, hFontFamily, Style, Size, hStringFormat, X, Y, Width, Height)
If (ScaleX>0 && ScaleX!=1)
{
hMatrix := Gdip_CreateMatrix()
Gdip_ScaleMatrix(hMatrix, ScaleX, 1)
Gdip_TransformPath(pPath, hMatrix)
Gdip_DeleteMatrix(hMatrix)
}
Gdip_RotatePathAtCenter(pPath, Angle)
If (!E && pBrush)
E := Gdip_FillPath(pGraphics, pBrush, pPath)
If (!E && pPen)
E := Gdip_DrawPath(pGraphics, pPen, pPath)
PathBounds := Gdip_GetPathWorldBounds(pPath)
Gdip_DeleteStringFormat(hStringFormat)
Gdip_DeleteFontFamily(hFontFamily)
Gdip_DeletePath(pPath)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Return E ? E : PathBounds
}
Gdip_TextToGraphics(pGraphics, Text, Options, Font:="Arial", Width:="", Height:="", Measure:=0, userBrush:=0, Unit:=0) {
Static Styles := "Regular|Bold|Italic|BoldItalic|Underline|Strikeout"
, Alignments := "Near|Left|Centre|Center|Far|Right"
IWidth := Width, IHeight:= Height
pattern_opts := (A_AhkVersion < "2") ? "iO)" : "i)"
RegExMatch(Options, pattern_opts "X([\-\d\.]+)(p*)", xpos)
RegExMatch(Options, pattern_opts "Y([\-\d\.]+)(p*)", ypos)
RegExMatch(Options, pattern_opts "W([\-\d\.]+)(p*)", Width)
RegExMatch(Options, pattern_opts "H([\-\d\.]+)(p*)", Height)
RegExMatch(Options, pattern_opts "C(?!(entre|enter))([a-f\d]+)", Colour)
RegExMatch(Options, pattern_opts "Top|Up|Bottom|Down|vCentre|vCenter", vPos)
RegExMatch(Options, pattern_opts "NoWrap", NoWrap)
RegExMatch(Options, pattern_opts "R(\d)", Rendering)
RegExMatch(Options, pattern_opts "S(\d+)(p*)", Size)
if Colour && IsInteger(Colour[2]) && !Gdip_DeleteBrush(Gdip_CloneBrush(Colour[2]))
{
PassBrush := 1
pBrush := Colour[2]
}
if !(IWidth && IHeight) && ((xpos && xpos[2]) || (ypos && ypos[2]) || (Width && Width[2]) || (Height && Height[2]) || (Size && Size[2]))
return -1
Style := 0
For eachStyle, valStyle in StrSplit(Styles, "|")
{
if RegExMatch(Options, "\b" valStyle)
Style |= (valStyle != "StrikeOut") ? (A_Index-1) : 8
}
Align := 0
For eachAlignment, valAlignment in StrSplit(Alignments, "|")
{
if RegExMatch(Options, "\b" valAlignment)
Align |= A_Index//2.1
}
xpos := (xpos && (xpos[1] != "")) ? xpos[2] ? IWidth*(xpos[1]/100) : xpos[1] : 0
ypos := (ypos && (ypos[1] != "")) ? ypos[2] ? IHeight*(ypos[1]/100) : ypos[1] : 0
Width := (Width && Width[1]) ? Width[2] ? IWidth*(Width[1]/100) : Width[1] : IWidth
Height := (Height && Height[1]) ? Height[2] ? IHeight*(Height[1]/100) : Height[1] : IHeight
If !PassBrush
Colour := "0x" (Colour && Colour[2] ? Colour[2] : "ff000000")
Rendering := (Rendering && (Rendering[1] >= 0) && (Rendering[1] <= 5)) ? Rendering[1] : 4
Size := (Size && (Size[1] > 0)) ? Size[2] ? IHeight*(Size[1]/100) : Size[1] : 12
If RegExMatch(Font, "^(.\:\\.)")
{
hFontCollection := Gdip_NewPrivateFontCollection()
hFontFamily := Gdip_CreateFontFamilyFromFile(Font, hFontCollection)
} Else hFontFamily := Gdip_FontFamilyCreate(Font)
If !hFontFamily
hFontFamily := Gdip_FontFamilyCreateGeneric(1)
hFont := Gdip_FontCreate(hFontFamily, Size, Style, Unit)
FormatStyle := NoWrap ? 0x4000 | 0x1000 : 0x4000
hStringFormat := Gdip_StringFormatCreate(FormatStyle)
If !hStringFormat
hStringFormat := Gdip_StringFormatGetGeneric(1)
pBrush := PassBrush ? pBrush : Gdip_BrushCreateSolid(Colour)
if !(hFontFamily && hFont && hStringFormat && pBrush && pGraphics)
{
E := !pGraphics ? -2 : !hFontFamily ? -3 : !hFont ? -4 : !hStringFormat ? -5 : !pBrush ? -6 : 0
If pBrush
Gdip_DeleteBrush(pBrush)
If hStringFormat
Gdip_DeleteStringFormat(hStringFormat)
If hFont
Gdip_DeleteFont(hFont)
If hFontFamily
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
return E
}
CreateRectF(RC, xpos, ypos, Width, Height)
Gdip_SetStringFormatAlign(hStringFormat, Align)
If InStr(Options, "autotrim")
Gdip_SetStringFormatTrimming(hStringFormat, 3)
Gdip_SetTextRenderingHint(pGraphics, Rendering)
ReturnRC := Gdip_MeasureString(pGraphics, Text, hFont, hStringFormat, RC)
ReturnRCtest := StrSplit(ReturnRC, "|")
testX := Floor(ReturnRCtest[1]) - 2
If (testX>xpos)
{
nxpos := Floor(xpos - (testX - xpos))
CreateRectF(RC, nxpos, ypos, Width, Height)
ReturnRC := Gdip_MeasureString(pGraphics, Text, hFont, hStringFormat, RC)
}
If vPos
{
ReturnRC := StrSplit(ReturnRC, "|")
if (vPos[0] = "vCentre") || (vPos[0] = "vCenter")
ypos += (Height-ReturnRC[4])//2
else if (vPos[0] = "Top") || (vPos[0] = "Up")
ypos += 0
else if (vPos[0] = "Bottom") || (vPos[0] = "Down")
ypos += Height-ReturnRC[4]
CreateRectF(RC, xpos, ypos, Width, ReturnRC[4])
ReturnRC := Gdip_MeasureString(pGraphics, Text, hFont, hStringFormat, RC)
}
thisBrush := userBrush ? userBrush : pBrush
if !Measure
_E := Gdip_DrawString(pGraphics, Text, hFont, hStringFormat, thisBrush, RC)
if !PassBrush
Gdip_DeleteBrush(pBrush)
Gdip_DeleteStringFormat(hStringFormat)
Gdip_DeleteFont(hFont)
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
return _E ? _E : ReturnRC
}
Gdip_DrawString(pGraphics, sString, hFont, hStringFormat, pBrush, ByRef RectF) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipDrawString"
, Ptr, pGraphics
, "WStr", sString
, "int", -1
, Ptr, hFont
, Ptr, &RectF
, Ptr, hStringFormat
, Ptr, pBrush)
}
Gdip_MeasureString(pGraphics, sString, hFont, hStringFormat, ByRef RectF) {
Static Ptr := "UPtr"
VarSetCapacity(RC, 16)
Chars := 0
Lines := 0
DllCall("gdiplus\GdipMeasureString"
, Ptr, pGraphics
, "WStr", sString
, "int", -1
, Ptr, hFont
, Ptr, &RectF
, Ptr, hStringFormat
, Ptr, &RC
, "uint*", Chars
, "uint*", Lines)
return &RC ? NumGet(RC, 0, "float") "|" NumGet(RC, 4, "float") "|" NumGet(RC, 8, "float") "|" NumGet(RC, 12, "float") "|" Chars "|" Lines : 0
}
Gdip_DrawStringAlongPolygon(pGraphics, String, FontName, FontSize, Style, pBrush, DriverPoints:=0, pPath:=0, minDist:=0, flatness:=4, hMatrix:=0, Unit:=0) {
If (!minDist || minDist<1)
minDist := FontSize//4 + 1
If (pPath && !DriverPoints)
{
newPath := Gdip_ClonePath(pPath)
Gdip_PathOutline(newPath, flatness)
DriverPoints := Gdip_GetPathPoints(newPath)
Gdip_DeletePath(newPath)
If !DriverPoints
Return -5
}
If (!pPath && !DriverPoints)
Return -4
If RegExMatch(FontName, "^(.\:\\.)")
{
hFontCollection := Gdip_NewPrivateFontCollection()
hFontFamily := Gdip_CreateFontFamilyFromFile(FontName, hFontCollection)
} Else hFontFamily := Gdip_FontFamilyCreate(FontName)
If !hFontFamily
hFontFamily := Gdip_FontFamilyCreateGeneric(1)
If !hFontFamily
{
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Return -1
}
hFont := Gdip_FontCreate(hFontFamily, FontSize, Style, Unit)
If !hFont
{
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Gdip_DeleteFontFamily(hFontFamily)
Return -2
}
Points := StrSplit(DriverPoints, "|")
PointsCount := Points.Length()
If (PointsCount<2)
{
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Gdip_DeleteFont(hFont)
Gdip_DeleteFontFamily(hFontFamily)
Return -3
}
txtLen := StrLen(String)
If (PointsCount<txtLen)
{
loopsMax := txtLen * 3
newDriverPoints := DriverPoints
Loop %loopsMax%
{
newDriverPoints := GenerateIntermediatePoints(newDriverPoints, minDist, totalResult)
If (totalResult>=txtLen)
Break
}
String := SubStr(String, 1, totalResult)
} Else newDriverPoints := DriverPoints
E := Gdip_DrawDrivenString(pGraphics, String, hFont, pBrush, newDriverPoints, 1, hMatrix)
Gdip_DeleteFont(hFont)
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
return E
}
GenerateIntermediatePoints(PointsList, minDist, ByRef resultPointsCount) {
AllPoints := StrSplit(PointsList, "|")
PointsCount := AllPoints.Length()
thizIndex := 0.5
resultPointsCount := 0
loopsMax := PointsCount*2
Loop %loopsMax%
{
thizIndex += 0.5
thisIndex := InStr(thizIndex, ".5") ? thizIndex : Trim(Round(thizIndex))
thisPoint := AllPoints[thisIndex]
theseCoords := StrSplit(thisPoint, ",")
If (theseCoords[1]!="" && theseCoords[2]!="")
{
resultPointsCount++
newPointsList .= theseCoords[1] "," theseCoords[2] "|"
} Else
{
aIndex := Trim(Round(thizIndex - 0.5))
bIndex := Trim(Round(thizIndex + 0.5))
theseAcoords := StrSplit(AllPoints[aIndex], ",")
theseBcoords := StrSplit(AllPoints[bIndex], ",")
If (theseAcoords[1]!="" && theseAcoords[2]!="")
&& (theseBcoords[1]!="" && theseBcoords[2]!="")
{
newPosX := (theseAcoords[1] + theseBcoords[1])//2
newPosY := (theseAcoords[2] + theseBcoords[2])//2
distPosX := newPosX - theseAcoords[1]
distPosY := newPosY - theseAcoords[2]
If (distPosX>minDist || distPosY>minDist)
{
newPointsList .= newPosX "," newPosY "|"
resultPointsCount++
}
}
}
}
If !newPointsList
Return PointsList
Return Trim(newPointsList, "|")
}
Gdip_DrawDrivenString(pGraphics, String, hFont, pBrush, DriverPoints, Flags:=1, hMatrix:=0) {
txtLen := -1
Static Ptr := "UPtr"
iCount := CreatePointsF(PointsF, DriverPoints)
return DllCall("gdiplus\GdipDrawDriverString", Ptr, pGraphics, "UPtr", &String, "int", txtLen, Ptr, hFont, Ptr, pBrush, Ptr, &PointsF, "int", Flags, Ptr, hMatrix)
}
Gdip_StringFormatCreate(FormatFlags:=0, LangID:=0) {
hStringFormat := 0
E := DllCall("gdiplus\GdipCreateStringFormat", "int", FormatFlags, "int", LangID, "UPtr*", hStringFormat)
return hStringFormat
}
Gdip_CloneStringFormat(hStringFormat) {
Static Ptr := "UPtr"
newHStringFormat := 0
DllCall("gdiplus\GdipCloneStringFormat", Ptr, hStringFormat, "uint*", newHStringFormat)
Return newHStringFormat
}
Gdip_StringFormatGetGeneric(whichFormat:=0) {
hStringFormat := 0
If (whichFormat=1)
DllCall("gdiplus\GdipStringFormatGetGenericTypographic", "UPtr*", hStringFormat)
Else
DllCall("gdiplus\GdipStringFormatGetGenericDefault", "UPtr*", hStringFormat)
Return hStringFormat
}
Gdip_SetStringFormatAlign(hStringFormat, Align) {
return DllCall("gdiplus\GdipSetStringFormatAlign", "UPtr", hStringFormat, "int", Align)
}
Gdip_GetStringFormatAlign(hStringFormat) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetStringFormatAlign", Ptr, hStringFormat, "int*", result)
If E
Return -1
Return result
}
Gdip_GetStringFormatLineAlign(hStringFormat) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetStringFormatLineAlign", Ptr, hStringFormat, "int*", result)
If E
Return -1
Return result
}
Gdip_GetStringFormatDigitSubstitution(hStringFormat) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetStringFormatDigitSubstitution", Ptr, hStringFormat, "ushort*", 0, "int*", result)
If E
Return -1
Return result
}
Gdip_GetStringFormatHotkeyPrefix(hStringFormat) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetStringFormatHotkeyPrefix", Ptr, hStringFormat, "int*", result)
If E
Return -1
Return result
}
Gdip_GetStringFormatTrimming(hStringFormat) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetStringFormatTrimming", Ptr, hStringFormat, "int*", result)
If E
Return -1
Return result
}
Gdip_SetStringFormatLineAlign(hStringFormat, StringAlign) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipSetStringFormatLineAlign", Ptr, hStringFormat, "int", StringAlign)
}
Gdip_SetStringFormatDigitSubstitution(hStringFormat, DigitSubstitute, LangID:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetStringFormatDigitSubstitution", Ptr, hStringFormat, "ushort", LangID, "int", DigitSubstitute)
}
Gdip_SetStringFormatFlags(hStringFormat, Flags) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetStringFormatFlags", Ptr, hStringFormat, "int", Flags)
}
Gdip_SetStringFormatHotkeyPrefix(hStringFormat, PrefixProcessMode) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetStringFormatHotkeyPrefix", Ptr, hStringFormat, "int", PrefixProcessMode)
}
Gdip_SetStringFormatTrimming(hStringFormat, TrimMode) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetStringFormatTrimming", Ptr, hStringFormat, "int", TrimMode)
}
Gdip_FontCreate(hFontFamily, Size, Style:=0, Unit:=0) {
hFont := 0
DllCall("gdiplus\GdipCreateFont", "UPtr", hFontFamily, "float", Size, "int", Style, "int", Unit, "UPtr*", hFont)
return hFont
}
Gdip_FontFamilyCreate(FontName) {
hFontFamily := 0
_E := DllCall("gdiplus\GdipCreateFontFamilyFromName"
, "WStr", FontName, "uint", 0
, "UPtr*", hFontFamily)
return hFontFamily
}
Gdip_NewPrivateFontCollection() {
hFontCollection := 0
DllCall("gdiplus\GdipNewPrivateFontCollection", "ptr*", hFontCollection)
Return hFontCollection
}
Gdip_CreateFontFamilyFromFile(FontFile, hFontCollection, FontName:="") {
If !hFontCollection
Return
hFontFamily := 0
E := DllCall("gdiplus\GdipPrivateAddFontFile", "ptr", hFontCollection, "str", FontFile)
if (FontName="" && !E)
{
VarSetCapacity(pFontFamily, 10, 0)
DllCall("gdiplus\GdipGetFontCollectionFamilyList", "ptr", hFontCollection, "int", 1, "ptr", &pFontFamily, "int*", found)
VarSetCapacity(FontName, 100)
DllCall("gdiplus\GdipGetFamilyName", "ptr", NumGet(pFontFamily, 0, "ptr"), "str", FontName, "ushort", 1033)
}
If !E
DllCall("gdiplus\GdipCreateFontFamilyFromName", "str", FontName, "ptr", hFontCollection, "uint*", hFontFamily)
Return hFontFamily
}
Gdip_FontFamilyCreateGeneric(whichStyle) {
hFontFamily := 0
If (whichStyle=0)
DllCall("gdiplus\GdipGetGenericFontFamilyMonospace", "UPtr*", hFontFamily)
Else If (whichStyle=1)
DllCall("gdiplus\GdipGetGenericFontFamilySansSerif", "UPtr*", hFontFamily)
Else If (whichStyle=2)
DllCall("gdiplus\GdipGetGenericFontFamilySerif", "UPtr*", hFontFamily)
Return hFontFamily
}
Gdip_CreateFontFromDC(hDC) {
pFont := 0
r := DllCall("gdiplus\GdipCreateFontFromDC", "UPtr", hDC, "UPtr*", pFont)
Return pFont
}
Gdip_CreateFontFromLogfontW(hDC, LogFont) {
pFont := 0
DllCall("Gdiplus\GdipCreateFontFromLogfontW", "Ptr", hDC, "Ptr", LogFont, "UPtrP", pFont)
return pFont
}
Gdip_GetFontHeight(hFont, pGraphics:=0) {
Static Ptr := "UPtr"
result := 0
DllCall("gdiplus\GdipGetFontHeight", Ptr, hFont, Ptr, pGraphics, "float*", result)
Return result
}
Gdip_GetFontHeightGivenDPI(hFont, DPI:=72) {
Static Ptr := "UPtr"
result := 0
DllCall("gdiplus\GdipGetFontHeightGivenDPI", Ptr, hFont, "float", DPI, "float*", result)
Return result
}
Gdip_GetFontSize(hFont) {
Static Ptr := "UPtr"
result := 0
DllCall("gdiplus\GdipGetFontSize", Ptr, hFont, "float*", result)
Return result
}
Gdip_GetFontStyle(hFont) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetFontStyle", Ptr, hFont, "int*", result)
If E
Return -1
Return result
}
Gdip_GetFontUnit(hFont) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetFontUnit", Ptr, hFont, "int*", result)
If E
Return -1
Return result
}
Gdip_CloneFont(hfont) {
Static Ptr := "UPtr"
newHFont := 0
DllCall("gdiplus\GdipCloneFont", Ptr, hFont, "UPtr*", newHFont)
Return newHFont
}
Gdip_GetFontFamily(hFont) {
Static Ptr := "UPtr"
hFontFamily := 0
DllCall("gdiplus\GdipGetFamily", Ptr, hFont, "UPtr*", hFontFamily)
Return hFontFamily
}
Gdip_CloneFontFamily(hFontFamily) {
Static Ptr := "UPtr"
newHFontFamily := 0
DllCall("gdiplus\GdipCloneFontFamily", Ptr, hFontFamily, "UPtr*", newHFontFamily)
Return newHFontFamily
}
Gdip_IsFontStyleAvailable(hFontFamily, Style) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsStyleAvailable", Ptr, hFontFamily, "int", Style, "Int*", result)
If E
Return -1
Return result
}
Gdip_GetFontFamilyCellScents(hFontFamily, ByRef Ascent, ByRef Descent, Style:=0) {
Static Ptr := "UPtr"
Ascent := 0
Descent := 0
E := DllCall("gdiplus\GdipGetCellAscent", Ptr, hFontFamily, "int", Style, "ushort*", Ascent)
E := DllCall("gdiplus\GdipGetCellDescent", Ptr, hFontFamily, "int", Style, "ushort*", Descent)
Return E
}
Gdip_GetFontFamilyEmHeight(hFontFamily, Style:=0) {
Static Ptr := "UPtr"
result := 0
DllCall("gdiplus\GdipGetEmHeight", Ptr, hFontFamily, "int", Style, "ushort*", result)
Return result
}
Gdip_GetFontFamilyLineSpacing(hFontFamily, Style:=0) {
Static Ptr := "UPtr"
result := 0
DllCall("gdiplus\GdipGetLineSpacing", Ptr, hFontFamily, "int", Style, "ushort*", result)
Return result
}
Gdip_GetFontFamilyName(hFontFamily) {
Static Ptr := "UPtr"
VarSetCapacity(FontName, 90)
DllCall("gdiplus\GdipGetFamilyName", Ptr, hFontFamily, "Ptr", &FontName, "ushort", 0)
Return FontName
}
Gdip_CreateAffineMatrix(m11, m12, m21, m22, x, y) {
hMatrix := 0
DllCall("gdiplus\GdipCreateMatrix2", "float", m11, "float", m12, "float", m21, "float", m22, "float", x, "float", y, "UPtr*", hMatrix)
return hMatrix
}
Gdip_CreateMatrix() {
hMatrix := 0
DllCall("gdiplus\GdipCreateMatrix", "UPtr*", hMatrix)
return hMatrix
}
Gdip_InvertMatrix(hMatrix) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipInvertMatrix", Ptr, hMatrix)
}
Gdip_IsMatrixEqual(hMatrixA, hMatrixB) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsMatrixEqual", Ptr, hMatrixA, Ptr, hMatrixB, "int*", result)
If E
Return -1
Return result
}
Gdip_IsMatrixIdentity(hMatrix) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsMatrixIdentity", Ptr, hMatrix, "int*", result)
If E
Return -1
Return result
}
Gdip_IsMatrixInvertible(hMatrix) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsMatrixInvertible", Ptr, hMatrix, "int*", result)
If E
Return -1
Return result
}
Gdip_MultiplyMatrix(hMatrixA, hMatrixB, matrixOrder) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipMultiplyMatrix", Ptr, hMatrixA, Ptr, hMatrixB, "int", matrixOrder)
}
Gdip_CloneMatrix(hMatrix) {
Static Ptr := "UPtr"
newHMatrix := 0
DllCall("gdiplus\GdipCloneMatrix", Ptr, hMatrix, "UPtr*", newHMatrix)
return newHMatrix
}
Gdip_CreatePath(BrushMode:=0) {
pPath := 0
DllCall("gdiplus\GdipCreatePath", "int", BrushMode, "UPtr*", pPath)
return pPath
}
Gdip_AddPathEllipse(pPath, x, y, w, h) {
return DllCall("gdiplus\GdipAddPathEllipse", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h)
}
Gdip_AddPathRectangle(pPath, x, y, w, h) {
return DllCall("gdiplus\GdipAddPathRectangle", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h)
}
Gdip_AddPathRoundedRectangle(pPath, x, y, w, h, r) {
E := 0
r := (w <= h) ? (r < w / 2) ? r : w / 2 : (r < h / 2) ? r : h / 2
If (E := Gdip_AddPathRectangle(pPath, x+r, y, w-(2*r), r))
Return E
If (E := Gdip_AddPathRectangle(pPath, x+r, y+h-r, w-(2*r), r))
Return E
If (E := Gdip_AddPathRectangle(pPath, x, y+r, r, h-(2*r)))
Return E
If (E := Gdip_AddPathRectangle(pPath, x+w-r, y+r, r, h-(2*r)))
Return E
If (E := Gdip_AddPathRectangle(pPath, x+r, y+r, w-(2*r), h-(2*r)))
Return E
If (E := Gdip_AddPathPie(pPath, x, y, 2*r, 2*r, 180, 90))
Return E
If (E := Gdip_AddPathPie(pPath, x+w-(2*r), y, 2*r, 2*r, 270, 90))
Return E
If (E := Gdip_AddPathPie(pPath, x, y+h-(2*r), 2*r, 2*r, 90, 90))
Return E
If (E := Gdip_AddPathPie(pPath, x+w-(2*r), y+h-(2*r), 2*r, 2*r, 0, 90))
Return E
Return E
}
Gdip_AddPathPolygon(pPath, Points) {
Static Ptr := "UPtr"
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipAddPathPolygon", Ptr, pPath, Ptr, &PointsF, "int", iCount)
}
Gdip_AddPathClosedCurve(pPath, Points, Tension:=1) {
iCount := CreatePointsF(PointsF, Points)
If Tension
return DllCall("gdiplus\GdipAddPathClosedCurve2", "UPtr", pPath, "UPtr", &PointsF, "int", iCount, "float", Tension)
Else
return DllCall("gdiplus\GdipAddPathClosedCurve", "UPtr", pPath, "UPtr", &PointsF, "int", iCount)
}
Gdip_AddPathCurve(pPath, Points, Tension:="") {
iCount := CreatePointsF(PointsF, Points)
If Tension
return DllCall("gdiplus\GdipAddPathCurve2", "UPtr", pPath, "UPtr", &PointsF, "int", iCount, "float", Tension)
Else
return DllCall("gdiplus\GdipAddPathCurve", "UPtr", pPath, "UPtr", &PointsF, "int", iCount)
}
Gdip_AddPathToPath(pPathA, pPathB, fConnect) {
return DllCall("gdiplus\GdipAddPathCurve2", "UPtr", pPathA, "UPtr", pPathB, "int", fConnect)
}
Gdip_AddPathStringSimplified(pPath, String, FontName, Size, Style, X, Y, Width, Height, Align:=0, NoWrap:=0) {
FormatStyle := NoWrap ? 0x4000 | 0x1000 : 0x4000
If RegExMatch(FontName, "^(.\:\\.)")
{
hFontCollection := Gdip_NewPrivateFontCollection()
hFontFamily := Gdip_CreateFontFamilyFromFile(FontName, hFontCollection)
} Else hFontFamily := Gdip_FontFamilyCreate(FontName)
If !hFontFamily
hFontFamily := Gdip_FontFamilyCreateGeneric(1)
If !hFontFamily
{
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Return -1
}
hStringFormat := Gdip_StringFormatCreate(FormatStyle)
If !hStringFormat
hStringFormat := Gdip_StringFormatGetGeneric(1)
If !hStringFormat
{
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Return -2
}
Gdip_SetStringFormatTrimming(hStringFormat, 3)
Gdip_SetStringFormatAlign(hStringFormat, Align)
E := Gdip_AddPathString(pPath, String, hFontFamily, Style, Size, hStringFormat, X, Y, Width, Height)
Gdip_DeleteStringFormat(hStringFormat)
Gdip_DeleteFontFamily(hFontFamily)
If hFontCollection
Gdip_DeletePrivateFontCollection(hFontCollection)
Return E
}
Gdip_AddPathString(pPath, String, hFontFamily, Style, Size, hStringFormat, X, Y, W, H) {
Static Ptr := "UPtr"
CreateRectF(RectF, X, Y, W, H)
E := DllCall("gdiplus\GdipAddPathString", Ptr, pPath, "WStr", String, "int", -1, Ptr, hFontFamily, "int", Style, "float", Size, Ptr, &RectF, Ptr, hStringFormat)
Return E
}
Gdip_SetPathFillMode(pPath, FillMode) {
return DllCall("gdiplus\GdipSetPathFillMode", "UPtr", pPath, "int", FillMode)
}
Gdip_GetPathFillMode(pPath) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPathFillMode", Ptr, pPath, "int*", result)
If E
Return -1
Return result
}
Gdip_GetPathLastPoint(pPath, ByRef X, ByRef Y) {
Static Ptr := "UPtr"
VarSetCapacity(PointF, 8, 0)
E := DllCall("gdiplus\GdipGetPathLastPoint", Ptr, pPath, "UPtr", &PointF)
If !E
{
x := NumGet(PointF, 0, "float")
y := NumGet(PointF, 4, "float")
}
Return E
}
Gdip_GetPathPointsCount(pPath) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPointCount", Ptr, pPath, "int*", result)
If E
Return -1
Return result
}
Gdip_GetPathPoints(pPath) {
PointsCount := Gdip_GetPathPointsCount(pPath)
If (PointsCount=-1)
Return 0
Static Ptr := "UPtr"
VarSetCapacity(PointsF, 8 * PointsCount, 0)
DllCall("gdiplus\GdipGetPathPoints", Ptr, pPath, Ptr, &PointsF, "intP", PointsCount)
Loop %PointsCount%
{
A := NumGet(&PointsF, 8*(A_Index-1), "float")
B := NumGet(&PointsF, (8*(A_Index-1))+4, "float")
printList .= A "," B "|"
}
Return Trim(printList, "|")
}
Gdip_FlattenPath(pPath, flatness, hMatrix:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipFlattenPath", Ptr, pPath, Ptr, hMatrix, "float", flatness)
}
Gdip_WidenPath(pPath, pPen, hMatrix:=0, Flatness:=1) {
return DllCall("gdiplus\GdipWidenPath", "UPtr", pPath, "uint", pPen, "UPtr", hMatrix, "float", Flatness)
}
Gdip_PathOutline(pPath, flatness:=1, hMatrix:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipWindingModeOutline", Ptr, pPath, Ptr, hMatrix, "float", flatness)
}
Gdip_ResetPath(pPath) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipResetPath", Ptr, pPath)
}
Gdip_ReversePath(pPath) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipReversePath", Ptr, pPath)
}
Gdip_IsOutlineVisiblePathPoint(pGraphics, pPath, pPen, X, Y) {
result := 0
E := DllCall("gdiplus\GdipIsOutlineVisiblePathPoint", Ptr, pPath, "float", X, "float", Y, Ptr, pPen, Ptr, pGraphics, "int*", result)
If E
Return -1
Return result
}
Gdip_IsVisiblePathPoint(pPath, x, y, pGraphics) {
result := 0
E := DllCall("gdiplus\GdipIsVisiblePathPoint", "UPtr", pPath, "float", x, "float", y, "UPtr", pGraphics, "UPtr*", result)
If E
return -1
return result
}
Gdip_DeletePath(pPath) {
return DllCall("gdiplus\GdipDeletePath", "UPtr", pPath)
}
Gdip_SetTextRenderingHint(pGraphics, RenderingHint) {
return DllCall("gdiplus\GdipSetTextRenderingHint", "UPtr", pGraphics, "int", RenderingHint)
}
Gdip_SetInterpolationMode(pGraphics, InterpolationMode) {
return DllCall("gdiplus\GdipSetInterpolationMode", "UPtr", pGraphics, "int", InterpolationMode)
}
Gdip_SetSmoothingMode(pGraphics, SmoothingMode) {
return DllCall("gdiplus\GdipSetSmoothingMode", "UPtr", pGraphics, "int", SmoothingMode)
}
Gdip_SetCompositingMode(pGraphics, CompositingMode) {
return DllCall("gdiplus\GdipSetCompositingMode", "UPtr", pGraphics, "int", CompositingMode)
}
Gdip_SetCompositingQuality(pGraphics, CompositionQuality) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetCompositingQuality", Ptr, pGraphics, "int", CompositionQuality)
}
Gdip_SetPageScale(pGraphics, Scale) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetPageScale", Ptr, pGraphics, "float", Scale)
}
Gdip_SetPageUnit(pGraphics, Unit) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetPageUnit", Ptr, pGraphics, "int", Unit)
}
Gdip_SetPixelOffsetMode(pGraphics, PixelOffsetMode) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetPixelOffsetMode", Ptr, pGraphics, "int", PixelOffsetMode)
}
Gdip_SetRenderingOrigin(pGraphics, X, Y) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetRenderingOrigin", Ptr, pGraphics, "int", X, "int", Y)
}
Gdip_SetTextContrast(pGraphics, Contrast) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetTextContrast", Ptr, pGraphics, "uint", Contrast)
}
Gdip_RestoreGraphics(pGraphics, State) {
return DllCall("Gdiplus\GdipRestoreGraphics", "UPtr", pGraphics, "UInt", State)
}
Gdip_SaveGraphics(pGraphics) {
State := 0
DllCall("Gdiplus\GdipSaveGraphics", "Ptr", pGraphics, "UIntP", State)
return State
}
Gdip_GetTextContrast(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetTextContrast", Ptr, pGraphics, "uint*", result)
If E
return -1
Return result
}
Gdip_GetCompositingMode(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetCompositingMode", Ptr, pGraphics, "int*", result)
If E
return -1
Return result
}
Gdip_GetCompositingQuality(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetCompositingQuality", Ptr, pGraphics, "int*", result)
If E
return -1
Return result
}
Gdip_GetInterpolationMode(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetInterpolationMode", Ptr, pGraphics, "int*", result)
If E
return -1
Return result
}
Gdip_GetSmoothingMode(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetSmoothingMode", Ptr, pGraphics, "int*", result)
If E
return -1
Return result
}
Gdip_GetPageScale(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPageScale", Ptr, pGraphics, "float*", result)
If E
return -1
Return result
}
Gdip_GetPageUnit(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPageUnit", Ptr, pGraphics, "int*", result)
If E
return -1
Return result
}
Gdip_GetPixelOffsetMode(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPixelOffsetMode", Ptr, pGraphics, "int*", result)
If E
return -1
Return result
}
Gdip_GetRenderingOrigin(pGraphics, ByRef X, ByRef Y) {
Static Ptr := "UPtr"
x := 0
y := 0
return DllCall("gdiplus\GdipGetRenderingOrigin", Ptr, pGraphics, "uint*", X, "uint*", Y)
}
Gdip_GetTextRenderingHint(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetTextRenderingHint", Ptr, pGraphics, "int*", result)
If E
return -1
Return result
}
Gdip_RotateWorldTransform(pGraphics, Angle, MatrixOrder:=0) {
return DllCall("gdiplus\GdipRotateWorldTransform", "UPtr", pGraphics, "float", Angle, "int", MatrixOrder)
}
Gdip_ScaleWorldTransform(pGraphics, ScaleX, ScaleY, MatrixOrder:=0) {
return DllCall("gdiplus\GdipScaleWorldTransform", "UPtr", pGraphics, "float", ScaleX, "float", ScaleY, "int", MatrixOrder)
}
Gdip_TranslateWorldTransform(pGraphics, x, y, MatrixOrder:=0) {
return DllCall("gdiplus\GdipTranslateWorldTransform", "UPtr", pGraphics, "float", x, "float", y, "int", MatrixOrder)
}
Gdip_MultiplyWorldTransform(pGraphics, hMatrix, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipMultiplyWorldTransform", Ptr, pGraphics, Ptr, hMatrix, "int", matrixOrder)
}
Gdip_ResetWorldTransform(pGraphics) {
return DllCall("gdiplus\GdipResetWorldTransform", "UPtr", pGraphics)
}
Gdip_ResetPageTransform(pGraphics) {
return DllCall("gdiplus\GdipResetPageTransform", "UPtr", pGraphics)
}
Gdip_SetWorldTransform(pGraphics, hMatrix) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetWorldTransform", Ptr, pGraphics, Ptr, hMatrix)
}
Gdip_GetRotatedTranslation(Width, Height, Angle, ByRef xTranslation, ByRef yTranslation) {
pi := 3.14159, TAngle := Angle*(pi/180)
Bound := (Angle >= 0) ? Mod(Angle, 360) : 360-Mod(-Angle, -360)
if ((Bound >= 0) && (Bound <= 90))
xTranslation := Height*Sin(TAngle), yTranslation := 0
else if ((Bound > 90) && (Bound <= 180))
xTranslation := (Height*Sin(TAngle))-(Width*Cos(TAngle)), yTranslation := -Height*Cos(TAngle)
else if ((Bound > 180) && (Bound <= 270))
xTranslation := -(Width*Cos(TAngle)), yTranslation := -(Height*Cos(TAngle))-(Width*Sin(TAngle))
else if ((Bound > 270) && (Bound <= 360))
xTranslation := 0, yTranslation := -Width*Sin(TAngle)
}
Gdip_GetRotatedDimensions(Width, Height, Angle, ByRef RWidth, ByRef RHeight) {
Static pi := 3.14159
if !(Width && Height)
return -1
TAngle := Angle*(pi/180)
RWidth := Abs(Width*Cos(TAngle))+Abs(Height*Sin(TAngle))
RHeight := Abs(Width*Sin(TAngle))+Abs(Height*Cos(Tangle))
}
Gdip_GetRotatedEllipseDimensions(Width, Height, Angle, ByRef RWidth, ByRef RHeight) {
if !(Width && Height)
return -1
pPath := Gdip_CreatePath()
Gdip_AddPathEllipse(pPath, 0, 0, Width, Height)
pMatrix := Gdip_CreateMatrix()
Gdip_RotateMatrix(pMatrix, Angle, MatrixOrder)
E := Gdip_TransformPath(pPath, pMatrix)
Gdip_DeleteMatrix(pMatrix)
pathBounds := Gdip_GetPathWorldBounds(pPath)
Gdip_DeletePath(pPath)
RWidth := pathBounds.w
RHeight := pathBounds.h
Return E
}
Gdip_GetWorldTransform(pGraphics) {
Static Ptr := "UPtr"
hMatrix := 0
E := DllCall("gdiplus\GdipGetWorldTransform", Ptr, pGraphics, "UPtr*", hMatrix)
Return hMatrix
}
Gdip_IsVisibleGraphPoint(pGraphics, X, Y) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsVisiblePoint", Ptr, pGraphics, "float", X, "float", Y, "int*", result)
If E
Return -1
Return result
}
Gdip_IsVisibleGraphRect(pGraphics, X, Y, Width, Height) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsVisibleRect", Ptr, pGraphics, "float", X, "float", Y, "float", Width, "float", Height, "int*", result)
If E
Return -1
Return result
}
Gdip_IsVisibleGraphRectEntirely(pGraphics, X, Y, Width, Height) {
a := Gdip_IsVisibleGraphPoint(pGraphics, X, Y)
b := Gdip_IsVisibleGraphPoint(pGraphics, X + Width, Y)
c := Gdip_IsVisibleGraphPoint(pGraphics, X + Width, Y + Height)
d := Gdip_IsVisibleGraphPoint(pGraphics, X, Y + Height)
If (a=1 && b=1 && c=1 && d=1)
Return 1
Else If (a=-1 || b=-1 || c=-1 || d=-1)
Return -1
Else
Return 0
}
Gdip_IsClipEmpty(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsClipEmpty", Ptr, pGraphics, "int*", result)
If E
Return -1
Return result
}
Gdip_IsVisibleClipEmpty(pGraphics) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsVisibleClipEmpty", Ptr, pGraphics, "uint*", result)
If E
Return -1
Return result
}
Gdip_SetClipFromGraphics(pGraphics, pGraphicsSrc, CombineMode:=0) {
return DllCall("gdiplus\GdipSetClipGraphics", "UPtr", pGraphics, "UPtr", pGraphicsSrc, "int", CombineMode)
}
Gdip_GetClipBounds(pGraphics) {
rData := {}
VarSetCapacity(RectF, 16, 0)
status := DllCall("gdiplus\GdipGetClipBounds", "UPtr", pGraphics, "UPtr", &RectF)
If (!status) {
rData.x := NumGet(&RectF, 0, "float")
, rData.y := NumGet(&RectF, 4, "float")
, rData.w := NumGet(&RectF, 8, "float")
, rData.h := NumGet(&RectF, 12, "float")
} Else {
Return status
}
return rData
}
Gdip_GetVisibleClipBounds(pGraphics) {
rData := {}
VarSetCapacity(RectF, 16, 0)
status := DllCall("gdiplus\GdipGetVisibleClipBounds", "UPtr", pGraphics, "UPtr", &RectF)
If (!status) {
rData.x := NumGet(&RectF, 0, "float")
, rData.y := NumGet(&RectF, 4, "float")
, rData.w := NumGet(&RectF, 8, "float")
, rData.h := NumGet(&RectF, 12, "float")
} Else {
Return status
}
return rData
}
Gdip_TranslateClip(pGraphics, dX, dY) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipTranslateClip", Ptr, pGraphics, "float", dX, "float", dY)
}
Gdip_ResetClip(pGraphics) {
return DllCall("gdiplus\GdipResetClip", "UPtr", pGraphics)
}
Gdip_GetClipRegion(pGraphics) {
Region := Gdip_CreateRegion()
E := DllCall("gdiplus\GdipGetClip", "UPtr", pGraphics, "UInt", Region)
If E
return -1
return Region
}
Gdip_SetClipRegion(pGraphics, Region, CombineMode:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetClipRegion", Ptr, pGraphics, Ptr, Region, "int", CombineMode)
}
Gdip_SetClipRect(pGraphics, x, y, w, h, CombineMode:=0) {
return DllCall("gdiplus\GdipSetClipRect", "UPtr", pGraphics, "float", x, "float", y, "float", w, "float", h, "int", CombineMode)
}
Gdip_SetClipPath(pGraphics, pPath, CombineMode:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetClipPath", Ptr, pGraphics, Ptr, pPath, "int", CombineMode)
}
Gdip_CreateRegion() {
Region := 0
DllCall("gdiplus\GdipCreateRegion", "UInt*", Region)
return Region
}
Gdip_CombineRegionRegion(Region, Region2, CombineMode) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipCombineRegionRegion", Ptr, Region, Ptr, Region2, "int", CombineMode)
}
Gdip_CombineRegionRect(Region, x, y, w, h, CombineMode) {
Static Ptr := "UPtr"
CreateRectF(RectF, x, y, w, h)
return DllCall("gdiplus\GdipCombineRegionRect", Ptr, Region, Ptr, &RectF, "int", CombineMode)
}
Gdip_CombineRegionPath(Region, pPath, CombineMode) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipCombineRegionPath", Ptr, Region, Ptr, pPath, "int", CombineMode)
}
Gdip_CreateRegionPath(pPath) {
Static Ptr := "UPtr"
Region := 0
E := DllCall("gdiplus\GdipCreateRegionPath", Ptr, pPath, "UInt*", Region)
If E
return -1
return Region
}
Gdip_CreateRegionRect(x, y, w, h) {
CreateRectF(RectF, x, y, w, h)
E := DllCall("gdiplus\GdipCreateRegionRect", "UPtr", &RectF, "UInt*", Region)
If E
return -1
return Region
}
Gdip_IsEmptyRegion(pGraphics, Region) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsEmptyRegion", Ptr, Region, Ptr, pGraphics, "uInt*", result)
If E
return -1
Return result
}
Gdip_IsEqualRegion(pGraphics, Region1, Region2) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsEqualRegion", Ptr, Region1, Ptr, Region2, Ptr, pGraphics, "uInt*", result)
If E
return -1
Return result
}
Gdip_IsInfiniteRegion(pGraphics, Region) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsInfiniteRegion", Ptr, Region, Ptr, pGraphics, "uInt*", result)
If E
return -1
Return result
}
Gdip_IsVisibleRegionPoint(pGraphics, Region, x, y) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsVisibleRegionPoint", Ptr, Region, "float", X, "float", Y, Ptr, pGraphics, "uInt*", result)
If E
return -1
Return result
}
Gdip_IsVisibleRegionRect(pGraphics, Region, x, y, width, height) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipIsVisibleRegionRect", Ptr, Region, "float", X, "float", Y, "float", Width, "float", Height, Ptr, pGraphics, "uInt*", result)
If E
return -1
Return result
}
Gdip_IsVisibleRegionRectEntirely(pGraphics, Region, x, y, width, height) {
a := Gdip_IsVisibleRegionPoint(pGraphics, Region, X, Y)
b := Gdip_IsVisibleRegionPoint(pGraphics, Region, X + Width, Y)
c := Gdip_IsVisibleRegionPoint(pGraphics, Region, X + Width, Y + Height)
d := Gdip_IsVisibleRegionPoint(pGraphics, Region, X, Y + Height)
If (a=1 && b=1 && c=1 && d=1)
Return 1
Else If (a=-1 || b=-1 || c=-1 || d=-1)
Return -1
Else
Return 0
}
Gdip_SetEmptyRegion(Region) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetEmpty", Ptr, Region)
}
Gdip_SetInfiniteRegion(Region) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetInfinite", Ptr, Region)
}
Gdip_GetRegionBounds(pGraphics, Region) {
rData := {}
VarSetCapacity(RectF, 16, 0)
status := DllCall("gdiplus\GdipGetRegionBounds", "UPtr", Region, "UPtr", pGraphics, "UPtr", &RectF)
If (!status) {
rData.x := NumGet(&RectF, 0, "float")
, rData.y := NumGet(&RectF, 4, "float")
, rData.w := NumGet(&RectF, 8, "float")
, rData.h := NumGet(&RectF, 12, "float")
} Else {
Return status
}
return rData
}
Gdip_TranslateRegion(Region, X, Y) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipTranslateRegion", Ptr, Region, "float", X, "float", Y)
}
Gdip_RotateRegionAtCenter(pGraphics, Region, Angle, MatrixOrder:=1) {
Rect := Gdip_GetRegionBounds(pGraphics, Region)
cX := Rect.x + (Rect.w / 2)
cY := Rect.y + (Rect.h / 2)
pMatrix := Gdip_CreateMatrix()
Gdip_TranslateMatrix(pMatrix, -cX , -cY)
Gdip_RotateMatrix(pMatrix, Angle, MatrixOrder)
Gdip_TranslateMatrix(pMatrix, cX, cY, MatrixOrder)
E := Gdip_TransformRegion(Region, pMatrix)
Gdip_DeleteMatrix(pMatrix)
Return E
}
Gdip_TransformRegion(Region, pMatrix) {
return DllCall("gdiplus\GdipTransformRegion", "UPtr", Region, "UPtr", pMatrix)
}
Gdip_CloneRegion(Region) {
newRegion := 0
DllCall("gdiplus\GdipCloneRegion", "UPtr", Region, "UInt*", newRegion)
return newRegion
}
Gdip_LockBits(pBitmap, x, y, w, h, ByRef Stride, ByRef Scan0, ByRef BitmapData, LockMode := 3, PixelFormat := 0x26200a) {
Static Ptr := "UPtr"
CreateRect(_Rect, x, y, w, h)
VarSetCapacity(BitmapData, 16+2*A_PtrSize, 0)
_E := DllCall("Gdiplus\GdipBitmapLockBits", Ptr, pBitmap, Ptr, &_Rect, "uint", LockMode, "int", PixelFormat, Ptr, &BitmapData)
Stride := NumGet(BitmapData, 8, "Int")
Scan0 := NumGet(BitmapData, 16, Ptr)
return _E
}
Gdip_UnlockBits(pBitmap, ByRef BitmapData) {
Static Ptr := "UPtr"
return DllCall("Gdiplus\GdipBitmapUnlockBits", Ptr, pBitmap, Ptr, &BitmapData)
}
Gdip_SetLockBitPixel(ARGB, Scan0, x, y, Stride) {
NumPut(ARGB, Scan0+0, (x*4)+(y*Stride), "UInt")
}
Gdip_GetLockBitPixel(Scan0, x, y, Stride) {
return NumGet(Scan0+0, (x*4)+(y*Stride), "UInt")
}
Gdip_PixelateBitmap(pBitmap, ByRef pBitmapOut, BlockSize) {
static PixelateBitmap
Static Ptr := "UPtr"
if (!PixelateBitmap)
{
if (A_PtrSize!=8)
MCode_PixelateBitmap := "
      (LTrim Join
      558BEC83EC3C8B4514538B5D1C99F7FB56578BC88955EC894DD885C90F8E830200008B451099F7FB8365DC008365E000894DC88955F08945E833FF897DD4
      397DE80F8E160100008BCB0FAFCB894DCC33C08945F88945FC89451C8945143BD87E608B45088D50028BC82BCA8BF02BF2418945F48B45E02955F4894DC4
      8D0CB80FAFCB03CA895DD08BD1895DE40FB64416030145140FB60201451C8B45C40FB604100145FC8B45F40FB604020145F883C204FF4DE475D6034D18FF
      4DD075C98B4DCC8B451499F7F98945148B451C99F7F989451C8B45FC99F7F98945FC8B45F899F7F98945F885DB7E648B450C8D50028BC82BCA83C103894D
      C48BC82BCA41894DF48B4DD48945E48B45E02955E48D0C880FAFCB03CA895DD08BD18BF38A45148B7DC48804178A451C8B7DF488028A45FC8804178A45F8
      8B7DE488043A83C2044E75DA034D18FF4DD075CE8B4DCC8B7DD447897DD43B7DE80F8CF2FEFFFF837DF0000F842C01000033C08945F88945FC89451C8945
      148945E43BD87E65837DF0007E578B4DDC034DE48B75E80FAF4D180FAFF38B45088D500203CA8D0CB18BF08BF88945F48B45F02BF22BFA2955F48945CC0F
      B6440E030145140FB60101451C0FB6440F010145FC8B45F40FB604010145F883C104FF4DCC75D8FF45E4395DE47C9B8B4DF00FAFCB85C9740B8B451499F7
      F9894514EB048365140033F63BCE740B8B451C99F7F989451CEB0389751C3BCE740B8B45FC99F7F98945FCEB038975FC3BCE740B8B45F899F7F98945F8EB
      038975F88975E43BDE7E5A837DF0007E4C8B4DDC034DE48B75E80FAF4D180FAFF38B450C8D500203CA8D0CB18BF08BF82BF22BFA2BC28B55F08955CC8A55
      1488540E038A551C88118A55FC88540F018A55F888140183C104FF4DCC75DFFF45E4395DE47CA68B45180145E0015DDCFF4DC80F8594FDFFFF8B451099F7
      FB8955F08945E885C00F8E450100008B45EC0FAFC38365DC008945D48B45E88945CC33C08945F88945FC89451C8945148945103945EC7E6085DB7E518B4D
      D88B45080FAFCB034D108D50020FAF4D18034DDC8BF08BF88945F403CA2BF22BFA2955F4895DC80FB6440E030145140FB60101451C0FB6440F010145FC8B
      45F40FB604080145F883C104FF4DC875D8FF45108B45103B45EC7CA08B4DD485C9740B8B451499F7F9894514EB048365140033F63BCE740B8B451C99F7F9
      89451CEB0389751C3BCE740B8B45FC99F7F98945FCEB038975FC3BCE740B8B45F899F7F98945F8EB038975F88975103975EC7E5585DB7E468B4DD88B450C
      0FAFCB034D108D50020FAF4D18034DDC8BF08BF803CA2BF22BFA2BC2895DC88A551488540E038A551C88118A55FC88540F018A55F888140183C104FF4DC8
      75DFFF45108B45103B45EC7CAB8BC3C1E0020145DCFF4DCC0F85CEFEFFFF8B4DEC33C08945F88945FC89451C8945148945103BC87E6C3945F07E5C8B4DD8
      8B75E80FAFCB034D100FAFF30FAF4D188B45088D500203CA8D0CB18BF08BF88945F48B45F02BF22BFA2955F48945C80FB6440E030145140FB60101451C0F
      B6440F010145FC8B45F40FB604010145F883C104FF4DC875D833C0FF45108B4DEC394D107C940FAF4DF03BC874068B451499F7F933F68945143BCE740B8B
      451C99F7F989451CEB0389751C3BCE740B8B45FC99F7F98945FCEB038975FC3BCE740B8B45F899F7F98945F8EB038975F88975083975EC7E63EB0233F639
      75F07E4F8B4DD88B75E80FAFCB034D080FAFF30FAF4D188B450C8D500203CA8D0CB18BF08BF82BF22BFA2BC28B55F08955108A551488540E038A551C8811
      8A55FC88540F018A55F888140883C104FF4D1075DFFF45088B45083B45EC7C9F5F5E33C05BC9C21800
)"
else
MCode_PixelateBitmap := "
      (LTrim Join
      4489442418488954241048894C24085355565741544155415641574883EC28418BC1448B8C24980000004C8BDA99488BD941F7F9448BD0448BFA8954240C
      448994248800000085C00F8E9D020000418BC04533E4458BF299448924244C8954241041F7F933C9898C24980000008BEA89542404448BE889442408EB05
      4C8B5C24784585ED0F8E1A010000458BF1418BFD48897C2418450FAFF14533D233F633ED4533E44533ED4585C97E5B4C63BC2490000000418D040A410FAF
      C148984C8D441802498BD9498BD04D8BD90FB642010FB64AFF4403E80FB60203E90FB64AFE4883C2044403E003F149FFCB75DE4D03C748FFCB75D0488B7C
      24188B8C24980000004C8B5C2478418BC59941F7FE448BE8418BC49941F7FE448BE08BC59941F7FE8BE88BC69941F7FE8BF04585C97E4048639C24900000
      004103CA4D8BC1410FAFC94863C94A8D541902488BCA498BC144886901448821408869FF408871FE4883C10448FFC875E84803D349FFC875DA8B8C249800
      0000488B5C24704C8B5C24784183C20448FFCF48897C24180F850AFFFFFF8B6C2404448B2424448B6C24084C8B74241085ED0F840A01000033FF33DB4533
      DB4533D24533C04585C97E53488B74247085ED7E42438D0C04418BC50FAF8C2490000000410FAFC18D04814863C8488D5431028BCD0FB642014403D00FB6
      024883C2044403D80FB642FB03D80FB642FA03F848FFC975DE41FFC0453BC17CB28BCD410FAFC985C9740A418BC299F7F98BF0EB0233F685C9740B418BC3
      99F7F9448BD8EB034533DB85C9740A8BC399F7F9448BD0EB034533D285C9740A8BC799F7F9448BC0EB034533C033D24585C97E4D4C8B74247885ED7E3841
      8D0C14418BC50FAF8C2490000000410FAFC18D04814863C84A8D4431028BCD40887001448818448850FF448840FE4883C00448FFC975E8FFC2413BD17CBD
      4C8B7424108B8C2498000000038C2490000000488B5C24704503E149FFCE44892424898C24980000004C897424100F859EFDFFFF448B7C240C448B842480
      000000418BC09941F7F98BE8448BEA89942498000000896C240C85C00F8E3B010000448BAC2488000000418BCF448BF5410FAFC9898C248000000033FF33
      ED33F64533DB4533D24533C04585FF7E524585C97E40418BC5410FAFC14103C00FAF84249000000003C74898488D541802498BD90FB642014403D00FB602
      4883C2044403D80FB642FB03F00FB642FA03E848FFCB75DE488B5C247041FFC0453BC77CAE85C9740B418BC299F7F9448BE0EB034533E485C9740A418BC3
      99F7F98BD8EB0233DB85C9740A8BC699F7F9448BD8EB034533DB85C9740A8BC599F7F9448BD0EB034533D24533C04585FF7E4E488B4C24784585C97E3541
      8BC5410FAFC14103C00FAF84249000000003C74898488D540802498BC144886201881A44885AFF448852FE4883C20448FFC875E941FFC0453BC77CBE8B8C
      2480000000488B5C2470418BC1C1E00203F849FFCE0F85ECFEFFFF448BAC24980000008B6C240C448BA4248800000033FF33DB4533DB4533D24533C04585
      FF7E5A488B7424704585ED7E48418BCC8BC5410FAFC94103C80FAF8C2490000000410FAFC18D04814863C8488D543102418BCD0FB642014403D00FB60248
      83C2044403D80FB642FB03D80FB642FA03F848FFC975DE41FFC0453BC77CAB418BCF410FAFCD85C9740A418BC299F7F98BF0EB0233F685C9740B418BC399
      F7F9448BD8EB034533DB85C9740A8BC399F7F9448BD0EB034533D285C9740A8BC799F7F9448BC0EB034533C033D24585FF7E4E4585ED7E42418BCC8BC541
      0FAFC903CA0FAF8C2490000000410FAFC18D04814863C8488B442478488D440102418BCD40887001448818448850FF448840FE4883C00448FFC975E8FFC2
      413BD77CB233C04883C428415F415E415D415C5F5E5D5BC3
)"
VarSetCapacity(PixelateBitmap, StrLen(MCode_PixelateBitmap)//2)
nCount := StrLen(MCode_PixelateBitmap)//2
N := (A_AhkVersion < 2) ? nCount : "nCount"
Loop %N%
NumPut("0x" SubStr(MCode_PixelateBitmap, (2*A_Index)-1, 2), PixelateBitmap, A_Index-1, "UChar")
DllCall("VirtualProtect", Ptr, &PixelateBitmap, Ptr, VarSetCapacity(PixelateBitmap), "uint", 0x40, "UPtr*", 0)
}
Gdip_GetImageDimensions(pBitmap, Width, Height)
if (Width != Gdip_GetImageWidth(pBitmapOut) || Height != Gdip_GetImageHeight(pBitmapOut))
return -1
if (BlockSize > Width || BlockSize > Height)
return -2
E1 := Gdip_LockBits(pBitmap, 0, 0, Width, Height, Stride1, Scan01, BitmapData1)
E2 := Gdip_LockBits(pBitmapOut, 0, 0, Width, Height, Stride2, Scan02, BitmapData2)
if (E1 || E2)
return -3
DllCall(&PixelateBitmap, Ptr, Scan01, Ptr, Scan02, "int", Width, "int", Height, "int", Stride1, "int", BlockSize)
Gdip_UnlockBits(pBitmap, BitmapData1)
Gdip_UnlockBits(pBitmapOut, BitmapData2)
return 0
}
Gdip_ToARGB(A, R, G, B) {
return (A << 24) | (R << 16) | (G << 8) | B
}
Gdip_FromARGB(ARGB, ByRef A, ByRef R, ByRef G, ByRef B) {
A := (0xff000000 & ARGB) >> 24
R := (0x00ff0000 & ARGB) >> 16
G := (0x0000ff00 & ARGB) >> 8
B := 0x000000ff & ARGB
}
Gdip_AFromARGB(ARGB) {
return (0xff000000 & ARGB) >> 24
}
Gdip_RFromARGB(ARGB) {
return (0x00ff0000 & ARGB) >> 16
}
Gdip_GFromARGB(ARGB) {
return (0x0000ff00 & ARGB) >> 8
}
Gdip_BFromARGB(ARGB) {
return 0x000000ff & ARGB
}
StrGetB(Address, Length:=-1, Encoding:=0) {
if !IsInteger(Length)
Encoding := Length,  Length := -1
if (Address+0 < 1024)
return
if (Encoding = "UTF-16")
Encoding := 1200
else if (Encoding = "UTF-8")
Encoding := 65001
else if SubStr(Encoding,1,2)="CP"
Encoding := SubStr(Encoding,3)
if !Encoding
{
if (Length == -1)
Length := DllCall("lstrlen", "uint", Address)
VarSetCapacity(String, Length)
DllCall("lstrcpyn", "str", String, "uint", Address, "int", Length + 1)
}
else if (Encoding = 1200)
{
char_count := DllCall("WideCharToMultiByte", "uint", 0, "uint", 0x400, "uint", Address, "int", Length, "uint", 0, "uint", 0, "uint", 0, "uint", 0)
VarSetCapacity(String, char_count)
DllCall("WideCharToMultiByte", "uint", 0, "uint", 0x400, "uint", Address, "int", Length, "str", String, "int", char_count, "uint", 0, "uint", 0)
}
else if IsInteger(Encoding)
{
char_count := DllCall("MultiByteToWideChar", "uint", Encoding, "uint", 0, "uint", Address, "int", Length, "uint", 0, "int", 0)
VarSetCapacity(String, char_count * 2)
char_count := DllCall("MultiByteToWideChar", "uint", Encoding, "uint", 0, "uint", Address, "int", Length, "uint", &String, "int", char_count * 2)
String := StrGetB(&String, char_count, 1200)
}
return String
}
Gdip_Startup(multipleInstances:=0) {
Static Ptr := "UPtr"
pToken := 0
If (multipleInstances=0)
{
if !DllCall("GetModuleHandle", "str", "gdiplus", Ptr)
DllCall("LoadLibrary", "str", "gdiplus")
} Else DllCall("LoadLibrary", "str", "gdiplus")
VarSetCapacity(si, A_PtrSize = 8 ? 24 : 16, 0), si := Chr(1)
DllCall("gdiplus\GdiplusStartup", "UPtr*", pToken, Ptr, &si, Ptr, 0)
return pToken
}
Gdip_Shutdown(pToken) {
Static Ptr := "UPtr"
DllCall("gdiplus\GdiplusShutdown", Ptr, pToken)
hModule := DllCall("GetModuleHandle", "str", "gdiplus", Ptr)
if hModule
DllCall("FreeLibrary", Ptr, hModule)
return 0
}
IsInteger(Var) {
Static Integer := "Integer"
If Var Is Integer
Return True
Return False
}
IsNumber(Var) {
Static number := "number"
If Var Is number
Return True
Return False
}
GetMonitorCount() {
Monitors := MDMF_Enum()
for k,v in Monitors
count := A_Index
return count
}
GetMonitorInfo(MonitorNum) {
Monitors := MDMF_Enum()
for k,v in Monitors
if (v.Num = MonitorNum)
return v
}
GetPrimaryMonitor() {
Monitors := MDMF_Enum()
for k,v in Monitors
If (v.Primary)
return v.Num
}
MDMF_Enum(HMON := "") {
Static CallbackFunc := Func(A_AhkVersion < "2" ? "RegisterCallback" : "CallbackCreate")
Static EnumProc := CallbackFunc.Call("MDMF_EnumProc")
Static Obj := (A_AhkVersion < "2") ? "Object" : "Map"
Static Monitors := {}
If (HMON = "")
{
Monitors := %Obj%("TotalCount", 0)
If !DllCall("User32.dll\EnumDisplayMonitors", "Ptr", 0, "Ptr", 0, "Ptr", EnumProc, "Ptr", &Monitors, "Int")
Return False
}
Return (HMON = "") ? Monitors : Monitors.HasKey(HMON) ? Monitors[HMON] : False
}
MDMF_EnumProc(HMON, HDC, PRECT, ObjectAddr) {
Monitors := Object(ObjectAddr)
Monitors[HMON] := MDMF_GetInfo(HMON)
Monitors["TotalCount"]++
If (Monitors[HMON].Primary)
Monitors["Primary"] := HMON
Return True
}
MDMF_FromHWND(HWND, Flag := 0) {
Return DllCall("User32.dll\MonitorFromWindow", "Ptr", HWND, "UInt", Flag, "Ptr")
}
MDMF_FromPoint(ByRef X := "", ByRef Y := "", Flag := 0) {
If (X = "") || (Y = "") {
VarSetCapacity(PT, 8, 0)
DllCall("User32.dll\GetCursorPos", "Ptr", &PT, "Int")
If (X = "")
X := NumGet(PT, 0, "Int")
If (Y = "")
Y := NumGet(PT, 4, "Int")
}
Return DllCall("User32.dll\MonitorFromPoint", "Int64", (X & 0xFFFFFFFF) | (Y << 32), "UInt", Flag, "Ptr")
}
MDMF_FromRect(X, Y, W, H, Flag := 0) {
VarSetCapacity(RC, 16, 0)
NumPut(X, RC, 0, "Int"), NumPut(Y, RC, 4, "Int"), NumPut(X + W, RC, 8, "Int"), NumPut(Y + H, RC, 12, "Int")
Return DllCall("User32.dll\MonitorFromRect", "Ptr", &RC, "UInt", Flag, "Ptr")
}
MDMF_GetInfo(HMON) {
NumPut(VarSetCapacity(MIEX, 40 + (32 << !!A_IsUnicode)), MIEX, 0, "UInt")
If DllCall("User32.dll\GetMonitorInfo", "Ptr", HMON, "Ptr", &MIEX, "Int")
Return {Name:      (Name := StrGet(&MIEX + 40, 32))
, Num:       RegExReplace(Name, ".*(\d+)$", "$1")
, Left:      NumGet(MIEX, 4, "Int")
, Top:       NumGet(MIEX, 8, "Int")
, Right:     NumGet(MIEX, 12, "Int")
, Bottom:    NumGet(MIEX, 16, "Int")
, WALeft:    NumGet(MIEX, 20, "Int")
, WATop:     NumGet(MIEX, 24, "Int")
, WARight:   NumGet(MIEX, 28, "Int")
, WABottom:  NumGet(MIEX, 32, "Int")
, Primary:   NumGet(MIEX, 36, "UInt")}
Return False
}
Gdip_LoadImageFromFile(sFile, useICM:=0) {
pImage := 0
function2call := (useICM=1) ? "GdipLoadImageFromFileICM" : "GdipLoadImageFromFile"
R := DllCall("gdiplus\" function2call, "WStr", sFile, "UPtrP", pImage)
ErrorLevel := R
Return pImage
}
Gdip_GetPropertyCount(pImage) {
PropCount := 0
Static Ptr := "UPtr"
R := DllCall("gdiplus\GdipGetPropertyCount", Ptr, pImage, "UIntP", PropCount)
ErrorLevel := R
Return PropCount
}
Gdip_GetPropertyIdList(pImage) {
PropNum := Gdip_GetPropertyCount(pImage)
Static Ptr := "UPtr"
If (ErrorLevel) || (PropNum = 0)
Return False
VarSetCapacity(PropIDList, 4 * PropNum, 0)
R := DllCall("gdiplus\GdipGetPropertyIdList", Ptr, pImage, "UInt", PropNum, "Ptr", &PropIDList)
If (R) {
ErrorLevel := R
Return False
}
PropArray := {Count: PropNum}
Loop %PropNum%
{
PropID := NumGet(PropIDList, (A_Index - 1) << 2, "UInt")
PropArray[PropID] := Gdip_GetPropertyTagName(PropID)
}
Return PropArray
}
Gdip_GetPropertyItem(pImage, PropID) {
PropItem := {Length: 0, Type: 0, Value: ""}
ItemSize := 0
R := DllCall("gdiplus\GdipGetPropertyItemSize", "Ptr", pImage, "UInt", PropID, "UIntP", ItemSize)
If (R) {
ErrorLevel := R
Return False
}
Static Ptr := "UPtr"
VarSetCapacity(Item, ItemSize, 0)
R := DllCall("gdiplus\GdipGetPropertyItem", Ptr, pImage, "UInt", PropID, "UInt", ItemSize, "Ptr", &Item)
If (R) {
ErrorLevel := R
Return False
}
PropLen := NumGet(Item, 4, "UInt")
PropType := NumGet(Item, 8, "Short")
PropAddr := NumGet(Item, 8 + A_PtrSize, "UPtr")
PropItem.Length := PropLen
PropItem.Type := PropType
If (PropLen > 0)
{
PropVal := ""
Gdip_GetPropertyItemValue(PropVal, PropLen, PropType, PropAddr)
If (PropType = 1) || (PropType = 7) {
PropItem.SetCapacity("Value", PropLen)
ValAddr := PropItem.GetAddress("Value")
DllCall("Kernel32.dll\RtlMoveMemory", "Ptr", ValAddr, "Ptr", &PropVal, "Ptr", PropLen)
} Else {
PropItem.Value := PropVal
}
}
ErrorLevel := 0
Return PropItem
}
Gdip_GetAllPropertyItems(pImage) {
BufSize := PropNum := ErrorLevel := 0
R := DllCall("gdiplus\GdipGetPropertySize", "Ptr", pImage, "UIntP", BufSize, "UIntP", PropNum)
If (R) || (PropNum = 0) {
ErrorLevel := R ? R : 19
Return False
}
VarSetCapacity(Buffer, BufSize, 0)
Static Ptr := "UPtr"
R := DllCall("gdiplus\GdipGetAllPropertyItems", Ptr, pImage, "UInt", BufSize, "UInt", PropNum, "Ptr", &Buffer)
If (R) {
ErrorLevel := R
Return False
}
PropsObj := {Count: PropNum}
PropSize := 8 + (2 * A_PtrSize)
Loop %PropNum%
{
OffSet := PropSize * (A_Index - 1)
PropID := NumGet(Buffer, OffSet, "UInt")
PropLen := NumGet(Buffer, OffSet + 4, "UInt")
PropType := NumGet(Buffer, OffSet + 8, "Short")
PropAddr := NumGet(Buffer, OffSet + 8 + A_PtrSize, "UPtr")
PropVal := ""
PropsObj[PropID] := {}
PropsObj[PropID, "Length"] := PropLen
PropsObj[PropID, "Type"] := PropType
PropsObj[PropID, "Value"] := PropVal
If (PropLen > 0)
{
Gdip_GetPropertyItemValue(PropVal, PropLen, PropType, PropAddr)
If (PropType = 1) || (PropType = 7)
{
PropsObj[PropID].SetCapacity("Value", PropLen)
ValAddr := PropsObj[PropID].GetAddress("Value")
DllCall("Kernel32.dll\RtlMoveMemory", "Ptr", ValAddr, "Ptr", PropAddr, "Ptr", PropLen)
} Else {
PropsObj[PropID].Value := PropVal
}
}
}
ErrorLevel := 0
Return PropsObj
}
Gdip_GetPropertyTagName(PropID) {
Static PropTagsA := {0x0001:"GPS LatitudeRef",0x0002:"GPS Latitude",0x0003:"GPS LongitudeRef",0x0004:"GPS Longitude",0x0005:"GPS AltitudeRef",0x0006:"GPS Altitude",0x0007:"GPS Time",0x0008:"GPS Satellites",0x0009:"GPS Status",0x000A:"GPS MeasureMode",0x001D:"GPS Date",0x001E:"GPS Differential",0x00FE:"NewSubfileType",0x00FF:"SubfileType",0x0102:"Bits Per Sample",0x0103:"Compression",0x0106:"Photometric Interpolation",0x0107:"ThreshHolding",0x010A:"Fill Order",0x010D:"Document Name",0x010E:"Image Description",0x010F:"Equipment Make",0x0110:"Equipment Model",0x0112:"Orientation",0x0115:"Samples Per Pixel",0x0118:"Min Sample Value",0x0119:"Max Sample Value",0x011D:"Page Name",0x0122:"GrayResponseUnit",0x0123:"GrayResponseCurve",0x0128:"Resolution Unit",0x012D:"Transfer Function",0x0131:"Software Used",0x0132:"Internal Date Time",0x013B:"Artist"
,0x013C:"Host Computer",0x013D:"Predictor",0x013E:"White Point",0x013F:"Primary Chromaticities",0x0140:"Color Map",0x014C:"Ink Set",0x014D:"Ink Names",0x014E:"Number Of Inks",0x0150:"Dot Range",0x0151:"Target Printer",0x0152:"Extra Samples",0x0153:"Sample Format",0x0156:"Transfer Range",0x0200:"JPEGProc",0x0205:"JPEGLosslessPredictors",0x0301:"Gamma",0x0302:"ICC Profile Descriptor",0x0303:"SRGB Rendering Intent",0x0320:"Image Title",0x5010:"JPEG Quality",0x5011:"Grid Size",0x501A:"Color Transfer Function",0x5100:"Frame Delay",0x5101:"Loop Count",0x5110:"Pixel Unit",0x5111:"Pixel Per Unit X",0x5112:"Pixel Per Unit Y",0x8298:"Copyright",0x829A:"EXIF Exposure Time",0x829D:"EXIF F Number",0x8773:"ICC Profile",0x8822:"EXIF ExposureProg",0x8824:"EXIF SpectralSense",0x8827:"EXIF ISO Speed",0x9003:"EXIF Date Original",0x9004:"EXIF Date Digitized"
,0x9102:"EXIF CompBPP",0x9201:"EXIF Shutter Speed",0x9202:"EXIF Aperture",0x9203:"EXIF Brightness",0x9204:"EXIF Exposure Bias",0x9205:"EXIF Max. Aperture",0x9206:"EXIF Subject Dist",0x9207:"EXIF Metering Mode",0x9208:"EXIF Light Source",0x9209:"EXIF Flash",0x920A:"EXIF Focal Length",0x9214:"EXIF Subject Area",0x927C:"EXIF Maker Note",0x9286:"EXIF Comments",0xA001:"EXIF Color Space",0xA002:"EXIF PixXDim",0xA003:"EXIF PixYDim",0xA004:"EXIF Related WAV",0xA005:"EXIF Interop",0xA20B:"EXIF Flash Energy",0xA20E:"EXIF Focal X Res",0xA20F:"EXIF Focal Y Res",0xA210:"EXIF FocalResUnit",0xA214:"EXIF Subject Loc",0xA215:"EXIF Exposure Index",0xA217:"EXIF Sensing Method",0xA300:"EXIF File Source",0xA301:"EXIF Scene Type",0xA401:"EXIF Custom Rendered",0xA402:"EXIF Exposure Mode",0xA403:"EXIF White Balance",0xA404:"EXIF Digital Zoom Ratio"
,0xA405:"EXIF Focal Length In 35mm Film",0xA406:"EXIF Scene Capture Type",0xA407:"EXIF Gain Control",0xA408:"EXIF Contrast",0xA409:"EXIF Saturation",0xA40A:"EXIF Sharpness",0xA40B:"EXIF Device Setting Description",0xA40C:"EXIF Subject Distance Range",0xA420:"EXIF Unique Image ID"}
Static PropTagsB := {0x0000:"GpsVer",0x000B:"GpsGpsDop",0x000C:"GpsSpeedRef",0x000D:"GpsSpeed",0x000E:"GpsTrackRef",0x000F:"GpsTrack",0x0010:"GpsImgDirRef",0x0011:"GpsImgDir",0x0012:"GpsMapDatum",0x0013:"GpsDestLatRef",0x0014:"GpsDestLat",0x0015:"GpsDestLongRef",0x0016:"GpsDestLong",0x0017:"GpsDestBearRef",0x0018:"GpsDestBear",0x0019:"GpsDestDistRef",0x001A:"GpsDestDist",0x001B:"GpsProcessingMethod",0x001C:"GpsAreaInformation",0x0100:"Original Image Width",0x0101:"Original Image Height",0x0108:"CellWidth",0x0109:"CellHeight",0x0111:"Strip Offsets",0x0116:"RowsPerStrip",0x0117:"StripBytesCount",0x011A:"XResolution",0x011B:"YResolution",0x011C:"Planar Config",0x011E:"XPosition",0x011F:"YPosition",0x0120:"FreeOffset",0x0121:"FreeByteCounts",0x0124:"T4Option",0x0125:"T6Option",0x0129:"PageNumber",0x0141:"Halftone Hints",0x0142:"TileWidth",0x0143:"TileLength",0x0144:"TileOffset"
,0x0145:"TileByteCounts",0x0154:"SMin Sample Value",0x0155:"SMax Sample Value",0x0201:"JPEGInterFormat",0x0202:"JPEGInterLength",0x0203:"JPEGRestartInterval",0x0206:"JPEGPointTransforms",0x0207:"JPEGQTables",0x0208:"JPEGDCTables",0x0209:"JPEGACTables",0x0211:"YCbCrCoefficients",0x0212:"YCbCrSubsampling",0x0213:"YCbCrPositioning",0x0214:"REFBlackWhite",0x5001:"ResolutionXUnit",0x5002:"ResolutionYUnit",0x5003:"ResolutionXLengthUnit",0x5004:"ResolutionYLengthUnit",0x5005:"PrintFlags",0x5006:"PrintFlagsVersion",0x5007:"PrintFlagsCrop",0x5008:"PrintFlagsBleedWidth",0x5009:"PrintFlagsBleedWidthScale",0x500A:"HalftoneLPI",0x500B:"HalftoneLPIUnit",0x500C:"HalftoneDegree",0x500D:"HalftoneShape",0x500E:"HalftoneMisc",0x500F:"HalftoneScreen",0x5012:"ThumbnailFormat",0x5013:"ThumbnailWidth",0x5014:"ThumbnailHeight",0x5015:"ThumbnailColorDepth"
,0x5016:"ThumbnailPlanes",0x5017:"ThumbnailRawBytes",0x5018:"ThumbnailSize",0x5019:"ThumbnailCompressedSize",0x501B:"ThumbnailData",0x5020:"ThumbnailImageWidth",0x5021:"ThumbnailImageHeight",0x5022:"ThumbnailBitsPerSample",0x5023:"ThumbnailCompression",0x5024:"ThumbnailPhotometricInterp",0x5025:"ThumbnailImageDescription",0x5026:"ThumbnailEquipMake",0x5027:"ThumbnailEquipModel",0x5028:"ThumbnailStripOffsets",0x5029:"ThumbnailOrientation",0x502A:"ThumbnailSamplesPerPixel",0x502B:"ThumbnailRowsPerStrip",0x502C:"ThumbnailStripBytesCount",0x502D:"ThumbnailResolutionX",0x502E:"ThumbnailResolutionY",0x502F:"ThumbnailPlanarConfig",0x5030:"ThumbnailResolutionUnit",0x5031:"ThumbnailTransferFunction",0x5032:"ThumbnailSoftwareUsed",0x5033:"ThumbnailDateTime",0x5034:"ThumbnailArtist",0x5035:"ThumbnailWhitePoint"
,0x5036:"ThumbnailPrimaryChromaticities",0x5037:"ThumbnailYCbCrCoefficients",0x5038:"ThumbnailYCbCrSubsampling",0x5039:"ThumbnailYCbCrPositioning",0x503A:"ThumbnailRefBlackWhite",0x503B:"ThumbnailCopyRight",0x5090:"LuminanceTable",0x5091:"ChrominanceTable",0x5102:"Global Palette",0x5103:"Index Background",0x5104:"Index Transparent",0x5113:"Palette Histogram",0x8769:"ExifIFD",0x8825:"GpsIFD",0x8828:"ExifOECF",0x9000:"ExifVer",0x9101:"EXIF CompConfig",0x9290:"EXIF DTSubsec",0x9291:"EXIF DTOrigSS",0x9292:"EXIF DTDigSS",0xA000:"EXIF FPXVer",0xA20C:"EXIF Spatial FR",0xA302:"EXIF CfaPattern"}
r := PropTagsA.HasKey(PropID) ? PropTagsA[PropID] : "Unknown"
If (r="Unknown")
r := PropTagsB.HasKey(PropID) ? PropTagsB[PropID] : "Unknown"
Return r
}
Gdip_GetPropertyTagType(PropType) {
Static PropTypes := {1: "Byte", 2: "ASCII", 3: "Short", 4: "Long", 5: "Rational", 7: "Undefined", 9: "SLong", 10: "SRational"}
Return PropTypes.HasKey(PropType) ? PropTypes[PropType] : "Unknown"
}
Gdip_GetPropertyItemValue(ByRef PropVal, PropLen, PropType, PropAddr) {
PropVal := ""
If (PropType = 2)
{
PropVal := StrGet(PropAddr, PropLen, "CP0")
Return True
}
If (PropType = 3)
{
PropyLen := PropLen // 2
Loop %PropyLen%
PropVal .= (A_Index > 1 ? " " : "") . NumGet(PropAddr + 0, (A_Index - 1) << 1, "Short")
Return True
}
If (PropType = 4) || (PropType = 9)
{
NumType := PropType = 4 ? "UInt" : "Int"
PropyLen := PropLen // 4
Loop %PropyLen%
PropVal .= (A_Index > 1 ? " " : "") . NumGet(PropAddr + 0, (A_Index - 1) << 2, NumType)
Return True
}
If (PropType = 5) || (PropType = 10)
{
NumType := PropType = 5 ? "UInt" : "Int"
PropyLen := PropLen // 8
Loop %PropyLen%
PropVal .= (A_Index > 1 ? " " : "") . NumGet(PropAddr + 0, (A_Index - 1) << 2, NumType)
.  "/" . NumGet(PropAddr + 4, (A_Index - 1) << 2, NumType)
Return True
}
If (PropType = 1) || (PropType = 7)
{
VarSetCapacity(PropVal, PropLen, 0)
DllCall("Kernel32.dll\RtlMoveMemory", "Ptr", &PropVal, "Ptr", PropAddr, "Ptr", PropLen)
Return True
}
Return False
}
Gdip_RotatePathAtCenter(pPath, Angle, MatrixOrder:=1, withinBounds:=0, withinBkeepRatio:=1) {
Rect := Gdip_GetPathWorldBounds(pPath)
cX := Rect.x + (Rect.w / 2)
cY := Rect.y + (Rect.h / 2)
pMatrix := Gdip_CreateMatrix()
Gdip_TranslateMatrix(pMatrix, -cX , -cY)
Gdip_RotateMatrix(pMatrix, Angle, MatrixOrder)
Gdip_TranslateMatrix(pMatrix, cX, cY, MatrixOrder)
E := Gdip_TransformPath(pPath, pMatrix)
Gdip_DeleteMatrix(pMatrix)
If (withinBounds=1 && !E && Angle!=0)
{
nRect := Gdip_GetPathWorldBounds(pPath)
ncX := nRect.x + (nRect.w / 2)
ncY := nRect.y + (nRect.h / 2)
pMatrix := Gdip_CreateMatrix()
Gdip_TranslateMatrix(pMatrix, -ncX , -ncY)
sX := Rect.w / nRect.w
sY := Rect.h / nRect.h
If (withinBkeepRatio=1)
{
sX := min(sX, sY)
sY := min(sX, sY)
}
Gdip_ScaleMatrix(pMatrix, sX, sY, MatrixOrder)
Gdip_TranslateMatrix(pMatrix, ncX, ncY, MatrixOrder)
If (sX!=0 && sY!=0)
E := Gdip_TransformPath(pPath, pMatrix)
Gdip_DeleteMatrix(pMatrix)
}
Return E
}
Gdip_ResetMatrix(hMatrix) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipResetMatrix", Ptr, hMatrix)
}
Gdip_RotateMatrix(hMatrix, Angle, MatrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipRotateMatrix", Ptr, hMatrix, "float", Angle, "Int", MatrixOrder)
}
Gdip_GetPathWorldBounds(pPath, hMatrix:=0, pPen:=0) {
rData := {}
VarSetCapacity(RectF, 16, 0)
status := DllCall("gdiplus\GdipGetPathWorldBounds", "UPtr", pPath, "UPtr", &RectF, "UPtr", hMatrix, "UPtr", pPen)
If (!status) {
rData.x := NumGet(&RectF, 0, "float")
, rData.y := NumGet(&RectF, 4, "float")
, rData.w := NumGet(&RectF, 8, "float")
, rData.h := NumGet(&RectF, 12, "float")
} Else {
Return status
}
return rData
}
Gdip_ScaleMatrix(hMatrix, ScaleX, ScaleY, MatrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipScaleMatrix", Ptr, hMatrix, "float", ScaleX, "float", ScaleY, "Int", MatrixOrder)
}
Gdip_TranslateMatrix(hMatrix, offsetX, offsetY, MatrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipTranslateMatrix", Ptr, hMatrix, "float", offsetX, "float", offsetY, "Int", MatrixOrder)
}
Gdip_TransformPath(pPath, hMatrix) {
return DllCall("gdiplus\GdipTransformPath", "UPtr", pPath, "UPtr", hMatrix)
}
Gdip_SetMatrixElements(hMatrix, m11, m12, m21, m22, x, y) {
return DllCall("gdiplus\GdipSetMatrixElements", "UPtr", hMatrix, "float", m11, "float", m12, "float", m21, "float", m22, "float", x, "float", y)
}
Gdip_GetMatrixLastStatus(pMatrix) {
return DllCall("gdiplus\GdipGetLastStatus", "UPtr", pMatrix)
}
Gdip_AddPathBeziers(pPath, Points) {
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipAddPathBeziers", "UPtr", pPath, "UPtr", &PointsF, "int", iCount)
}
Gdip_AddPathBezier(pPath, x1, y1, x2, y2, x3, y3, x4, y4) {
return DllCall("gdiplus\GdipAddPathBezier", "UPtr", pPath
, "float", x1, "float", y1, "float", x2, "float", y2
, "float", x3, "float", y3, "float", x4, "float", y4)
}
Gdip_AddPathLines(pPath, Points) {
iCount := CreatePointsF(PointsF, Points)
return DllCall("gdiplus\GdipAddPathLine2", "UPtr", pPath, "UPtr", &PointsF, "int", iCount)
}
Gdip_AddPathLine(pPath, x1, y1, x2, y2) {
return DllCall("gdiplus\GdipAddPathLine", "UPtr", pPath, "float", x1, "float", y1, "float", x2, "float", y2)
}
Gdip_AddPathArc(pPath, x, y, w, h, StartAngle, SweepAngle) {
return DllCall("gdiplus\GdipAddPathArc", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h, "float", StartAngle, "float", SweepAngle)
}
Gdip_AddPathPie(pPath, x, y, w, h, StartAngle, SweepAngle) {
return DllCall("gdiplus\GdipAddPathPie", "UPtr", pPath, "float", x, "float", y, "float", w, "float", h, "float", StartAngle, "float", SweepAngle)
}
Gdip_StartPathFigure(pPath) {
return DllCall("gdiplus\GdipStartPathFigure", "UPtr", pPath)
}
Gdip_ClosePathFigure(pPath) {
return DllCall("gdiplus\GdipClosePathFigure", "UPtr", pPath)
}
Gdip_ClosePathFigures(pPath) {
return DllCall("gdiplus\GdipClosePathFigures", "UPtr", pPath)
}
Gdip_DrawPath(pGraphics, pPen, pPath) {
return DllCall("gdiplus\GdipDrawPath", "UPtr", pGraphics, "UPtr", pPen, "UPtr", pPath)
}
Gdip_ClonePath(pPath) {
pPathClone := 0
DllCall("gdiplus\GdipClonePath", "UPtr", pPath, "UPtr*", pPathClone)
return pPathClone
}
Gdip_PathGradientCreateFromPath(pPath) {
pBrush := 0
DllCall("gdiplus\GdipCreatePathGradientFromPath", "Ptr", pPath, "PtrP", pBrush)
Return pBrush
}
Gdip_PathGradientSetCenterPoint(pBrush, X, Y) {
VarSetCapacity(POINTF, 8)
NumPut(X, POINTF, 0, "Float")
NumPut(Y, POINTF, 4, "Float")
Return DllCall("gdiplus\GdipSetPathGradientCenterPoint", "Ptr", pBrush, "Ptr", &POINTF)
}
Gdip_PathGradientSetCenterColor(pBrush, CenterColor) {
Return DllCall("gdiplus\GdipSetPathGradientCenterColor", "Ptr", pBrush, "UInt", CenterColor)
}
Gdip_PathGradientSetSurroundColors(pBrush, SurroundColors) {
Colors := StrSplit(SurroundColors, "|")
tColors := Colors.Length()
VarSetCapacity(ColorArray, 4 * tColors, 0)
Loop %tColors% {
NumPut(Colors[A_Index], ColorArray, 4 * (A_Index - 1), "UInt")
}
Return DllCall("gdiplus\GdipSetPathGradientSurroundColorsWithCount", "Ptr", pBrush, "Ptr", &ColorArray
, "IntP", tColors)
}
Gdip_PathGradientSetSigmaBlend(pBrush, Focus, Scale:=1) {
Return DllCall("gdiplus\GdipSetPathGradientSigmaBlend", "Ptr", pBrush, "Float", Focus, "Float", Scale)
}
Gdip_PathGradientSetLinearBlend(pBrush, Focus, Scale:=1) {
Return DllCall("gdiplus\GdipSetPathGradientLinearBlend", "Ptr", pBrush, "Float", Focus, "Float", Scale)
}
Gdip_PathGradientSetFocusScales(pBrush, xScale, yScale) {
Return DllCall("gdiplus\GdipSetPathGradientFocusScales", "Ptr", pBrush, "Float", xScale, "Float", yScale)
}
Gdip_AddPathGradient(pGraphics, x, y, w, h, cX, cY, cClr, sClr, BlendFocus, ScaleX, ScaleY, Shape, Angle:=0) {
pPath := Gdip_CreatePath()
If (Shape=1)
Gdip_AddPathRectangle(pPath, x, y, W, H)
Else
Gdip_AddPathEllipse(pPath, x, y, W, H)
zBrush := Gdip_PathGradientCreateFromPath(pPath)
If (Angle!=0)
Gdip_RotatePathGradientAtCenter(zBrush, Angle)
Gdip_PathGradientSetCenterPoint(zBrush, cX, cY)
Gdip_PathGradientSetCenterColor(zBrush, cClr)
Gdip_PathGradientSetSurroundColors(zBrush, sClr)
Gdip_PathGradientSetSigmaBlend(zBrush, BlendFocus)
Gdip_PathGradientSetLinearBlend(zBrush, BlendFocus)
Gdip_PathGradientSetFocusScales(zBrush, ScaleX, ScaleY)
E := Gdip_FillPath(pGraphics, zBrush, pPath)
Gdip_DeleteBrush(zBrush)
Gdip_DeletePath(pPath)
Return E
}
Gdip_CreatePathGradient(Points, WrapMode) {
Static Ptr := "UPtr"
iCount := CreatePointsF(PointsF, Points)
pPathGradientBrush := 0
DllCall("gdiplus\GdipCreatePathGradient", Ptr, &PointsF, "int", iCount, "int", WrapMode, "int*", pPathGradientBrush)
Return pPathGradientBrush
}
Gdip_PathGradientGetGammaCorrection(pPathGradientBrush) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPathGradientGammaCorrection", Ptr, pPathGradientBrush, "int*", result)
If E
return -1
Return result
}
Gdip_PathGradientGetPointCount(pPathGradientBrush) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPathGradientPointCount", Ptr, pPathGradientBrush, "int*", result)
If E
return -1
Return result
}
Gdip_PathGradientGetWrapMode(pPathGradientBrush) {
result := 0
E := DllCall("gdiplus\GdipGetPathGradientWrapMode", "UPtr", pPathGradientBrush, "int*", result)
If E
return -1
Return result
}
Gdip_PathGradientGetRect(pPathGradientBrush) {
rData := {}
VarSetCapacity(RectF, 16, 0)
status := DllCall("gdiplus\GdipGetPathGradientRect", "UPtr", pPathGradientBrush, "UPtr", &RectF)
If (!status) {
rData.x := NumGet(&RectF, 0, "float")
, rData.y := NumGet(&RectF, 4, "float")
, rData.w := NumGet(&RectF, 8, "float")
, rData.h := NumGet(&RectF, 12, "float")
} Else {
Return status
}
return rData
}
Gdip_PathGradientResetTransform(pPathGradientBrush) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipResetPathGradientTransform", Ptr, pPathGradientBrush)
}
Gdip_PathGradientRotateTransform(pPathGradientBrush, Angle, matrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipRotatePathGradientTransform", Ptr, pPathGradientBrush, "float", Angle, "int", matrixOrder)
}
Gdip_PathGradientScaleTransform(pPathGradientBrush, ScaleX, ScaleY, matrixOrder:=0) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipScalePathGradientTransform", Ptr, pPathGradientBrush, "float", ScaleX, "float", ScaleY, "int", matrixOrder)
}
Gdip_PathGradientTranslateTransform(pPathGradientBrush, X, Y, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipTranslatePathGradientTransform", Ptr, pPathGradientBrush, "float", X, "float", Y, "int", matrixOrder)
}
Gdip_PathGradientMultiplyTransform(pPathGradientBrush, hMatrix, matrixOrder:=0) {
Static Ptr := "UPtr"
Return DllCall("gdiplus\GdipMultiplyPathGradientTransform", Ptr, pPathGradientBrush, Ptr, hMatrix, "int", matrixOrder)
}
Gdip_PathGradientSetTransform(pPathGradientBrush, pMatrix) {
return DllCall("gdiplus\GdipSetPathGradientTransform", "UPtr", pPathGradientBrush, "UPtr", pMatrix)
}
Gdip_PathGradientGetTransform(pPathGradientBrush) {
pMatrix := 0
DllCall("gdiplus\GdipGetPathGradientTransform", "UPtr", pPathGradientBrush, "UPtr*", pMatrix)
Return pMatrix
}
Gdip_RotatePathGradientAtCenter(pPathGradientBrush, Angle, MatrixOrder:=1) {
Rect := Gdip_PathGradientGetRect(pPathGradientBrush)
cX := Rect.x + (Rect.w / 2)
cY := Rect.y + (Rect.h / 2)
pMatrix := Gdip_CreateMatrix()
Gdip_TranslateMatrix(pMatrix, -cX , -cY)
Gdip_RotateMatrix(pMatrix, Angle, MatrixOrder)
Gdip_TranslateMatrix(pMatrix, cX, cY, MatrixOrder)
E := Gdip_PathGradientSetTransform(pPathGradientBrush, pMatrix)
Gdip_DeleteMatrix(pMatrix)
Return E
}
Gdip_PathGradientSetGammaCorrection(pPathGradientBrush, UseGammaCorrection) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetPathGradientGammaCorrection", Ptr, pPathGradientBrush, "int", UseGammaCorrection)
}
Gdip_PathGradientSetWrapMode(pPathGradientBrush, WrapMode) {
Static Ptr := "UPtr"
return DllCall("gdiplus\GdipSetPathGradientWrapMode", Ptr, pPathGradientBrush, "int", WrapMode)
}
Gdip_PathGradientGetCenterColor(pPathGradientBrush) {
Static Ptr := "UPtr"
ARGB := 0
E := DllCall("gdiplus\GdipGetPathGradientCenterColor", Ptr, pPathGradientBrush, "uint*", ARGB)
If E
return -1
Return Format("{1:#x}", ARGB)
}
Gdip_PathGradientGetCenterPoint(pPathGradientBrush, ByRef X, ByRef Y) {
Static Ptr := "UPtr"
VarSetCapacity(PointF, 8, 0)
E := DllCall("gdiplus\GdipGetPathGradientCenterPoint", Ptr, pPathGradientBrush, "UPtr", &PointF)
If !E
{
x := NumGet(PointF, 0, "float")
y := NumGet(PointF, 4, "float")
}
Return E
}
Gdip_PathGradientGetFocusScales(pPathGradientBrush, ByRef X, ByRef Y) {
Static Ptr := "UPtr"
x := 0
y := 0
Return DllCall("gdiplus\GdipGetPathGradientFocusScales", Ptr, pPathGradientBrush, "float*", X, "float*", Y)
}
Gdip_PathGradientGetSurroundColorCount(pPathGradientBrush) {
Static Ptr := "UPtr"
result := 0
E := DllCall("gdiplus\GdipGetPathGradientSurroundColorCount", Ptr, pPathGradientBrush, "int*", result)
If E
return -1
Return result
}
Gdip_GetPathGradientSurroundColors(pPathGradientBrush) {
iCount := Gdip_PathGradientGetSurroundColorCount(pPathGradientBrush)
If (iCount=-1)
Return 0
Static Ptr := "UPtr"
VarSetCapacity(sColors, 8 * iCount, 0)
DllCall("gdiplus\GdipGetPathGradientSurroundColorsWithCount", Ptr, pPathGradientBrush, Ptr, &sColors, "intP", iCount)
Loop %iCount%
{
A := NumGet(&sColors, 8*(A_Index-1), "uint")
printList .= Format("{1:#x}", A) ","
}
Return Trim(printList, ",")
}
Gdip_GetHistogram(pBitmap, whichFormat, ByRef newArrayA, ByRef newArrayB, ByRef newArrayC) {
Static sizeofUInt := 4
z := DllCall("gdiplus\GdipBitmapGetHistogramSize", "UInt", whichFormat, "UInt*", numEntries)
newArrayA := [], newArrayB := [], newArrayC := []
VarSetCapacity(ch0, numEntries * sizeofUInt, 0)
VarSetCapacity(ch1, numEntries * sizeofUInt, 0)
VarSetCapacity(ch2, numEntries * sizeofUInt, 0)
If (whichFormat=2)
r := DllCall("gdiplus\GdipBitmapGetHistogram", "Ptr", pBitmap, "UInt", whichFormat, "UInt", numEntries, "Ptr", &ch0, "Ptr", &ch1, "Ptr", &ch2, "Ptr", 0)
Else If (whichFormat>2)
r := DllCall("gdiplus\GdipBitmapGetHistogram", "Ptr", pBitmap, "UInt", whichFormat, "UInt", numEntries, "Ptr", &ch0, "Ptr", 0, "Ptr", 0, "Ptr", 0)
Loop %numEntries%
{
i := A_Index - 1
r := NumGet(&ch0+0, i * sizeofUInt, "UInt")
newArrayA[i] := r
If (whichFormat=2)
{
g := NumGet(&ch1+0, i * sizeofUInt, "UInt")
b := NumGet(&ch2+0, i * sizeofUInt, "UInt")
newArrayB[i] := g
newArrayC[i] := b
}
}
Return r
}
Gdip_DrawRoundedLine(G, x1, y1, x2, y2, LineWidth, LineColor) {
pPen := Gdip_CreatePen(LineColor, LineWidth)
Gdip_DrawLine(G, pPen, x1, y1, x2, y2)
Gdip_DeletePen(pPen)
pPen := Gdip_CreatePen(LineColor, LineWidth/2)
Gdip_DrawEllipse(G, pPen, x1-LineWidth/4, y1-LineWidth/4, LineWidth/2, LineWidth/2)
Gdip_DrawEllipse(G, pPen, x2-LineWidth/4, y2-LineWidth/4, LineWidth/2, LineWidth/2)
Gdip_DeletePen(pPen)
}
Gdip_CreateBitmapFromGdiDib(BITMAPINFO, BitmapData) {
Static Ptr := "UPtr"
pBitmap := 0
E := DllCall("gdiplus\GdipCreateBitmapFromGdiDib", Ptr, BITMAPINFO, Ptr, BitmapData, "UPtr*", pBitmap)
Return pBitmap
}
Gdip_DrawImageFX(pGraphics, pBitmap, dX:="", dY:="", sX:="", sY:="", sW:="", sH:="", matrix:="", pEffect:="", ImageAttr:=0, hMatrix:=0, Unit:=2) {
Static Ptr := "UPtr"
If !ImageAttr
{
if !IsNumber(Matrix)
ImageAttr := Gdip_SetImageAttributesColorMatrix(Matrix)
else if (Matrix != 1)
ImageAttr := Gdip_SetImageAttributesColorMatrix("1|0|0|0|0|0|1|0|0|0|0|0|1|0|0|0|0|0|" Matrix "|0|0|0|0|0|1")
} Else usrImageAttr := 1
if (sX="" && sY="")
sX := sY := 0
if (sW="" && sH="")
Gdip_GetImageDimensions(pBitmap, sW, sH)
if (!hMatrix && dX!="" && dY!="")
{
hMatrix := dhMatrix := Gdip_CreateMatrix()
Gdip_TranslateMatrix(dhMatrix, dX, dY, 1)
}
CreateRectF(sourceRect, sX, sY, sW, sH)
E := DllCall("gdiplus\GdipDrawImageFX"
, Ptr, pGraphics
, Ptr, pBitmap
, Ptr, &sourceRect
, Ptr, hMatrix ? hMatrix : 0
, Ptr, pEffect ? pEffect : 0
, Ptr, ImageAttr ? ImageAttr : 0
, "Uint", Unit)
If dhMatrix
Gdip_DeleteMatrix(dhMatrix)
If (ImageAttr && usrImageAttr!=1)
Gdip_DisposeImageAttributes(ImageAttr)
Return E
}
Gdip_BitmapApplyEffect(pBitmap, pEffect, x:="", y:="", w:="", h:="") {
If InStr(pEffect, "err-")
Return pEffect
If (!x && !y && !w && !h)
{
Gdip_GetImageDimensions(pBitmap, Width, Height)
CreateRectF(RectF, 0, 0, Width, Height)
} Else CreateRectF(RectF, X, Y, W, H)
E := DllCall("gdiplus\GdipBitmapApplyEffect"
, "UPtr", pBitmap
, "UPtr", pEffect
, "UPtr", &RectF
, "UPtr", 0
, "UPtr", 0
, "UPtr", 0)
Return E
}
COM_CLSIDfromString(ByRef CLSID, String) {
VarSetCapacity(CLSID, 16, 0)
E := DllCall("ole32\CLSIDFromString", "WStr", String, "UPtr", &CLSID)
Return E
}
Gdip_CreateEffect(whichFX, paramA, paramB, paramC:=0) {
Static gdipImgFX := {1:"633C80A4-1843-482b-9EF2-BE2834C5FDD4", 2:"63CBF3EE-C526-402c-8F71-62C540BF5142", 3:"718F2615-7933-40e3-A511-5F68FE14DD74", 4:"A7CE72A9-0F7F-40d7-B3CC-D0C02D5C3212", 5:"D3A1DBE1-8EC4-4c17-9F4C-EA97AD1C343D", 6:"8B2DD6C3-EB07-4d87-A5F0-7108E26A9C5F", 7:"99C354EC-2A31-4f3a-8C34-17A803B33A25", 8:"1077AF00-2848-4441-9489-44AD4C2D7A2C", 9:"537E597D-251E-48da-9664-29CA496B70F8", 10:"74D29D05-69A4-4266-9549-3CC52836B632", 11:"DD6A0022-58E4-4a67-9D9B-D48EB881A53D"}
Ptr := A_PtrSize=8 ? "UPtr" : "UInt"
Ptr2 := A_PtrSize=8 ? "Ptr*" : "PtrP"
pEffect := 0
r1 := COM_CLSIDfromString(eFXguid, "{" gdipImgFX[whichFX] "}" )
If r1
Return "err-" r1
If (A_PtrSize=4)
{
r2 := DllCall("gdiplus\GdipCreateEffect"
, "UInt", NumGet(eFXguid, 0, "UInt")
, "UInt", NumGet(eFXguid, 4, "UInt")
, "UInt", NumGet(eFXguid, 8, "UInt")
, "UInt", NumGet(eFXguid, 12, "UInt")
, Ptr2, pEffect)
} Else
{
r2 := DllCall("gdiplus\GdipCreateEffect"
, Ptr, &eFXguid
, Ptr2, pEffect)
}
If r2
Return "err-" r2
VarSetCapacity(FXparams, 16, 0)
If (whichFX=1)
{
NumPut(paramA, FXparams, 0, "Float")
NumPut(paramB, FXparams, 4, "Uchar")
} Else If (whichFX=2)
{
NumPut(paramA, FXparams, 0, "Float")
NumPut(paramB, FXparams, 4, "Float")
} Else If (whichFX=5)
{
NumPut(paramA, FXparams, 0, "Int")
NumPut(paramB, FXparams, 4, "Int")
} Else If (whichFX=6)
{
NumPut(paramA, FXparams, 0, "Int")
NumPut(paramB, FXparams, 4, "Int")
NumPut(paramC, FXparams, 8, "Int")
} Else If (whichFX=7)
{
NumPut(paramA, FXparams, 0, "Int")
NumPut(paramB, FXparams, 4, "Int")
NumPut(paramC, FXparams, 8, "Int")
} Else If (whichFX=8)
{
NumPut(paramA, FXparams, 0, "Int")
NumPut(paramB, FXparams, 4, "Int")
} Else If (whichFX=9)
{
NumPut(paramA, FXparams, 0, "Int")
NumPut(paramB, FXparams, 4, "Int")
NumPut(paramC, FXparams, 8, "Int")
} Else If (whichFX=11)
{
NumPut(paramA, FXparams, 0, "Int")
NumPut(paramB, FXparams, 4, "Int")
NumPut(paramC, FXparams, 8, "Int")
}
DllCall("gdiplus\GdipGetEffectParameterSize", Ptr, pEffect, "uint*", FXsize)
r3 := DllCall("gdiplus\GdipSetEffectParameters", Ptr, pEffect, Ptr, &FXparams, "UInt", FXsize)
If r3
{
Gdip_DisposeEffect(pEffect)
Return "err-" r3
}
Return pEffect
}
Gdip_DisposeEffect(pEffect) {
Static Ptr := "UPtr"
r := DllCall("gdiplus\GdipDeleteEffect", Ptr, pEffect)
Return r
}
GenerateColorMatrix(modus, bright:=1, contrast:=0, saturation:=1, alph:=1, chnRdec:=0, chnGdec:=0, chnBdec:=0) {
Static NTSCr := 0.308, NTSCg := 0.650, NTSCb := 0.095
matrix := ""
If (modus=2)
{
LGA := (bright<=1) ? bright/1.5 - 0.6666 : bright - 1
Ra := NTSCr + LGA
If (Ra<0)
Ra := 0
Ga := NTSCg + LGA
If (Ga<0)
Ga := 0
Ba := NTSCb + LGA
If (Ba<0)
Ba := 0
matrix := Ra "|" Ra "|" Ra "|0|0|" Ga "|" Ga "|" Ga "|0|0|" Ba "|" Ba "|" Ba "|0|0|0|0|0|" alph "|0|" contrast "|" contrast "|" contrast "|0|1"
} Else If (modus=3)
{
Ga := 0, Ba := 0, GGA := 0
Ra := bright
matrix := Ra "|" Ra "|" Ra "|0|0|" Ga "|" Ga "|" Ga "|0|0|" Ba "|" Ba "|" Ba "|0|0|0|0|0|25|0|" GGA+0.01 "|" GGA "|" GGA "|0|1"
} Else If (modus=4)
{
Ra := 0, Ba := 0, GGA := 0
Ga := bright
matrix := Ra "|" Ra "|" Ra "|0|0|" Ga "|" Ga "|" Ga "|0|0|" Ba "|" Ba "|" Ba "|0|0|0|0|0|25|0|" GGA "|" GGA+0.01 "|" GGA "|0|1"
} Else If (modus=5)
{
Ra := 0, Ga := 0, GGA := 0
Ba := bright
matrix := Ra "|" Ra "|" Ra "|0|0|" Ga "|" Ga "|" Ga "|0|0|" Ba "|" Ba "|" Ba "|0|0|0|0|0|25|0|" GGA "|" GGA "|" GGA+0.01 "|0|1"
} Else If (modus=6)
{
matrix := "-1|0|0|0|0|0|-1|0|0|0|0|0|-1|0|0|0|0|0|" alph "|0|1|1|1|0|1"
} Else If (modus=1)
{
bL := bright, aL := alph
G := contrast, sL := saturation
sLi := 1 - saturation
bLa := bright - 1
If (sL>1)
{
z := (bL<1) ? bL : 1
sL := sL*z
If (sL<0.98)
sL := 0.98
y := z*(1 - sL)
mA := z*(y*NTSCr + sL + bLa + chnRdec)
mB := z*(y*NTSCr)
mC := z*(y*NTSCr)
mD := z*(y*NTSCg)
mE := z*(y*NTSCg + sL + bLa + chnGdec)
mF := z*(y*NTSCg)
mG := z*(y*NTSCb)
mH := z*(y*NTSCb)
mI := z*(y*NTSCb + sL + bLa + chnBdec)
mtrx:= mA "|" mB "|" mC "|  0   |0"
. "|" mD "|" mE "|" mF "|  0   |0"
. "|" mG "|" mH "|" mI "|  0   |0"
. "|  0   |  0   |  0   |" aL "|0"
. "|" G  "|" G  "|" G  "|  0   |1"
} Else
{
z := (bL<1) ? bL : 1
tR := NTSCr - 0.5 + bL/2
tG := NTSCg - 0.5 + bL/2
tB := NTSCb - 0.5 + bL/2
rB := z*(tR*sLi+bL*(1 - sLi) + chnRdec)
gB := z*(tG*sLi+bL*(1 - sLi) + chnGdec)
bB := z*(tB*sLi+bL*(1 - sLi) + chnBdec)
rF := z*(NTSCr*sLi + (bL/2 - 0.5)*sLi)
gF := z*(NTSCg*sLi + (bL/2 - 0.5)*sLi)
bF := z*(NTSCb*sLi + (bL/2 - 0.5)*sLi)
rB := rB*z+rF*(1 - z)
gB := gB*z+gF*(1 - z)
bB := bB*z+bF*(1 - z)
If (rB<0)
rB := 0
If (gB<0)
gB := 0
If (bB<0)
bB := 0
If (rF<0)
rF := 0
If (gF<0)
gF := 0
If (bF<0)
bF := 0
mtrx:= rB "|" rF "|" rF "|  0   |0"
. "|" gF "|" gB "|" gF "|  0   |0"
. "|" bF "|" bF "|" bB "|  0   |0"
. "|  0   |  0   |  0   |" aL "|0"
. "|" G  "|" G  "|" G  "|  0   |1"
}
matrix := StrReplace(mtrx, A_Space)
} Else If (modus=0)
{
s1 := contrast
s2 := saturation
s3 := bright
aL := alph
s1 := s2*sin(s1)
sc := 1-s2
r := NTSCr*sc-s1
g := NTSCg*sc-s1
b := NTSCb*sc-s1
rB := r+s2+3*s1
gB := g+s2+3*s1
bB := b+s2+3*s1
mtrx :=   rB "|" r  "|" r  "|  0   |0"
. "|" g  "|" gB "|" g  "|  0   |0"
. "|" b  "|" b  "|" bB "|  0   |0"
. "|  0   |  0   |  0   |" aL "|0"
. "|" s3 "|" s3 "|" s3 "|  0   |1"
matrix := StrReplace(mtrx, A_Space)
} Else If (modus=7)
{
mtrx := "0|0|0|0|0"
. "|0|0|0|0|0"
. "|0|0|0|0|0"
. "|1|1|1|25|0"
. "|0|0|0|0|1"
matrix := StrReplace(mtrx, A_Space)
}
Return matrix
}
Gdip_CompareBitmaps(pBitmapA, pBitmapB, accuracy:=25) {
If (accuracy>99)
accuracy := 100
Else If (accuracy<5)
accuracy := 5
Gdip_GetImageDimensions(pBitmapA, WidthA, HeightA)
Gdip_GetImageDimensions(pBitmapB, WidthB, HeightB)
If (accuracy!=100)
{
pBitmap1 := Gdip_ResizeBitmap(pBitmapA, Floor(WidthA*(accuracy/100)), Floor(HeightA*(accuracy/100)), 0, 5)
pBitmap2 := Gdip_ResizeBitmap(pBitmapB, Floor(WidthB*(accuracy/100)), Floor(HeightB*(accuracy/100)), 0, 5)
} Else
{
pBitmap1 := pBitmapA
pBitmap2 := pBitmapB
}
Gdip_GetImageDimensions(pBitmap1, Width1, Height1)
Gdip_GetImageDimensions(pBitmap2, Width2, Height2)
if (!Width1 || !Height1 || !Width2 || !Height2
|| Width1 != Width2 || Height1 != Height2)
Return -1
E1 := Gdip_LockBits(pBitmap1, 0, 0, Width1, Height1, Stride1, Scan01, BitmapData1)
E2 := Gdip_LockBits(pBitmap2, 0, 0, Width2, Height2, Stride2, Scan02, BitmapData2)
z := 0
Loop %Height1%
{
y++
Loop %Width1%
{
Gdip_FromARGB(Gdip_GetLockBitPixel(Scan01, A_Index-1, y-1, Stride1), A1, R1, G1, B1)
Gdip_FromARGB(Gdip_GetLockBitPixel(Scan02, A_Index-1, y-1, Stride2), A2, R2, G2, B2)
z += Abs(A2-A1) + Abs(R2-R1) + Abs(G2-G1) + Abs(B2-B1)
}
}
Gdip_UnlockBits(pBitmap1, BitmapData1), Gdip_UnlockBits(pBitmap2, BitmapData2)
If (accuracy!=100)
{
Gdip_DisposeImage(pBitmap1)
Gdip_DisposeImage(pBitmap2)
}
Return z/(Width1*Width2*3*255/100)
}
Gdip_RetrieveBitmapChannel(pBitmap, channel) {
Gdip_GetImageDimensions(pBitmap, imgW, imgH)
If (!imgW || !imgH)
Return
If (channel=1)
matrix := GenerateColorMatrix(3)
Else If (channel=2)
matrix := GenerateColorMatrix(4)
Else If (channel=3)
matrix := GenerateColorMatrix(5)
Else If (channel=4)
matrix := GenerateColorMatrix(0,0.5,0,0.05)
Else Return
newBitmap := Gdip_CreateBitmap(imgW, imgH)
If !newBitmap
Return
G := Gdip_GraphicsFromImage(newBitmap, 7)
Gdip_GraphicsClear(G, "0xff000000")
Gdip_DrawImage(G, pBitmap, 0, 0, imgW, imgH, 0, 0, imgW, imgH, matrix)
Gdip_DeleteGraphics(G)
Return newBitmap
}
Gdip_RenderPixelsOpaque(pBitmap, pBrush:=0, alphaLevel:=0) {
Gdip_GetImageDimensions(pBitmap, imgW, imgH)
newBitmap := Gdip_CreateBitmap(imgW, imgH)
G := Gdip_GraphicsFromImage(newBitmap)
Gdip_SetInterpolationMode(G, 7)
If alphaLevel
matrix := GenerateColorMatrix(0, 0, 0, 1, alphaLevel)
Else
matrix := GenerateColorMatrix(0, 0, 0, 1, 25)
If pBrush
Gdip_FillRectangle(G, pBrush, 0, 0, imgW, imgH)
Gdip_DrawImage(G, pBitmap, 0, 0, imgW, imgH, 0, 0, imgW, imgH, matrix)
Gdip_DeleteGraphics(G)
Return newBitmap
}
Gdip_TestBitmapUniformity(pBitmap, HistogramFormat:=3, ByRef maxLevelIndex:=0, ByRef maxLevelPixels:=0) {
LevelsArray := []
maxLevelIndex := maxLevelPixels := nrPixels := 9
Gdip_GetImageDimensions(pBitmap, Width, Height)
Gdip_GetHistogram(pBitmap, HistogramFormat, LevelsArray, 0, 0)
Loop 256
{
nrPixels := Round(LevelsArray[A_Index - 1])
If (nrPixels>0)
histoList .= nrPixels "." A_Index - 1 "|"
}
Sort histoList, NURD|
histoList := Trim(histoList, "|")
histoListSortedArray := StrSplit(histoList, "|")
maxLevel := StrSplit(histoListSortedArray[1], ".")
maxLevelIndex := maxLevel[2]
maxLevelPixels := maxLevel[1]
pixelsThreshold := Round((Width * Height) * 0.0005) + 1
If (Floor(histoListSortedArray[2])<pixelsThreshold)
Return 1
Else
Return 0
}
Gdip_SetAlphaChannel(pBitmap, pBitmapMask, invertAlphaMask:=0, replaceSourceAlphaChannel:=0, whichChannel:=1) {
static mCodeFunc := 0
if (mCodeFunc=0)
{
if (A_PtrSize=8)
base64enc := "
      (LTrim Join
      2,x64:QVdBVkFVQVRVV1ZTRItsJGhJicuLTCR4SInWg/kBD4TZAQAAg/kCD4SyAAAAg/kDD4TRAQAAg/kEuBgAAAAPRMiDfCRwAQ+EowAAAEWFwA+OZgEAAEWNcP9NY8Ax7UG8/wAAAEqNHIUAAAAAMf9mkEWFyX5YQYP9AQ+E2QAAAEyNB
      K0AAAAAMdIPH4AAAAAAR4sUA0KLBAZFidfT+EHB7xgPtsBCjYQ4Af///4XAD0jHQYHi////AIPCAcHgGEQJ0EOJBANJAdhBOdF1w0iNRQFMOfUPhOEAAABIicXrkYN8JHABuQgAAAAPhV3///9FhcAPjsMAAABBjXj/TWPAMdtOjRSFAAAA
      AA8fgAAAAABFhcl+MUGD/QEPhLEAAABIjQSdAAAAAEUxwGYPH0QAAIsUBkGDwAHT+kGIVAMDTAHQRTnBdepIjUMBSDnfdGxIicPrvA8fQABIjRStAAAAAEUxwA8fRAAARYsUE4sEFkWJ19P4QcHvGA+2wEKNhDgB////RYnnhcAPSMdBgeL
      ///8AQYPAAUEpx0SJ+MHgGEQJ0EGJBBNIAdpFOcF1ukiNRQFMOfUPhR////+4AQAAAFteX11BXEFdQV5BX8MPHwBIjRSdAAAAAEUxwA8fRAAAiwQWQYPAAdP499BBiEQTA0wB0kU5wXXo6Un///+5EAAAAOk6/v//McnpM/7//w==
)"
else
base64enc := "
      (LTrim Join
      2,x86:VVdWU4PsBIN8JDABD4T1AQAAg3wkMAIPhBwBAACDfCQwAw+E7AEAAIN8JDAEuBgAAAAPRUQkMIlEJDCDfCQsAQ+EBgEAAItUJCCF0g+OiQAAAItEJCDHBCQAAAAAjSyFAAAAAI10JgCLRCQkhcB+XosEJItcJBgx/400hQAAAAAB8wN0JByDfCQ
      oAXRjjXYAixOLBg+2TCQw0/iJ0cHpGA+2wI2ECAH///+5AAAAAIXAD0jBgeL///8Ag8cBAe7B4BgJwokTAes5fCQkdcKDBCQBiwQkOUQkIHWNg8QEuAEAAABbXl9dw420JgAAAACQixOLBg+2TCQw0/iJ0cHpGA+2wI2ECAH///+5AAAAAIXAD0jBuf8A
      AACB4v///wAB7oPHASnBicjB4BgJwokTAes5fCQkdbnrlYN8JCwBx0QkMAgAAAAPhfr+//+LTCQghcl+hzH/i0QkIItsJCSJPCSLTCQwjTSFAAAAAI10JgCF7X42g3wkKAGLBCR0Sot8JByNFIUAAAAAMdsB1wNUJBiNtCYAAAAAiweDwwEB99P4iEIDA
      fI53XXugwQkAYsEJDlEJCB1uYPEBLgBAAAAW15fXcONdCYAi1wkHMHgAjHSAcMDRCQYiceNtCYAAAAAiwODwgEB89P499CIRwMB9znVdeyDBCQBiwQkOUQkIA+Fa////+uwx0QkMBAAAADpJ/7//8dEJDAAAAAA6Rr+//8=
)"
mCodeFunc := Gdip_RunMCode(base64enc)
}
Gdip_GetImageDimensions(pBitmap, w, h)
Gdip_GetImageDimensions(pBitmapMask, w2, h2)
If (w2!=w || h2!=h || !pBitmap || !pBitmapMask)
Return 0
Gdip_LockBits(pBitmap, 0, 0, w, h, stride, iScan, iData)
Gdip_LockBits(pBitmapMask, 0, 0, w, h, stride, mScan, mData)
r := DllCall(mCodeFunc, "UPtr", iScan, "UPtr", mScan, "Int", w, "Int", h, "Int", invertAlphaMask, "Int", replaceSourceAlphaChannel, "Int", whichChannel)
Gdip_UnlockBits(pBitmapMask, mData)
Gdip_UnlockBits(pBitmap, iData)
return r
}
Gdip_BlendBitmaps(pBitmap, pBitmap2Blend, blendMode) {
static mCodeFunc := 0
if (mCodeFunc=0)
{
if (A_PtrSize=8)
base64enc := "
      (LTrim Join
      2,x64:QVdBVkFVQVRVV1ZTSIHsiAAAAA8pdCQgDyl8JDBEDylEJEBEDylMJFBEDylUJGBEDylcJHBEi6wk8AAAAEiJlCTYAAAASInORYXAD46XBAAARYXJD46OBAAAQY1A/01jwGYP7+TzDxA9AAAAAEiJRCQQRA8o3EQPKNRFic5OjSSFAAAAAEQPKM9EDyjHSMdEJAgAAAAASItEJAhNiedmkGYP7/ZMjQSFAAAAAEUx0g8o7mYPH0QAAEKLDAaFyQ+E5QEAAEiLhCTYAAAAQYnJQcHpGEKLHACJ2MHoGE
      E4wUQPQ8hFhMkPhPQBAACJ2InaD7btRA+228HoCMHqEIlEJBgPtscPtvpBicSJyA+2ycHoEA+2wEGD/QEPhAEBAABBg/0CD4QHAgAAQYP9Aw+EnQIAAEGD/QQPhPMCAABBg/0FD4RhAwAAQYP9Bg+E1wMAAEGD/QcPhJQEAABBg/0ID4TPBAAAQYP9CQ+ETAUAAEGD/QoPhEUGAABBg/0LD4RnBwAAQYP9DA+E6gYAAEGD/Q0PhMkHAABBg/0OD4T5CAAAQYP9Dw+EXQgAAEGD/RAPhKgJAABBg/0RD4TYCQ
      AAQYP9Eg+FqQEAALr/AAAAOccPjkUKAAAp+mYP78kpwvMPKsq4/wAAAEE57A+OGQoAAEQp4GYP79Ip6PMPKtC4/wAAAEE5yw+O7AkAAEQp2GYP78ApyPMPKsDpVQEAAA8fADnHD42YAQAAZg/vyfMPKs9BOewPjXcBAABmD+/S80EPKtRBOcsPjU0BAABmD+/AZg/v2/NBDyrDDy/YdgTzD1jHDy/ZD4eWAAAA8w8swQ+2wMHgEA8v2onCD4ePAAAA8w8s2g+228HjCA8v2A+HigAAAPMPLMAPtsAJ0EHB4R
      hBCcFBCdlGiQwGQYPCAU0B+EU51g+F//3//0iLfCQISI1HAUg5fCQQD4QbAgAASIlEJAjpyf3//2YPH4QAAAAAAEGDwgFCxwQGAAAAAE0B+EU51g+FwP3//+u/Zg8fRAAAMdIPL9oPKMsPhnH///8x2w8v2A8o0w+Gdv///zHADyjD6XP///9mLg8fhAAAAAAAD6/4Zg/vyWYP79JBD6/sZg/vwEEPr8uJ+L+BgICASA+vx0gPr+9ID6/PSMHoJ0jB7SfzDyrISMHpJ/MPKtXzDyrBDy/hDyjcdgXzQQ9YyQ
      8v2g+G0P7///NBD1jQ6cb+//9mDx9EAABmD+/ADyjd8w8qwemw/v//Dx+EAAAAAABmD+/S8w8q1emF/v//Dx8AZg/vyfMPKsjpY/7//w8fAAHHZg/vyWYP79K6/wAAAIH//wAAAGYP78APTPpEAeWB7/8AAACB/f8AAAAPTOrzDyrPRAHZge3/AAAAgfn/AAAAD0zK8w8q1YHp/wAAAPMPKsHpS////2YPH4QAAAAAALv/AAAAZg/vyWYP79KDxwGJ2mYP78APKN4pwonQweAIKdCZ9/+J2jH/KcKJ0InaD0
      jHKepBjWwkAfMPKsiJ0MHgCCnQmff9idopwonQidoPSMcpykGDwwHzDyrQidDB4Agp0JlB9/spww9I3/MPKsPpxf3//w8fADnHD44yAQAAZg/vyfMPKs9BOewPjhQBAABmD+/S80EPKtRBOcsPjvEAAABmD+/AZg/v2/NBDyrD6Zr+//8PHwAPKHQkIA8ofCQwuAEAAABEDyhEJEBEDyhMJFBEDyhUJGBEDyhcJHBIgcSIAAAAW15fXUFcQV1BXkFfww8fRAAAuv8AAABmD+/JZg/v0onTKfuJ1ynHifgPr8
      NIY9hIaduBgICASMHrIAHDwfgfwfsHKdiJ0wX/AAAARCnj8w8qyInQKegPr8NIY9hIaduBgICASMHrIAHDwfgfwfsHKdgF/wAAAPMPKtCJ0CnKRCnYD6/CSGPQZg/vwEhp0oGAgIBIweogAcLB+B/B+gcp0AX/AAAA8w8qwOmu/f//Zg/vwEEPKNrzDyrB6ar9//9mD+/S8w8q1eno/v//Zg/vyfMPKsjpyf7//2YP78lmD+/SZg/vwAHHgf//AAAAuP8AAAAPT/hEAeWB/f8AAAAPT+jzDyrPRAHZgfn/AA
      AAD0/I8w8q1fMPKsHpPv3//4P/fg+PRgEAAA+vx7+BgICAZg/vyQHASA+vx0jB6CfzDyrIQYP8fg+P5gAAAEEPr+y/gYCAgGYP79KNRC0ASA+vx0jB6CfzDyrQQYP7fn8hQQ+vy7+BgICAZg/vwI0ECUgPr8dIwegn8w8qwOnN/P//uv8AAACJ0CnKRCnYD6/CAcDp3/7//4P4fg+OVQEAALr/AAAAZg/vyYnTKcIp+w+v040EEkhj0Ehp0oGAgIBIweogAcLB+B/B+gcp0AX/AAAA8w8qyIP9fg+POQEAAE
      SJ4L+BgICAZg/v0g+vxQHASA+vx0jB6CfzDyrQg/l+f4BEidi/gYCAgGYP78APr8EBwEgPr8dIwegn8w8qwOkr/P//uv8AAABmD+/SidAp6kQp4A+v0I0EEkhj0Ehp0oGAgIBIweogAcLB+B/B+gcp0AX/AAAA8w8q0On7/v//uv8AAABmD+/JidMpwin7D6/TjQQSSGPQSGnSgYCAgEjB6iABwsH4H8H6BynQBf8AAADzDyrI6Zn+//+6/wAAACnCOfoPjYgBAADzDxANAAAAALoAAP8AuP8AAAAp6EQ54A
      +NYAEAAPMPEBUAAAAAuwD/AAC4/wAAACnIRDnYD404AQAA8w8QBQAAAAC4/wAAAOmA+v//D6/Hv4GAgIBmD+/JAcBID6/HSMHoJ/MPKsiD/X4Pjsf+//+4/wAAAGYP79KJwinoRCniD6/CAcBIY9BIadKBgICASMHqIAHCwfgfwfoHKdAF/wAAAPMPKtDpqf7//4nCZg/vyWYP79K7AAEAAMHiCCn7Zg/vwL8AAQAAKcKJ0Jn3+7v/AAAAPf8AAAAPT8NEKedBvAABAADzDyrIiejB4Agp6Jn3/z3/AAAAD0
      /DRSnc8w8q0InIweAIKciZQff8Pf8AAAAPT8PzDyrA6Yj6//+NBHhmD+/JZg/v0rr+AQAAPf4BAABmD+/AD0/CLf8AAADzDyrIQo1EZQA9/gEAAA9Pwi3/AAAA8w8q0EKNBFk9/gEAAA9Pwi3/AAAA8w8qwOkz+v//McBmD+/A6U/5//8x22YP79Lpov7//zHSZg/vyel6/v//geKAAAAAiVQkHA+E+AAAAInCZg/vycHiCCnCuAABAAAp+I08AInQmff/uv8AAAA9/wAAAA9PwvMPKsiBZCQYgAAAAA+Fhg
      EAAL//AAAAZg/v0on6KeqJ1cHlCInoQ41sJAEp0Jn3/SnHD0h8JBjzDyrXgeOAAAAAD4UjAQAAv/8AAABmD+/AifopykONTBsBidDB4Agp0Jn3+SnHD0j78w8qx+lq+f//jRQHZg/vyWYP79IPr8e/gYCAgGYP78BID6/HSMHoJwHAKcJEieAPr8XzDyrKQY0ULEgPr8dIwegnAcApwkSJ2A+vwfMPKtJBjRQLSA+vx0jB6CcBwCnC8w8qwukK+f//uv8AAACNfD8BZg/vySnCidDB4ggpwonQmff/v/8AAA
      Apx4n4D0hEJBzzDyrI6QH///+JwoPHAWYP78m7/wAAAMHiCGYP79JmD+/AKcKJ0Jn3/0GNfCQBPf8AAAAPT8PzDyrIiejB4Agp6Jn3/z3/AAAAD0/DQYPDAfMPKtCJyMHgCCnImUH3+z3/AAAAD0/D8w8qwOlx+P//ichmD+/AweAIKci5AAEAAEQp2ZkByff5uv8AAAA9/wAAAA9PwvMPKsDpQ/j//4novwABAABmD+/SweAIRCnnKegB/5n3/7r/AAAAPf8AAAAPT8LzDyrQ6XX+//85xw+OgwAAACnHZg
      /vyfMPKs9BOex+Z0SJ4GYP79Ip6PMPKtBBOct+RUEpy2YP78DzQQ8qw+nb9///Zg/vyWYP79JmD+/AMdIp+EEPKNsPSMJEKeUPSOpEKdnzDyrID0jK8w8q1fMPKsHpn/b//0Qp2WYP78DzDyrB6Zf3//9EKeVmD+/S8w8q1euZKfhmD+/J8w8qyOl4////KchmD+/ARCnY8w8qwOlp9///KehmD+/SRCng8w8q0Oni9f//KcJmD+/JidAp+PMPKsjptPX//5CQAAB/Qw==
)"
else
base64enc := "
      (LTrim Join
      2,x86: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
      QkDOkJ9///
)"
mCodeFunc := Gdip_RunMCode(base64enc)
}
Gdip_GetImageDimensions(pBitmap, w, h)
Gdip_GetImageDimensions(pBitmap2Blend, w2, h2)
If (w2!=w || h2!=h || !pBitmap || !pBitmap2Blend)
Return 0
Gdip_LockBits(pBitmap, 0, 0, w, h, stride, iScan, iData)
Gdip_LockBits(pBitmap2Blend, 0, 0, w, h, stride, mScan, mData)
r := DllCall(mCodeFunc, "UPtr", iScan, "UPtr", mScan, "Int", w, "Int", h, "Int", blendMode)
Gdip_UnlockBits(pBitmap2Blend, mData)
Gdip_UnlockBits(pBitmap, iData)
return r
}
Gdip_BoxBlurBitmap(pBitmap, passes) {
static mCodeFunc := 0
if (mCodeFunc=0)
{
if (A_PtrSize=8)
base64enc := "
      (LTrim Join
      2,x64:QVdBVkFVQVRVV1ZTSIPsWESLnCTAAAAASImMJKAAAABEicCJlCSoAAAARImMJLgAAABFhdsPjtoDAABEiceD6AHHRCQ8AAAAAEG+q6qqqkEPr/lBD6/BiXwkBInXg+8BiUQkJIn4iXwkOEiNdIEESPfYSIl0JEBIjTSFAAAAAI0EvQAAAABJY/lImEiJdCRISI1EBvxIiXwkCEiJRCQwRInI99hImEiJRCQQDx9EAABIi0QkQMdEJCAAAAAASIlEJBhIi0QkSEiD6ARIiUQkKItEJASFwA+OegEAAA8fQABEi4wkqAAAAEWFyQ+OPwMAAEiLRCQoTIt8JBgx9jHbRTHbRTHSRTHJRTHATAH4Mckx0mYPH0QAAEWJ1UQPtlADRYn
      cRA+2WAJEAepEAeGJ3Q+2WAFEAdJBAeiJ9w+2MEkPr9ZBAflIg8AESMHqIYhQ/0KNFBlEieFJD6/WSMHqIYhQ/kGNFBhBiehJD6/WSMHqIYhQ/UGNFDFBiflJD6/WSMHqIYhQ/ESJ6kw5+HWJi3wkOEiLRCQwMfYx20gDRCQYRTHbRTHSRTHJRTHAMckx0g8fgAAAAABFiddED7ZQA0WJ3UQPtlgCRAH6RAHpQYncD7ZYAUQB0kUB4In1D7YwSQ+v1kEB6YPvAUiD6ARIweohiFAHQo0UGUSJ6UkPr9ZIweohiFAGQY0UGEWJ4EkPr9ZIweohiFAFQY0UMUGJ6UkPr9ZIweohiFAERIn6g///dYWLvCS4AAAASItcJAgBfCQgi0QkIEgB
      XCQYO0QkBA+Miv7//0SLhCSoAAAAx0QkGAMAAADHRCQgAAAAAEWFwA+OiAEAAGYPH4QAAAAAAItUJASF0g+OpAAAAEhjRCQYMf8x9jHbSAOEJKAAAABFMdtFMdIxyUUxyUUxwDHSkEWJ10QPthBFid1ED7ZY/0QB+kQB6UGJ3A+2WP5EAdJFAeCJ9Q+2cP1JD6/WQQHpA7wkuAAAAEjB6iGIEEKNFBlEielJD6/WSMHqIYhQ/0GNFBhFieBJD6/WSMHqIYhQ/kGNFDFBielJD6/WSMHqIYhQ/UgDRCQIRIn6O3wkBHyAi0wkJIXJD4ioAAAATGNUJCRIY0QkGDH/MfYx20Ux20UxyUUxwEwB0DHJSAOEJKAAAAAx0g8fQABFid9ED7YYQ
      YndD7ZY/0QB+kQB6UGJ9A+2cP5EAdpFAeCJ/Q+2eP1JD6/WQQHpSMHqIYgQjRQZSItMJBBJD6/WSQHKSMHqIYhQ/0GNFDBFieBJD6/WSMHqIYhQ/kGNFDlBielJD6/WSMHqIYhQ/UgByESJ+kSJ6UWF0nmEg0QkIAGLRCQgg0QkGAQ5hCSoAAAAD4WB/v//g0QkPAGLRCQ8OYQkwAAAAA+Fm/z//0iDxFhbXl9dQVxBXUFeQV/DZi4PH4QAAAAAAESLVCQ4RYXSD4j1/f//6Uz9//8=
)"
else
base64enc := "
      (LTrim Join
      2,x86:VVdWU4PsPItsJGCLRCRYhe0PjncEAACLfCRcx0QkNAAAAAAPr/iD6AEPr0QkXIl8JCSLfCRUiUQkLItEJFCD7wGJfCQwi3wkVI0EuIlEJDiLRCQ4x0QkKAAAAACJRCQgi0QkJIXAD47pAQAAjXQmAIt0JFSF9g+OJAQAAMdEJAwAAAAAi0wkKDHtMf/HRCQYAAAAAANMJFAx9jHAx0QkFAAAAADHRCQQAAAAAI10JgCLVCQMD7ZZA4k0JIPBBA+2cf6JfCQEiVQkHAHCD7Z5/QHaiVwkDLurqqqqidCJbCQID7Zp/Pfji1wkEAMcJNHqiFH/idq7q6qqqgHyidD344tcJBQDXCQE0eqIUf6J2rurqqqqAfqJ0Pfj0eqIUf2LVCQ
      YA1QkCAHqidD344scJItEJByJXCQQi1wkBNHqiVwkFItcJAiIUfyJXCQYO0wkIA+FWf///4tEJDDHBCQAAAAAMe0x/8dEJBwAAAAAi0wkIDH2x0QkGAAAAADHRCQUAAAAAIlEJAQxwI22AAAAAIscJA+2Uf+JdCQIg+kED7ZxAol8JAyJFCSNFBgDFCSJ0LqrqqqqD7Z5AYlsJBD34g+2KYNsJAQB0eqIUQOLVCQUA1QkCAHyidC6q6qqqvfi0eqIUQKLVCQYA1QkDAH6idC6q6qqqvfi0eqIUQGLVCQcA1QkEAHqidC6q6qqqvfiidiLXCQIiVwkFItcJAzR6ogRi1QkBIlcJBiLXCQQiVwkHIP6/w+FVf///4t8JFwBfCQoAXwkIItE
      JCg7RCQkD4wb/v//i0QkUItcJFTHRCQoAAAAAPfYiUQkDIXbD44IAgAAjXQmAJCLVCQkhdIPjugAAAAx9otMJAzHRCQIAAAAADHtx0QkGAAAAAAx/zHAx0QkFAAAAAD32cdEJBAAAAAAiTQkjXYAi1QkCA+2cQOJfCQEixwkD7Z5AYlUJCABwgHyiXQkCL6rqqqqidCJXCQcD7ZZAvfmi3QkHItEJBCJHCSJ6w+2KQHwiXQkEIt0JAzR6ohRA4sUJAHCidC6q6qqqvfii0QkFANEJATR6ohRAonCAfqJ0Lqrqqqq9+KLRCQYiVwkGAHY0eqIUQGJwgHqidC6q6qqqvfii0QkINHqiBGLVCQEA0wkXIlUJBSNFDE5VCQkD49M////i0wkL
      IXJD4jrAAAAMfbHRCQQAAAAAItMJCwx7cdEJBwAAAAAK0wkDDH/McDHRCQYAAAAAMdEJBQAAAAAiTQkjXQmAJCLHCSLVCQQiXwkBA+2cQMPtnkBiWwkCIlcJCAPtlkCiXQkEA+2KYkcJInTAcIB8r6rqqqqidD35ot0JCCLRCQUAfCJdCQUi3QkDNHqiFEDixQkAcKJ0Lqrqqqq9+KLRCQYA0QkBNHqiFECicIB+onQuquqqqr34otEJBwDRCQI0eqIUQGJwgHqidC6q6qqqvfiidjR6ogRi1QkBCtMJFyJVCQYi1QkCAHOiVQkHA+JTf///4NEJCgBi0QkKINsJAwEOUQkVA+F/f3//4NEJDQBi0QkNDlEJGAPhcL7//+DxDxbXl9dw4
      20JgAAAACNdgCLfCQwhf8PiI/9///ppvz//w==
)"
mCodeFunc := Gdip_RunMCode(base64enc)
}
Gdip_GetImageDimensions(pBitmap,w,h)
Gdip_LockBits(pBitmap,0,0,w,h,stride,iScan,iData)
r := DllCall(mCodeFunc, "UPtr",iScan, "Int",w, "Int",h, "Int",stride, "Int",passes)
Gdip_UnlockBits(pBitmap,iData)
return r
}
Gdip_RunMCode(mcode) {
static e := {1:4, 2:1}
, c := (A_PtrSize=8) ? "x64" : "x86"
if (!regexmatch(mcode, "^([0-9]+),(" c ":|.*?," c ":)([^,]+)", m))
return
if (!DllCall("crypt32\CryptStringToBinary", "str", m3, "uint", StrLen(m3), "uint", e[m1], "ptr", 0, "uintp", s, "ptr", 0, "ptr", 0))
return
p := DllCall("GlobalAlloc", "uint", 0, "ptr", s, "ptr")
DllCall("VirtualProtect", "ptr", p, "ptr", s, "uint", 0x40, "uint*", op)
if (DllCall("crypt32\CryptStringToBinary", "str", m3, "uint", StrLen(m3), "uint", e[m1], "ptr", p, "uint*", s, "ptr", 0, "ptr", 0))
return p
DllCall("GlobalFree", "ptr", p)
}
calcIMGdimensions(imgW, imgH, givenW, givenH, ByRef ResizedW, ByRef ResizedH) {
PicRatio := Round(imgW/imgH, 5)
givenRatio := Round(givenW/givenH, 5)
If (imgW <= givenW) && (imgH <= givenH)
{
ResizedW := givenW
ResizedH := Round(ResizedW / PicRatio)
If (ResizedH>givenH)
{
ResizedH := (imgH <= givenH) ? givenH : imgH
ResizedW := Round(ResizedH * PicRatio)
}
} Else If (PicRatio > givenRatio)
{
ResizedW := givenW
ResizedH := Round(ResizedW / PicRatio)
} Else
{
ResizedH := (imgH >= givenH) ? givenH : imgH
ResizedW := Round(ResizedH * PicRatio)
}
}
GetWindowRect(hwnd, ByRef W, ByRef H) {
size := VarSetCapacity(rect, 16, 0)
er := DllCall("dwmapi\DwmGetWindowAttribute"
, "UPtr", hWnd
, "UInt", 9
, "UPtr", &rect
, "UInt", size
, "UInt")
If er
DllCall("GetWindowRect", "UPtr", hwnd, "UPtr", &rect, "UInt")
r := []
r.x1 := NumGet(rect, 0, "Int"), r.y1 := NumGet(rect, 4, "Int")
r.x2 := NumGet(rect, 8, "Int"), r.y2 := NumGet(rect, 12, "Int")
r.w := Abs(max(r.x1, r.x2) - min(r.x1, r.x2))
r.h := Abs(max(r.y1, r.y2) - min(r.y1, r.y2))
W := r.w
H := r.h
Return r
}
Gdip_BitmapConvertGray(pBitmap, hue:=0, vibrance:=-40, brightness:=1, contrast:=0, KeepPixelFormat:=0) {
Gdip_GetImageDimensions(pBitmap, Width, Height)
If (KeepPixelFormat=1)
PixelFormat := Gdip_GetImagePixelFormat(pBitmap, 1)
If StrLen(KeepPixelFormat)>3
PixelFormat := KeepPixelFormat
newBitmap := Gdip_CreateBitmap(Width, Height, PixelFormat)
G := Gdip_GraphicsFromImage(newBitmap, InterpolationMode)
If (hue!=0 || vibrance!=0)
pEffect := Gdip_CreateEffect(6, hue, vibrance, 0)
matrix := GenerateColorMatrix(2, brightness, contrast)
If pEffect
{
E := Gdip_DrawImageFX(G, pBitmap, 0, 0, 0, 0, Width, Height, matrix, pEffect)
Gdip_DisposeEffect(pEffect)
} Else
E := Gdip_DrawImage(G, pBitmap, 0, 0, Width, Height, 0, 0, Width, Height, matrix)
Gdip_DeleteGraphics(G)
Return newBitmap
}
Gdip_BitmapSetColorDepth(pBitmap, bitsDepth, useDithering:=1) {
ditheringMode := (useDithering=1) ? 9 : 1
If (useDithering=1 && bitsDepth=16)
ditheringMode := 2
Colors := 2**bitsDepth
If bitsDepth Between 2 and 4
bitsDepth := "40s"
If bitsDepth Between 5 and 8
bitsDepth := "80s"
If (bitsDepth="BW")
E := Gdip_BitmapConvertFormat(pBitmap, 0x30101, ditheringMode, 2, 2, 2, 2, 0, 0)
Else If (bitsDepth=1)
E := Gdip_BitmapConvertFormat(pBitmap, 0x30101, ditheringMode, 1, 2, 1, 2, 0, 0)
Else If (bitsDepth="40s")
E := Gdip_BitmapConvertFormat(pBitmap, 0x30402, ditheringMode, 1, Colors, 1, Colors, 0, 0)
Else If (bitsDepth="80s")
E := Gdip_BitmapConvertFormat(pBitmap, 0x30803, ditheringMode, 1, Colors, 1, Colors, 0, 0)
Else If (bitsDepth=16)
E := Gdip_BitmapConvertFormat(pBitmap, 0x21005, ditheringMode, 1, Colors, 1, Colors, 0, 0)
Else If (bitsDepth=24)
E := Gdip_BitmapConvertFormat(pBitmap, 0x21808, 2, 1, 0, 0, 0, 0, 0)
Else If (bitsDepth=32)
E := Gdip_BitmapConvertFormat(pBitmap, 0x26200A, 2, 1, 0, 0, 0, 0, 0)
Else
E := -1
Return E
}
Gdip_BitmapConvertFormat(pBitmap, PixelFormat, DitherType, DitherPaletteType, PaletteEntries, PaletteType, OptimalColors, UseTransparentColor:=0, AlphaThresholdPercent:=0) {
VarSetCapacity(hPalette, 4 * PaletteEntries + 8, 0)
NumPut(PaletteType, &hPalette, 0, "uint")
NumPut(PaletteEntries, &hPalette, 4, "uint")
NumPut(0, &hPalette, 8, "uint")
Static Ptr := "UPtr"
E1 := DllCall("gdiplus\GdipInitializePalette", "UPtr", &hPalette, "uint", PaletteType, "uint", OptimalColors, "Int", UseTransparentColor, Ptr, pBitmap)
E2 := DllCall("gdiplus\GdipBitmapConvertFormat", Ptr, pBitmap, "uint", PixelFormat, "uint", DitherType, "uint", DitherPaletteType, "uPtr", &hPalette, "float", AlphaThresholdPercent)
E := E1 ? E1 : E2
Return E
}
Gdip_GetImageThumbnail(pBitmap, W, H) {
DllCall("gdiplus\GdipGetImageThumbnail"
,"UPtr",pBitmap
,"UInt",W
,"UInt",H
,"UPtr*",pThumbnail
,"UPtr",0
,"UPtr",0)
Return pThumbnail
}
ConvertRGBtoHSL(R, G, B) {
SetFormat, float, 0.5
R := (R / 255)
G := (G / 255)
B := (B / 255)
Min     := min(R, G, B)
Max     := max(R, G, B)
del_Max := Max - Min
L := (Max + Min) / 2
if (del_Max = 0)
{
H := S := 0
} else
{
if (L < 0.5)
S := del_Max / (Max + Min)
else
S := del_Max / (2 - Max - Min)
del_R := (((Max - R) / 6) + (del_Max / 2)) / del_Max
del_G := (((Max - G) / 6) + (del_Max / 2)) / del_Max
del_B := (((Max - B) / 6) + (del_Max / 2)) / del_Max
if (R = Max)
{
H := del_B - del_G
} else
{
if (G = Max)
H := (1 / 3) + del_R - del_B
else if (B = Max)
H := (2 / 3) + del_G - del_R
}
if (H < 0)
H += 1
if (H > 1)
H -= 1
}
return [abs(round(h*360)), abs(s), abs(l)]
}
ConvertHSLtoRGB(H, S, L) {
H := H/360
if (S == 0)
{
R := L*255
G := L*255
B := L*255
} else
{
if (L < 0.5)
var_2 := L * (1 + S)
else
var_2 := (L + S) - (S * L)
var_1 := 2 * L - var_2
R := 255 * ConvertHueToRGB(var_1, var_2, H + (1 / 3))
G := 255 * ConvertHueToRGB(var_1, var_2, H)
B := 255 * ConvertHueToRGB(var_1, var_2, H - (1 / 3))
}
Return [round(R), round(G), round(B)]
}
ConvertHueToRGB(v1, v2, vH) {
vH := ((vH<0) ? ++vH : vH)
vH := ((vH>1) ? --vH : vH)
return  ((6 * vH) < 1) ? (v1 + (v2 - v1) * 6 * vH)
: ((2 * vH) < 1) ? (v2)
: ((3 * vH) < 2) ? (v1 + (v2 - v1) * ((2 / 3) - vH) * 6)
: v1
}
Gdip_ErrrorHandler(errCode, throwErrorMsg, additionalInfo:="") {
Static errList := {1:"Generic_Error", 2:"Invalid_Parameter"
, 3:"Out_Of_Memory", 4:"Object_Busy"
, 5:"Insufficient_Buffer", 6:"Not_Implemented"
, 7:"Win32_Error", 8:"Wrong_State"
, 9:"Aborted", 10:"File_Not_Found"
, 11:"Value_Overflow", 12:"Access_Denied"
, 13:"Unknown_Image_Format", 14:"Font_Family_Not_Found"
, 15:"Font_Style_Not_Found", 16:"Not_TrueType_Font"
, 17:"Unsupported_GdiPlus_Version", 18:"Not_Initialized"
, 19:"Property_Not_Found", 20:"Property_Not_Supported"
, 21:"Profile_Not_Found", 100:"Unknown_Wrapper_Error"}
If !errCode
Return
aerrCode := (errCode<0) ? 100 : errCode
If errList.HasKey(aerrCode)
GdipErrMsg := "GDI+ ERROR: " errList[aerrCode]  " [CODE: " aerrCode "]" additionalInfo
Else
GdipErrMsg := "GDI+ UNKNOWN ERROR: " aerrCode additionalInfo
If (throwErrorMsg=1)
MsgBox, % GdipErrMsg
Return GdipErrMsg
}
LoadGDIplus(){
VarSetCapacity(startInput, A_PtrSize = 8 ? 24 : 16, 0)
startInput := Chr(1)
HModuleGdip := DllCall("LoadLibrary", "Str", "gdiplus", "Ptr")
DllCall("gdiplus\GdiplusStartup", "Ptr*", pToken, "Ptr", &startInput, "Ptr", 0)
ProcBitBlt := DllCall("GetProcAddress", "Ptr", DllCall("GetModuleHandle", "Str", "gdi32", "Ptr"), "AStr", "BitBlt", "Ptr")
ProcCreateBitmap := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipCreateBitmapFromHBITMAP", "Ptr")
ProcBitmapLock := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipBitmapLockBits", "Ptr")
ProcBitmapUnlock := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipBitmapUnlockBits", "Ptr")
ProcDisposeImage := DllCall("GetProcAddress", "Ptr", HModuleGdip, "AStr", "GdipDisposeImage", "Ptr")
Ptr := A_PtrSize ? "UPtr" : "UInt"
PtrA := Ptr . "*"
MCode_ImageSearch := "8b44243883ec205355565783f8010f857a0100008b7c2458897c24143b7c24600f8db50b00008b44244c8b5c245c8b4c24448b7424548be80fafef896c242490897424683bf30f8d0a0100008d64240033c033db8bf5896c241c895c2420894424183b4424480f8d0401000033c08944241085c90f8e9d0000008b5424688b7c24408beb8d34968b54246403df8d4900b803000000803c18008b442410745e8b44243c0fb67c2f020fb64c06028d04113bf87f792bca3bf97c738b44243c0fb64c06018b4424400fb67c28018d04113bf87f5a2bca3bf97c548b44243c0fb63b0fb60c068d04113bf87f422bca3bf97c3c8b4424108b7c24408b4c24444083c50483c30483c604894424103bc17c818b5c24208b74241c0374244c8b44241840035c24508974241ce92dffffff8b6c24688b5c245c8b4c244445896c24683beb8b6c24240f8c06ffffff8b44244c8b7c24148b7424544703e8897c2414896c24243b7c24600f8cd5feffffe96b0a00008b4424348b4c246889088b4424388b4c24145f5e5d890833c05b83c420c383f8020f85870100008b7c24604f897c24103b7c24580f8c310a00008b44244c8b5c245c8b4c24448bef0fafe8f7d8894424188b4424548b742418896c24288d4900894424683bc30f8d0a0100008d64240033c033db8bf5896c2420895c241c894424243b4424480f8d0401000033c08944241485c90f8e9d0000008b5424688b7c24408beb8d34968b54246403df8d4900b803000000803c03008b442414745e8b44243c0fb67c2f020fb64c06028d04113bf87f792bca3bf97c738b44243c0fb64c06018b4424400fb67c28018d04113bf87f5a2bca3bf97c548b44243c0fb63b0fb60c068d04113bf87f422bca3bf97c3c8b4424148b7c24408b4c24444083c50483c30483c604894424143bc17c818b5c241c8b7424200374244c8b44242440035c245089742420e92dffffff8b6c24688b5c245c8b4c244445896c24683beb8b6c24280f8c06ffffff8b7c24108b4424548b7424184f03ee897c2410896c24283b7c24580f8dd5feffffe9db0800008b4424348b4c246889088b4424388b4c24105f5e5d890833c05b83c420c383f8030f85650100008b7c24604f897c24103b7c24580f8ca10800008b44244c8b6c245c8b5c24548b4c24448bf70faff04df7d8896c242c897424188944241c8bff896c24683beb0f8c020100008d64240033c033db89742424895c2420894424283b4424480f8d76ffffff33c08944241485c90f8e9f0000008b5424688b7c24408beb8d34968b54246403dfeb038d4900b803000000803c03008b442414745e8b44243c0fb67c2f020fb64c06028d04113bf87f752bca3bf97c6f8b44243c0fb64c06018b4424400fb67c28018d04113bf87f562bca3bf97c508b44243c0fb63b0fb60c068d04113bf87f3e2bca3bf97c388b4424148b7c24408b4c24444083c50483c30483c604894424143bc17c818b5c24208b7424248b4424280374244c40035c2450e92bffffff8b6c24688b5c24548b4c24448b7424184d896c24683beb0f8d0affffff8b7c24108b44241c4f03f0897c2410897424183b7c24580f8c580700008b6c242ce9d4feffff83f8040f85670100008b7c2458897c24103b7c24600f8d340700008b44244c8b6c245c8b5c24548b4c24444d8bf00faff7896c242c8974241ceb098da424000000008bff896c24683beb0f8c020100008d64240033c033db89742424895c2420894424283b4424480f8d06feffff33c08944241485c90f8e9f0000008b5424688b7c24408beb8d34968b54246403dfeb038d4900b803000000803c03008b442414745e8b44243c0fb67c2f020fb64c06028d04113bf87f752bca3bf97c6f8b44243c0fb64c06018b4424400fb67c28018d04113bf87f562bca3bf97c508b44243c0fb63b0fb60c068d04113bf87f3e2bca3bf97c388b4424148b7c24408b4c24444083c50483c30483c604894424143bc17c818b5c24208b7424248b4424280374244c40035c2450e92bffffff8b6c24688b5c24548b4c24448b74241c4d896c24683beb0f8d0affffff8b44244c8b7c24104703f0897c24108974241c3b7c24600f8de80500008b6c242ce9d4feffff83f8050f85890100008b7c2454897c24683b7c245c0f8dc40500008b5c24608b6c24588b44244c8b4c2444eb078da42400000000896c24103beb0f8d200100008be80faf6c2458896c241c33c033db8bf5896c2424895c2420894424283b4424480f8d0d01000033c08944241485c90f8ea60000008b5424688b7c24408beb8d34968b54246403dfeb0a8da424000000008d4900b803000000803c03008b442414745e8b44243c0fb67c2f020fb64c06028d04113bf87f792bca3bf97c738b44243c0fb64c06018b4424400fb67c28018d04113bf87f5a2bca3bf97c548b44243c0fb63b0fb60c068d04113bf87f422bca3bf97c3c8b4424148b7c24408b4c24444083c50483c30483c604894424143bc17c818b5c24208b7424240374244c8b44242840035c245089742424e924ffffff8b7c24108b6c241c8b44244c8b5c24608b4c24444703e8897c2410896c241c3bfb0f8cf3feffff8b7c24688b6c245847897c24683b7c245c0f8cc5feffffe96b0400008b4424348b4c24688b74241089088b4424385f89305e5d33c05b83c420c383f8060f85670100008b7c2454897c24683b7c245c0f8d320400008b6c24608b5c24588b44244c8b4c24444d896c24188bff896c24103beb0f8c1a0100008bf50faff0f7d88974241c8944242ceb038d490033c033db89742424895c2420894424283b4424480f8d06fbffff33c08944241485c90f8e9f0000008b5424688b7c24408beb8d34968b54246403dfeb038d4900b803000000803c03008b442414745e8b44243c0fb67c2f020fb64c06028d04113bf87f752bca3bf97c6f8b44243c0fb64c06018b4424400fb67c28018d04113bf87f562bca3bf97c508b44243c0fb63b0fb60c068d04113bf87f3e2bca3bf97c388b4424148b7c24408b4c24444083c50483c30483c604894424143bc17c818b5c24208b7424248b4424280374244c40035c2450e92bffffff8b6c24108b74241c0374242c8b5c24588b4c24444d896c24108974241c3beb0f8d02ffffff8b44244c8b7c246847897c24683b7c245c0f8de60200008b6c2418e9c2feffff83f8070f85670100008b7c245c4f897c24683b7c24540f8cc10200008b6c24608b5c24588b44244c8b4c24444d896c241890896c24103beb0f8c1a0100008bf50faff0f7d88974241c8944242ceb038d490033c033db89742424895c2420894424283b4424480f8d96f9ffff33c08944241485c90f8e9f0000008b5424688b7c24408beb8d34968b54246403dfeb038d4900b803000000803c18008b442414745e8b44243c0fb67c2f020fb64c06028d04113bf87f752bca3bf97c6f8b44243c0fb64c06018b4424400fb67c28018d04113bf87f562bca3bf97c508b44243c0fb63b0fb60c068d04113bf87f3e2bca3bf97c388b4424148b7c24408b4c24444083c50483c30483c604894424143bc17c818b5c24208b7424248b4424280374244c40035c2450e92bffffff8b6c24108b74241c0374242c8b5c24588b4c24444d896c24108974241c3beb0f8d02ffffff8b44244c8b7c24684f897c24683b7c24540f8c760100008b6c2418e9c2feffff83f8080f85640100008b7c245c4f897c24683b7c24540f8c510100008b5c24608b6c24588b44244c8b4c24448d9b00000000896c24103beb0f8d200100008be80faf6c2458896c241c33c033db8bf5896c2424895c2420894424283b4424480f8d9dfcffff33c08944241485c90f8ea60000008b5424688b7c24408beb8d34968b54246403dfeb0a8da424000000008d4900b803000000803c03008b442414745e8b44243c0fb67c2f020fb64c06028d04113bf87f792bca3bf97c738b44243c0fb64c06018b4424400fb67c28018d04113bf87f5a2bca3bf97c548b44243c0fb63b0fb604068d0c103bf97f422bc23bf87c3c8b4424148b7c24408b4c24444083c50483c30483c604894424143bc17c818b5c24208b7424240374244c8b44242840035c245089742424e924ffffff8b7c24108b6c241c8b44244c8b5c24608b4c24444703e8897c2410896c241c3bfb0f8cf3feffff8b7c24688b6c24584f897c24683b7c24540f8dc5feffff8b4424345fc700ffffffff8b4424345e5dc700ffffffffb85ff0ffff5b83c420c3,4c894c24204c89442418488954241048894c24085355565741544155415641574883ec188b8424c80000004d8bd94d8bd0488bda83f8010f85b3010000448b8c24a800000044890c24443b8c24b80000000f8d66010000448bac24900000008b9424c0000000448b8424b00000008bbc2480000000448b9424a0000000418bcd410fafc9894c24040f1f84000000000044899424c8000000453bd00f8dfb000000468d2495000000000f1f800000000033ed448bf933f6660f1f8400000000003bac24880000000f8d1701000033db85ff7e7e458bf4448bce442bf64503f7904d63c14d03c34180780300745a450fb65002438d040e4c63d84c035c2470410fb64b028d0411443bd07f572bca443bd17c50410fb64b01450fb650018d0411443bd07f3e2bca443bd17c37410fb60b450fb6108d0411443bd07f272bca443bd17c204c8b5c2478ffc34183c1043bdf7c8fffc54503fd03b42498000000e95effffff8b8424c8000000448b8424b00000008b4c24044c8b5c2478ffc04183c404898424c8000000413bc00f8c20ffffff448b0c24448b9424a000000041ffc14103cd44890c24894c2404443b8c24b80000000f8cd8feffff488b5c2468488b4c2460b85ff0ffffc701ffffffffc703ffffffff4883c418415f415e415d415c5f5e5d5bc38b8424c8000000e9860b000083f8020f858c010000448b8c24b800000041ffc944890c24443b8c24a80000007cab448bac2490000000448b8424c00000008b9424b00000008bbc2480000000448b9424a0000000418bc9410fafcd418bc5894c2404f7d8894424080f1f400044899424c8000000443bd20f8d02010000468d2495000000000f1f80000000004533f6448bf933f60f1f840000000000443bb424880000000f8d56ffffff33db85ff0f8e81000000418bec448bd62bee4103ef4963d24903d3807a03007460440fb64a02418d042a4c63d84c035c2470410fb64b02428d0401443bc87f5d412bc8443bc97c55410fb64b01440fb64a01428d0401443bc87f42412bc8443bc97c3a410fb60b440fb60a428d0401443bc87f29412bc8443bc97c214c8b5c2478ffc34183c2043bdf7c8a41ffc64503fd03b42498000000e955ffffff8b8424c80000008b9424b00000008b4c24044c8b5c2478ffc04183c404898424c80000003bc20f8c19ffffff448b0c24448b9424a0000000034c240841ffc9894c240444890c24443b8c24a80000000f8dd0feffffe933feffff83f8030f85c4010000448b8c24b800000041ffc944898c24c8000000443b8c24a80000000f8c0efeffff8b842490000000448b9c24b0000000448b8424c00000008bbc248000000041ffcb418bc98bd044895c24080fafc8f7da890c24895424048b9424a0000000448b542404458beb443bda0f8c13010000468d249d0000000066660f1f84000000000033ed448bf933f6660f1f8400000000003bac24880000000f8d0801000033db85ff0f8e96000000488b4c2478458bf4448bd6442bf64503f70f1f8400000000004963d24803d1807a03007460440fb64a02438d04164c63d84c035c2470410fb64b02428d0401443bc87f63412bc8443bc97c5b410fb64b01440fb64a01428d0401443bc87f48412bc8443bc97c40410fb60b440fb60a428d0401443bc87f2f412bc8443bc97c27488b4c2478ffc34183c2043bdf7c8a8b842490000000ffc54403f803b42498000000e942ffffff8b9424a00000008b8424900000008b0c2441ffcd4183ec04443bea0f8d11ffffff448b8c24c8000000448b542404448b5c240841ffc94103ca44898c24c8000000890c24443b8c24a80000000f8dc2feffffe983fcffff488b4c24608b8424c8000000448929488b4c2468890133c0e981fcffff83f8040f857f010000448b8c24a800000044890c24443b8c24b80000000f8d48fcffff448bac2490000000448b9424b00000008b9424c0000000448b8424a00000008bbc248000000041ffca418bcd4489542408410fafc9894c2404669044899424c8000000453bd00f8cf8000000468d2495000000000f1f800000000033ed448bf933f6660f1f8400000000003bac24880000000f8df7fbffff33db85ff7e7e458bf4448bce442bf64503f7904d63c14d03c34180780300745a450fb65002438d040e4c63d84c035c2470410fb64b028d0411443bd07f572bca443bd17c50410fb64b01450fb650018d0411443bd07f3e2bca443bd17c37410fb60b450fb6108d0411443bd07f272bca443bd17c204c8b5c2478ffc34183c1043bdf7c8fffc54503fd03b42498000000e95effffff8b8424c8000000448b8424a00000008b4c24044c8b5c2478ffc84183ec04898424c8000000413bc00f8d20ffffff448b0c24448b54240841ffc14103cd44890c24894c2404443b8c24b80000000f8cdbfeffffe9defaffff83f8050f85ab010000448b8424a000000044890424443b8424b00000000f8dc0faffff8b9424c0000000448bac2498000000448ba424900000008bbc2480000000448b8c24a8000000428d0c8500000000898c24c800000044894c2404443b8c24b80000000f8d09010000418bc4410fafc18944240833ed448bf833f6660f1f8400000000003bac24880000000f8d0501000033db85ff0f8e87000000448bf1448bce442bf64503f74d63c14d03c34180780300745d438d040e4c63d84d03da450fb65002410fb64b028d0411443bd07f5f2bca443bd17c58410fb64b01450fb650018d0411443bd07f462bca443bd17c3f410fb60b450fb6108d0411443bd07f2f2bca443bd17c284c8b5c24784c8b542470ffc34183c1043bdf7c8c8b8c24c8000000ffc54503fc4103f5e955ffffff448b4424048b4424088b8c24c80000004c8b5c24784c8b54247041ffc04103c4448944240489442408443b8424b80000000f8c0effffff448b0424448b8c24a800000041ffc083c10444890424898c24c8000000443b8424b00000000f8cc5feffffe946f9ffff488b4c24608b042489018b442404488b4c2468890133c0e945f9ffff83f8060f85aa010000448b8c24a000000044894c2404443b8c24b00000000f8d0bf9ffff8b8424b8000000448b8424c0000000448ba424900000008bbc2480000000428d0c8d00000000ffc88944240c898c24c80000006666660f1f840000000000448be83b8424a80000000f8c02010000410fafc4418bd4f7da891424894424084533f6448bf833f60f1f840000000000443bb424880000000f8df900000033db85ff0f8e870000008be9448bd62bee4103ef4963d24903d3807a03007460440fb64a02418d042a4c63d84c035c2470410fb64b02428d0401443bc87f64412bc8443bc97c5c410fb64b01440fb64a01428d0401443bc87f49412bc8443bc97c41410fb60b440fb60a428d0401443bc87f30412bc8443bc97c284c8b5c2478ffc34183c2043bdf7c8a8b8c24c800000041ffc64503fc03b42498000000e94fffffff8b4424088b8c24c80000004c8b5c247803042441ffcd89442408443bac24a80000000f8d17ffffff448b4c24048b44240c41ffc183c10444894c2404898c24c8000000443b8c24b00000000f8ccefeffffe991f7ffff488b4c24608b4424048901488b4c246833c0448929e992f7ffff83f8070f858d010000448b8c24b000000041ffc944894c2404443b8c24a00000000f8c55f7ffff8b8424b8000000448b8424c0000000448ba424900000008bbc2480000000428d0c8d00000000ffc8890424898c24c8000000660f1f440000448be83b8424a80000000f8c02010000410fafc4418bd4f7da8954240c8944240833ed448bf833f60f1f8400000000003bac24880000000f8d4affffff33db85ff0f8e89000000448bf1448bd6442bf64503f74963d24903d3807a03007460440fb64a02438d04164c63d84c035c2470410fb64b02428d0401443bc87f63412bc8443bc97c5b410fb64b01440fb64a01428d0401443bc87f48412bc8443bc97c40410fb60b440fb60a428d0401443bc87f2f412bc8443bc97c274c8b5c2478ffc34183c2043bdf7c8a8b8c24c8000000ffc54503fc03b42498000000e94fffffff8b4424088b8c24c80000004c8b5c24780344240c41ffcd89442408443bac24a80000000f8d17ffffff448b4c24048b042441ffc983e90444894c2404898c24c8000000443b8c24a00000000f8dcefeffffe9e1f5ffff83f8080f85ddf5ffff448b8424b000000041ffc84489442404443b8424a00000000f8cbff5ffff8b9424c0000000448bac2498000000448ba424900000008bbc2480000000448b8c24a8000000428d0c8500000000898c24c800000044890c24443b8c24b80000000f8d08010000418bc4410fafc18944240833ed448bf833f6660f1f8400000000003bac24880000000f8d0501000033db85ff0f8e87000000448bf1448bce442bf64503f74d63c14d03c34180780300745d438d040e4c63d84d03da450fb65002410fb64b028d0411443bd07f5f2bca443bd17c58410fb64b01450fb650018d0411443bd07f462bca443bd17c3f410fb603450fb6108d0c10443bd17f2f2bc2443bd07c284c8b5c24784c8b542470ffc34183c1043bdf7c8c8b8c24c8000000ffc54503fc4103f5e955ffffff448b04248b4424088b8c24c80000004c8b5c24784c8b54247041ffc04103c44489042489442408443b8424b80000000f8c10ffffff448b442404448b8c24a800000041ffc883e9044489442404898c24c8000000443b8424a00000000f8dc6feffffe946f4ffff8b442404488b4c246089018b0424488b4c2468890133c0e945f4ffff"
if ( A_PtrSize == 8 )
MCode_ImageSearch := SubStr(MCode_ImageSearch,InStr(MCode_ImageSearch,",")+1)
else
MCode_ImageSearch := SubStr(MCode_ImageSearch,1,InStr(MCode_ImageSearch,",")-1)
VarSetCapacity(ImageSearchMCode, LEN := StrLen(MCode_ImageSearch)//2, 0)
Loop, %LEN%
NumPut("0x" . SubStr(MCode_ImageSearch,(2*A_Index)-1,2), ImageSearchMCode, A_Index-1, "uchar")
MCode_ImageSearch := ""
DllCall("VirtualProtect", Ptr,&ImageSearchMCode, Ptr,VarSetCapacity(ImageSearchMCode), "uint",0x40, PtrA,0)
return
}
EncodeBitmapTo64string(pBitmap){
DllCall("gdiplus\GdipGetImageEncodersSize", "uint*", nCount, "uint*", nSize)
VarSetCapacity(ci, nSize)
DllCall("gdiplus\GdipGetImageEncoders", "uint", nCount, "uint", nSize, Ptr, &ci)
pMCodec := &ci+416
DllCall("ole32\CreateStreamOnHGlobal", "ptr",0, "int",true, "ptr*",pStream)
DllCall("gdiplus\GdipSaveImageToStream", "ptr",pBitmap, "ptr",pStream, "ptr",pMCodec, "uint", 0)
DllCall("ole32\GetHGlobalFromStream", "ptr",pStream, "uint*",hData)
pData := DllCall("GlobalLock", "ptr",hData, "uptr")
nSize := DllCall("GlobalSize", "uint",pData)
VarSetCapacity(Bin, nSize, 0)
DllCall("RtlMoveMemory", "ptr",&Bin , "ptr",pData , "uint",nSize)
DllCall(NumGet(NumGet(pStream + 0, 0, "uptr") + (A_PtrSize * 2), 0, "uptr"), "ptr",pStream)
DllCall("GlobalUnlock", "ptr",hData)
DllCall("GlobalFree", "ptr",hData)
DllCall("Crypt32.dll\CryptBinaryToString", "ptr",& Bin, "uint",nSize, "uint",0x01, "ptr",0, "uint*",base64Length)
VarSetCapacity(base64, base64Length*2, 0)
DllCall("Crypt32.dll\CryptBinaryToString", "ptr",&Bin, "uint",nSize, "uint",0x01, "ptr",&base64, "uint*",base64Length), Bin := ""
VarSetCapacity(Bin, 0)
VarSetCapacity(base64, -1)
return base64
}
BitmapFromBase64(BitLock, Type, B64){
VarSetCapacity(B64Len, 0)
, DllCall("Crypt32.dll\CryptStringToBinary", "Ptr", &B64, "UInt", StrLen(B64), "UInt", 0x01, "Ptr", 0, "UIntP", B64Len, "Ptr", 0, "Ptr", 0)
, VarSetCapacity(B64Dec, B64Len, 0)
, DllCall("Crypt32.dll\CryptStringToBinary", "Ptr", &B64, "UInt", StrLen(B64), "UInt", 0x01, "Ptr", &B64Dec, "UIntP", B64Len, "Ptr", 0, "Ptr", 0)
, pStream := DllCall("Shlwapi.dll\SHCreateMemStream", "Ptr", &B64Dec, "UInt", B64Len, "UPtr")
, DllCall("Gdiplus.dll\GdipCreateBitmapFromStream", "Ptr", pStream, "PtrP", pBitmap)
, ObjRelease(pStream)
if Type
DllCall("Gdiplus.dll\GdipCreateHBITMAPFromBitmap", "UInt", pBitmap, "UInt*", hBitmap, "Int", 0XFFFFFFFF)
, Gdip_DisposeImage(pBitmap)
if (BitLock && !Type) {
Gdip_GetImageDimensions(pBitmap,nWidth,nHeight)
, Gdip_LockBits(pBitmap,0,0,nWidth,nHeight,nStride,nScan,nBitmapData)
return Object := {Stride: nStride,Scan: nScan,Width: nWidth,Height: nHeight, Bitmap: (Type ? hBitmap : pBitmap)}
} Else
return Type ? hBitmap : pBitmap
}
PrintScreenData(){
If (ini.Compatibility.2 = 1)
PrintScreenPW()
Else
PrintScreenDC()
}
PrintScreenPW(){
static PWWinID, WinTitle, WinX, WinY, WinW, WinH, ClientWidth, ClientHeight, Area, hBitmap
if ( !WinID && FindProcessesID ) {
WinID := WinExist("ahk_ID " FindProcessesID)
PWWinID := WinID
WinExist( GameInfo )
WinGetClass, WindowClass
WinGet , WinExE, ProcessName
Process, Exist , %WinExE%
WinGetTitle, WindowTitle
WindowInfo:={ID: WinID, Title: WindowTitle, Class: WindowClass, IDClassNN: WinID, Exe: WinExE, pID: errorlevel}
Area := DllCall("CreateCompatibleDC","Ptr",0,"Ptr")
}
if !WinExist( "ahk_id" PWWinID ) {
Macro := 0
SetTimer, Button2, On
MsgBox, % "Game Not Found"
Return
}
WinGetTitle, WindowTitle
WinGetPos, GetWinX, GetWinY, GetWinW, GetWinH
if (WindowTitle != WinTitle || GetWinX != WinX || GetWinY != WinY || GetWinW != WinW || GetWinH != WinH ) {
If (WindowTitle != WinTitle){
NewName := StrSplit(WindowTitle, "-")
If (NewName.2)
NewName := Trim(NewName.2)
Else
NewName := WindowTitle
GuiControl, Main:, WindowTitle, %NewName%
WindowInfo.Title  := NewName
}
WinTitle:=WindowTitle, WinX:=GetWinX, WinY:=GetWinY, WinW:=GetWinW, WinH:=GetWinH
VarSetCapacity(rect,16), DllCall("GetClientRect","Ptr",PWWinID,"Ptr",&rect), ClientWidth := NumGet(rect,8,"int"), ClientHeight := NumGet(rect,12,"int")
DllCall("DeleteObject", "Ptr",hBitmap),VarSetCapacity(bi,40,0),NumPut(40,bi,0,"int"),NumPut(ClientWidth,bi,4,"int"),NumPut(-ClientHeight,bi,8,"int"),NumPut(1,bi,12,"short"),NumPut(32,bi,14,"short")
hBitmap := DllCall("CreateDIBSection","Ptr",0,"Ptr",&bi,"int",0,"Ptr*",PrintScan,"Ptr",0,"int",0,"Ptr")
DllCall("SelectObject","Ptr",Area,"Ptr",hBitmap,"Ptr")
ScanBit := PrintScan
StrideBit := ClientWidth*4
PNGScanWidth := ClientWidth
PNGScanHeight := ClientHeight
WindowInfo.HBITMAP:= hBitmap
WindowInfo.Window :={x: WinX , y: WinY, w: WinW, h: WinH}
WindowInfo.Client :={w: ClientWidth, h: ClientHeight}
WindowInfo.ClassNN:={x: Round((WinW-ClientWidth)/2), y: Round(WinH-ClientHeight-(WinW-ClientWidth)/2), w: ClientWidth, h: ClientHeight}
}
DllCall("PrintWindow","Ptr",PWWinID,"Ptr",Area,"int",1)
Return
}
PrintScreenDC(){
static DCWinID, WinTitle, WinX, WinY, WinW, WinH, ClientWidth, ClientHeight, Area, hBitmap
if ( !WinID && FindProcessesID ) {
WinID := WinExist("ahk_ID " FindProcessesID)
DCWinID := WinID
WinExist( GameInfo )
WinGetClass, WindowClass
WinGet , WinExE, ProcessName
Process, Exist , %WinExE%
WinGetTitle, WindowTitle
WindowInfo:={ID: WinID, Title: WindowTitle, Class: WindowClass, IDClassNN: WinID, Exe: WinExE, pID: errorlevel}
Area := DllCall("CreateCompatibleDC","Ptr",0,"Ptr")
}
if !WinExist( "ahk_id" DCWinID ) {
Macro := 0
SetTimer, Button2, On
MsgBox, % "Game Not Found"
Return
}
WinGetTitle, WindowTitle
WinGetPos, GetWinX, GetWinY, GetWinW, GetWinH
if (WindowTitle != WinTitle || GetWinX != WinX || GetWinY != WinY || GetWinW != WinW || GetWinH != WinH ) {
If (WindowTitle != WinTitle){
NewName := StrSplit(WindowTitle, "-")
If (NewName.2)
NewName := Trim(NewName.2)
Else
NewName := WindowTitle
GuiControl, Main:, WindowTitle, %NewName%
WindowInfo.Title  := NewName
}
WinTitle:=WindowTitle, WinX:=GetWinX, WinY:=GetWinY, WinW:=GetWinW, WinH:=GetWinH
VarSetCapacity(rect,16), DllCall("GetClientRect","Ptr",DCWinID,"Ptr",&rect), ClientWidth := NumGet(rect,8,"int"), ClientHeight := NumGet(rect,12,"int")
DllCall("DeleteObject", "Ptr",hBitmap),VarSetCapacity(bi,40,0),NumPut(40,bi,0,"int"),NumPut(ClientWidth,bi,4,"int"),NumPut(-ClientHeight,bi,8,"int"),NumPut(1,bi,12,"short"),NumPut(32,bi,14,"short")
hBitmap := DllCall("CreateDIBSection","Ptr",0,"Ptr",&bi,"int",0,"Ptr*",PrintScan,"Ptr",0,"int",0,"Ptr")
DllCall("SelectObject","Ptr",Area,"Ptr",hBitmap,"Ptr")
ScanBit := PrintScan
StrideBit := ClientWidth*4
PNGScanWidth := ClientWidth
PNGScanHeight := ClientHeight
WindowInfo.HBITMAP:= hBitmap
WindowInfo.Window :={x: WinX , y: WinY, w: WinW, h: WinH}
WindowInfo.Client :={w: ClientWidth, h: ClientHeight}
WindowInfo.ClassNN:={x: Round((WinW-ClientWidth)/2), y: Round(WinH-ClientHeight-(WinW-ClientWidth)/2), w: ClientWidth, h: ClientHeight}
}
hDC := DllCall("GetDC","Ptr",DCWinID,"Ptr",0,"int",0)
DllCall(ProcBitBlt,"Ptr",Area,"int",0,"int",0,"int",ClientWidth,"int",ClientHeight,"Ptr",hDC,"int",0,"int",0,"uint",0xCC0020)
DllCall("DeleteDC","Ptr",hDC)
Return
}
ResizeBitmap(pBitmap, givenW, givenH,InterpolationMode:=""){
Gdip_GetImageDimensions(pBitmap, Width, Height)
ResizeBitmap := Gdip_CreateBitmap(givenW, givenH)
G := Gdip_GraphicsFromImage(ResizeBitmap, InterpolationMode)
Gdip_DrawImageRect(G, pBitmap, 0, 0, givenW, givenH)
Gdip_DeleteGraphics(G)
Gdip_SaveBitmapToFile(ResizeBitmap, "Out.png")
Return ResizeBitmap
}
Gdip_CropImage(pBitmap, x, y, w, h) {
pBitmap2 := Gdip_CreateBitmap(w, h), G2 := Gdip_GraphicsFromImage(pBitmap2)
Gdip_DrawImage(G2, pBitmap, 0, 0, w, h, x, y, w, h)
Gdip_DeleteGraphics(G2)
return pBitmap2
}
CorToDec(hex,ByRef Out:=""){
hex := "FF" SubStr(hex, 2)
, VarSetCapacity(Out, 66, 0)
, val := DllCall("msvcrt.dll\_wcstoui64", "Str", hex, "UInt", 0, "UInt", 16, "CDECL Int64")
, DllCall("msvcrt.dll\_i64tow", "Int64", val, "Str", Out, "UInt", 10, "CDECL")
return Out
}
GetColorDecimal(X, Y){
If ( ScanBit && StrideBit && X>=0 && Y>=0 && X < PNGScanWidth && Y < PNGScanHeight )
return NumGet(ScanBit + 0, X * 4 + Y * StrideBit, "UInt")
}
GetColorHex(X, Y){
If ( ScanBit && StrideBit && X>=0 && Y>=0 && X < PNGScanWidth && Y < PNGScanHeight )
return "#" SubStr(Format("{1:#x}", NumGet(ScanBit + 0, X * 4 + Y * StrideBit, "UInt")), 5)
}
GetColorDiff(x, y, CorArry){
If ( ScanBit && StrideBit && X>=0 && Y>=0 && X < PNGScanWidth && Y < PNGScanHeight ){
Color := Format("0x{:06X}", NumGet(ScanBit + 0, X * 4 + Y * StrideBit, "UInt") & 0xFFFFFF)
R := (0xff0000 & Color) >> 16, G := (0x00ff00 & Color) >> 8, B :=  0x0000ff & Color
CorDiff := sqrt((CorArry.R - R)**2+(CorArry.G - G)**2+(CorArry.B - B)**2)
Return CorDiff
}
}
LockedBitsSearch(hStride,hScan,nStride,nScan,nWidth,nHeight,ByRef x:="",ByRef y:="",slx1:=0,sly1:=0,slx2:=0,sly2:=0,Variation:=0,SearchDirection:=1){
If ( slx2 < slx1 )
return -3001
If ( sly2 < sly1 )
return -3002
If ( slx2-slx1 == 0 )
return -3005
If ( sly2-sly1 == 0 )
return -3006
E := DllCall( &ImageSearchMCode,"int*",x,"int*",y,Ptr,hScan, Ptr,nScan,"int",nWidth,"int",nHeight,"int",hStride,"int",nStride,"int",slx1,"int",sly1,"int",slx2,"int",sly2,"int",Variation,"int",SearchDirection,"cdecl int")
Return ( E == "" ? -3007 : E )
}
MultiLockedBitsSearch(hStride,hScan,nStride,nScan,nWidth,nHeight,ByRef OutputList="",OuterX1=0,OuterY1=0,OuterX2=0,OuterY2=0,Variation=0,SearchDirection=1,Instances=0,LineDelim="`n",CoordDelim=","){
OutputList := ""
OutputCount := !Instances
InnerX1 := OuterX1 , InnerY1 := OuterY1
InnerX2 := OuterX2 , InnerY2 := OuterY2
iX := 1, stepX := 1, iY := 1, stepY := 1
Modulo := Mod(SearchDirection,4)
If ( Modulo > 1 )
iY := 2, stepY := 0
If !Mod(Modulo,3)
iX := 2, stepX := 0
P := "Y", N := "X"
If ( SearchDirection > 4 )
P := "X", N := "Y"
iP := i%P%, iN := i%N%
While (!(OutputCount == Instances) && (0 == LockedBitsSearch(hStride,hScan,nStride,nScan,nWidth,nHeight,FoundX,FoundY,OuterX1,OuterY1,OuterX2,OuterY2,Variation,SearchDirection))){
OutputCount++
OutputList .= LineDelim FoundX CoordDelim FoundY
Outer%P%%iP% := Found%P%+step%P%
Inner%N%%iN% := Found%N%+step%N%
Inner%P%1 := Found%P%
Inner%P%2 := Found%P%+1
While (!(OutputCount == Instances) && (0 == LockedBitsSearch(hStride,hScan,nStride,nScan,nWidth,nHeight,FoundX,FoundY,InnerX1,InnerY1,InnerX2,InnerY2,Variation,SearchDirection))){
OutputCount++
OutputList .= LineDelim FoundX CoordDelim FoundY
Inner%N%%iN% := Found%N%+step%N%
}
}
OutputList := SubStr(OutputList,1+StrLen(LineDelim))
OutputCount -= !Instances
Return OutputCount
}
ObjectAdd(Object, Add){
for k, v in Add
Object[k] := v
}
range(start, stop:="", step:=1){
static range := { _NewEnum: Func("_RangeNewEnum") }
if !step
throw "range(): Parameter 'step' must not be 0 or blank"
if (stop == "")
stop := start, start := 0
if (step > 0 ? start < stop : start > stop)
return { base: range, start: start, stop: stop, step: step }
}
_RangeNewEnum(r){
static enum := { "Next": Func("_RangeEnumNext") }
return { base: enum, r: r, i: 0 }
}
_RangeEnumNext(enum, ByRef k, ByRef v:=""){
stop := enum.r.stop, step := enum.r.step, k := enum.r.start + step*enum.i
if (ret := step > 0 ? k < stop : k > stop)
enum.i += 1
return ret
}
SearchPNG(ND,x,y,sx,sy,Tole:=0,ByRef Found:="",Mode:=1,Draw:=0,AreaDraw:=0){
If !( ScanBit && ND.Scan )
Return Found:=-1001
If Tole not between 0 and 255
return Found:=-1002
If ( ( x < 0 ) || ( y < 0 ) )
return Found:=-1003
If Mode not between 1 and 8
return Found:=-1004
OutX := ( !sx ? PNGScanWidth - ND.Width +1 : sx - ND.Width +1 )
OutY := ( !sy ? PNGScanHeight - ND.Height+1 : sy - ND.Height+1 )
If ( OutX > (sx-ND.Width+1) )
return Found:=-3003
If ( OutY > (sy-ND.Height+1) )
return Found:=-3004
Info := LockedBitsSearch(StrideBit,ScanBit,ND.Stride,ND.Scan,ND.Width,ND.Height,FoundX,FoundY,x,y,OutX,OutY,Tole,Mode)
if (AreaDraw = 1)
DrawRectangle(x+WindowInfo.ClassNN.x,y+WindowInfo.ClassNN.y,sx-x,sy-y,"0xffffffff")
if (Info == 0 && Draw = 1){
DrawRectangle(FoundX+WindowInfo.ClassNN.x, FoundY+WindowInfo.ClassNN.y, ND.Width, ND.Height ,"0xffFF0000")
DrawRectangle(FoundX+WindowInfo.ClassNN.x, FoundY+WindowInfo.ClassNN.y, 1, 1 ,"0xffffff00")
}
if (Info == 0)
Found := {1: 0, 2: FoundX, 3: FoundY}
else
Found := {1: 1}
return
}
MultiSearchPNG(ND,x,y,sx,sy,Tole:=0,ByRef Found:="",Mode:=1,Draw:=0,AreaDraw:=0){
If !( ScanBit && ND.Scan )
Return Found:=-1001
If Tole not between 0 and 255
return Found:=-1002
If ( ( x < 0 ) || ( y < 0 ) )
return Found:=-1003
If Mode not between 1 and 8
return Found:=-1004
OutX := ( !sx ? PNGScanWidth - ND.Width +1 : sx - ND.Width +1 )
OutY := ( !sy ? PNGScanHeight - ND.Height+1 : sy - ND.Height+1 )
If ( OutX > (sx-ND.Width+1) )
return Found:=-3003
If ( OutY > (sy-ND.Height+1) )
return Found:=-3004
Info := MultiSearchHP(StrideBit,ScanBit,ND.Stride,ND.Scan,ND.Width,ND.Height,Found,x,y,OutX,OutY,Tole,Mode)
if (Info != 0)
Found := {1: 1}
return
}
MultiSearchHP(hStride,hScan,nStride,nScan,nWidth,nHeight,ByRef OutputList="",OuterX1=0,OuterY1=0,OuterX2=0,OuterY2=0,Variation=0,SearchDirection=1){
OutputList := []
OutputCount := 0
InnerX1 := OuterX1 , InnerY1 := OuterY1
InnerX2 := OuterX2 , InnerY2 := OuterY2
iX := 1, stepX := 27, iY := 1, stepY := 4
Modulo := Mod(SearchDirection,4)
If ( Modulo > 1 )
iY := 2, stepY := 0
If !Mod(Modulo,3)
iX := 2, stepX := 0
P := "Y", N := "X"
If ( SearchDirection > 4 )
P := "X", N := "Y"
iP := i%P%, iN := i%N%
While (0 == LockedBitsSearch(hStride,hScan,nStride,nScan,nWidth,nHeight,FoundX,FoundY,OuterX1,OuterY1,OuterX2,OuterY2,Variation,SearchDirection)){
if (GetColorDecimal(FoundX+1, FoundY+1) != "4278190080"){
OutputCount++
OutputList[OutputCount] := {x:FoundX, y:FoundY}
Outer%P%%iP% := Found%P%+step%P%
Inner%N%%iN% := Found%N%+step%N%
} Else {
Outer%P%%iP% := Found%P%+1
Inner%N%%iN% := Found%N%+1
}
Inner%P%1 := Found%P%
Inner%P%2 := Found%P%+1
While (0 == LockedBitsSearch(hStride,hScan,nStride,nScan,nWidth,nHeight,FoundX,FoundY,InnerX1,InnerY1,InnerX2,InnerY2,Variation,SearchDirection)){
if (GetColorDecimal(FoundX+1, FoundY+1) != "4278190080"){
OutputCount++
OutputList[OutputCount] := {x:FoundX, y:FoundY}
}
Inner%N%%iN% := Found%N%+step%N%
}
}
Return (OutputCount = 0 ? 1 : 0)
}
DrawCircle(x, y, Cor:=0xffff0000){
if (WindowInfo.Title = "Tibia - Dinos")
WAx := WindowInfo.Window.x+WindowInfo.ClassNN.x, WAy := WindowInfo.Window.y+WindowInfo.ClassNN.y
Else
WAx := WindowInfo.Window.x, WAy := WindowInfo.Window.y
pBrush := Gdip_BrushCreateSolid(0xff000000)
Gdip_FillEllipse(gDrawCircle, pBrush, x-3, y-3, 4, 4)
Gdip_DeleteBrush(pBrush)
pBrush := Gdip_BrushCreateSolid(Cor)
Gdip_FillEllipse(gDrawCircle, pBrush, x-2, y-2, 2, 2)
Gdip_DeleteBrush(pBrush)
UpdateLayeredWindow(InDraw, hdcDrawCircle, WAx, WAy, WindowInfo.Window.w, WindowInfo.Window.h)
Return
}
DrawRectangle(x, y, w, h, Cor:=0xffff0000){
if (WindowInfo.Title = "Tibia")
WAx := WindowInfo.Window.x+WindowInfo.ClassNN.x, WAy := WindowInfo.Window.y+WindowInfo.ClassNN.y
Else
WAx := WindowInfo.Window.x, WAy := WindowInfo.Window.y
pPen := Gdip_CreatePen(Cor, 1)
Gdip_DrawRectangle(gDrawCircle, pPen, x-1, y-1, w+1, h+1)
Gdip_DeletePen(pPen)
UpdateLayeredWindow(InDraw, hdcDrawCircle, WAx, WAy, WindowInfo.Window.w, WindowInfo.Window.h)
Return
}
ControlDoubleClick(X, Y, windowID="", WinText="", ExcludeTitle="", ExcludeText=""){
WinTitle := "ahk_id " windowID
hwnd:=ControlFromPoint(X, Y, WinTitle, WinText, cX, cY, ExcludeTitle, ExcludeText)
PostMessage, 0x201, 0, cX&0xFFFF | cY<<16,, ahk_id %hwnd%
PostMessage, 0x202, 0, cX&0xFFFF | cY<<16,, ahk_id %hwnd%
PostMessage, 0x203, 0, cX&0xFFFF | cY<<16,, ahk_id %hwnd%
PostMessage, 0x202, 0, cX&0xFFFF | cY<<16,, ahk_id %hwnd%
}
ControlFromPoint(X, Y, WinTitle="", WinText="", ByRef cX="", ByRef cY="", ExcludeTitle="", ExcludeText=""){
static EnumChildFindPointProc=0
if !EnumChildFindPointProc
EnumChildFindPointProc := RegisterCallback("EnumChildFindPoint","Fast")
if !(target_window := WinExist(WinTitle, WinText, ExcludeTitle, ExcludeText))
return false
VarSetCapacity(rect, 16)
DllCall("GetWindowRect","uint",target_window,"uint",&rect)
VarSetCapacity(pah, 36, 0)
NumPut(X + NumGet(rect,0,"int"), pah,0,"int")
NumPut(Y + NumGet(rect,4,"int"), pah,4,"int")
DllCall("EnumChildWindows","uint",target_window,"uint",EnumChildFindPointProc,"uint",&pah)
control_window := NumGet(pah,24) ? NumGet(pah,24) : target_window
DllCall("ScreenToClient","uint",control_window,"uint",&pah)
cX:=NumGet(pah,0,"int"), cY:=NumGet(pah,4,"int")
return control_window
}
EnumChildFindPoint(aWnd, lParam){
if !DllCall("IsWindowVisible","uint",aWnd)
return true
VarSetCapacity(rect, 16)
if !DllCall("GetWindowRect","uint",aWnd,"uint",&rect)
return true
pt_x:=NumGet(lParam+0,0,"int"), pt_y:=NumGet(lParam+0,4,"int")
rect_left:=NumGet(rect,0,"int"), rect_right:=NumGet(rect,8,"int")
rect_top:=NumGet(rect,4,"int"), rect_bottom:=NumGet(rect,12,"int")
if (pt_x >= rect_left && pt_x <= rect_right && pt_y >= rect_top && pt_y <= rect_bottom)
{
center_x := rect_left + (rect_right - rect_left) / 2
center_y := rect_top + (rect_bottom - rect_top) / 2
distance := Sqrt((pt_x-center_x)**2 + (pt_y-center_y)**2)
update_it := !NumGet(lParam+24)
if (!update_it)
{
rect_found_left:=NumGet(lParam+8,0,"int"), rect_found_right:=NumGet(lParam+8,8,"int")
rect_found_top:=NumGet(lParam+8,4,"int"), rect_found_bottom:=NumGet(lParam+8,12,"int")
if (rect_left >= rect_found_left && rect_right <= rect_found_right
&& rect_top >= rect_found_top && rect_bottom <= rect_found_bottom)
update_it := true
else if (distance < NumGet(lParam+28,0,"double")
&& (rect_found_left < rect_left || rect_found_right > rect_right
|| rect_found_top < rect_top || rect_found_bottom > rect_bottom))
update_it := true
}
if (update_it)
{
NumPut(aWnd, lParam+24)
DllCall("RtlMoveMemory","uint",lParam+8,"uint",&rect,"uint",16)
NumPut(distance, lParam+28, 0, "double")
}
}
return true
}
SaveInI(id){
try {
Loop % id.Length(){
arrayS.= id[A_Index] . "|"
}
StringTrimRight, arrayS, arrayS, 1
StringReplace, Save, % id.1, %A_SPACE%,, All
iniwrite, %arrayS%, %settingsFile%, Options, %Save%
} catch e {
MsgBox, 4112, Error - SaveInI, % e
}
}
GetHDSerial(){
try {
static HDD := []
for objItem in ComObjGet("winmgmts:").ExecQuery("SELECT * FROM Win32_DiskDrive") {
HDD[A_Index, "Model"]        := objItem.Model
HDD[A_Index, "Name"]         := objItem.Name
HDD[A_Index, "SerialNumber"] := objItem.SerialNumber
}
return HDD
} catch e {
MsgBox, 4112, Error - GetHDSerial, % e
}
}
GetProcessorID(){
try {
objWMIService := ComObjGet("winmgmts:{impersonationLevel=impersonate}!\\" . A_ComputerName . "\root\cimv2")
WQLQuery = Select * From Win32_Processor
colCPU := objWMIService.ExecQuery(WQLQuery)._NewEnum
While colCPU[objCPU]
{
Return objCPU.ProcessorId
}
} catch e {
MsgBox, 4112, Error - GetProcessorID, % e
}
}
IsValidEmail(emailstr){
static regex
regex := "is)^(?:""(?:\\\\.|[^""])*""|[^@]+)@(?=[^()]*(?:\([^)]*\)"
. "[^()]*)*\z)(?![^ ]* (?=[^)]+(?:\(|\z)))(?:(?:[a-z\d() ]+(?:[a-z\d() -]*[()a-"
. "z\d])?\.)+[a-z\d]{2,6}|\[(?:(?:1?\d\d?|2[0-4]\d|25[0-4])\.){3}(?:1?\d\d?|"
. "2[0-4]\d|25[0-4])\]) *\z"
return RegExMatch(emailstr, regex) != 0
}
WinHTTP(Body) {
WinHTTP := ComObjCreate("WinHttp.WinHttpRequest.5.1")
WinHTTP.Open("POST", Data.ServerIPPort)
WinHTTP.SetRequestHeader("Content-Type", "application/json")
WinHTTP.Send(Body)
Return JsonToAHK(WinHTTP.ResponseText)
}
GetUserDetail(Info:="") {
If (Data.Conditions.ProtectionZone == 1 || Data.Conditions.ProtectionZone == ""){
try {
Fieldemail := OBJGet.Config.Edit01
FieldPassword := OBJGet.Config.Edit02
idioma := OBJGet.Ling
UID := OBJGet.UID
Body = {"type": "GameLicenca","uID": "%UID%","email": "%Fieldemail%","password": "%FieldPassword%","game": "Tibia","idioma": "%idioma%"}
JsonCrack := "{""Type"":200,""idDiscord"":"""",""InviteCode"":"""",""FriendsInvited"":0,""RewardsToRedeem"":0,""licenseEndDate"":""LifeTime"",""customEndDate"":0,""mensagemPC"":"""",""Token"":""""}"
userData := JsonToAHK(JsonCrack)
If (userData.Type = 200){
If (Dados.userDataTempo != userData.licenseEndDate) {
Dados.userDataTempo := userData.licenseEndDate
Dados.catchMalandros := 0
}
userData.email := FieldEmail
userData.password := FieldPassword
Dados.Disconnect := 0
Dados.catchDisconnect := 0
if (Macro == 1)
GuiControl, Main:, TimeRemaining, % " " userData.licenseEndDate
} else {
SetTimer, Button2, On
ImageSearchMCode := ""
ExitApp
}
} catch e {
If (InStr(e.Message, "0x80072EE2") || InStr(e.Message, "0x80072EFD") || InStr(e.Message, "0x80072F78") || InStr(e.Message, "0x80072EFE")) {
if (Info == "Start"){
Dados.Loop := 0
Dados.Disconnect := 1
ImageSearchMCode := ""
MsgBox, % e.Message "`nFile: " e.File
ExitApp
}
if (Dados.catchDisconnect > 4) {
Dados.Disconnect := 1
}
Dados.catchDisconnect++
Return
}
SetTimer, Button2, On
Dados.Disconnect := 1
ImageSearchMCode := ""
MsgBox, % e.Message "`nFile: " e.File
ExitApp
}
}
}
CheckConnectionError(e) {
MsgBox, 4112, Error, % e.message
Macro := 0
English    := "Macro is Paused."
Portuguese := "Macro foi pausado."
ToolTip(%GlobalLanguage%,1500,Cords.Loot.4,Cords.Loot.5)
SetTimer, Button2, On
Return
}
JsonToAHK(json, rec := false) {
static doc := ComObjCreate("htmlfile"), _ := doc.write("<meta http-equiv=""X-UA-Compatible"" content=""IE=9"">"), JS := doc.parentWindow
if !rec
obj := %A_ThisFunc%(JS.eval("(" . json . ")"), true)
else if !IsObject(json)
obj := json
else if JS.Object.prototype.toString.call(json) == "[object Array]" {
obj := []
Loop % json.length
obj.Push( %A_ThisFunc%(json[A_Index - 1], true) )
}
else {
obj := {}
keys := JS.Object.keys(json)
Loop % keys.length {
k := keys[A_Index - 1]
obj[k] := %A_ThisFunc%(json[k], true)
}
}
Return obj
}
CreateUIDKey() {
Info := GetUID()
For k, v in Info
Hash .= (Hash ? "/" : "") v
Return CreateHash(Hash)
}
GetUID() {
Info := []
try {
for objItem in ComObjGet("winmgmts:").ExecQuery("SELECT * FROM Win32_DiskDrive")
if InStr(objItem.Name, "DRIVE0")
Info.HDSerialnumber := objItem.SerialNumber
} catch e {
MsgBox, 4112, Error - GetHDSerial, % e
return
}
try {
for objItem in ComObjGet("winmgmts:").ExecQuery("SELECT * FROM Win32_Processor")
for k, v in ["Name", "ProcessorId", "SocketDesignation"]
Info[v] := objItem[v]
} catch e {
MsgBox, 4112, Error - GetProcessorID, % e
return
}
return Info
}
CreateHash(String) {
DllCall("bcrypt\BCryptOpenAlgorithmProvider", "ptr*", ALG_HANDLE, "ptr",  &pszAlgId:="MD5", "ptr",  0, "uint", 0x00000008)
cbSecret := StrPutVar("Create Hash", pbSecret)
NT_STATUS := DllCall("bcrypt\BCryptCreateHash", "ptr",  ALG_HANDLE, "ptr*", HASH_HANDLE, "ptr",  pbHashObject := 0, "uint", cbHashObject := 0, "ptr",  &pbSecret, "uint", cbSecret, "uint", dwFlags := 0)
if (NT_STATUS != 0)
return False
cbInput := StrPutVar(String, pbInput)
DllCall("bcrypt\BCryptHashData", "ptr",  HASH_HANDLE, "ptr",  &pbInput, "uint", cbInput, "uint", 0)
DllCall("bcrypt\BCryptGetProperty", "ptr", ALG_HANDLE, "ptr", &pszProperty:="HashDigestLength", "uint*", HASH_LENGTH, "uint",  4, "uint*", pcbResult, "uint",  dwFlags := 0)
VarSetCapacity(HASH_DATA, HASH_LENGTH, 0)
NT_STATUS := DllCall("bcrypt\BCryptFinishHash", "ptr",  HASH_HANDLE, "ptr",  &HASH_DATA, "uint", HASH_LENGTH, "uint", 0)
if (NT_STATUS != 0)
return False
if (HASH_HANDLE)
DllCall("bcrypt\BCryptDestroyHash", "ptr", HASH_HANDLE)
if (ALG_HANDLE)
DllCall("bcrypt\BCryptCloseAlgorithmProvider", "ptr", ALG_HANDLE, "uint", 0)
return CryptBinaryToString(HASH_DATA, HASH_LENGTH, "HEXRAW")
}
StrPutVar(String, ByRef Data) {
VarSetCapacity(Data, Length := StrPut(String, "UTF-8") - 1)
return StrPut(String, &Data, Length, "UTF-8")
}
CryptBinaryToString(ByRef pbBinary, cbBinary, dwFlags := "BASE64") {
static CRYPT_STRING := { "BASE64": 0x1, "BINARY": 0x2, "HEX": 0x4, "HEXRAW": 0xc }
static CRYPT_STRING_NOCRLF := 0x40000000
if (DllCall("crypt32\CryptBinaryToString", "ptr", &pbBinary, "uint", cbBinary, "uint", (CRYPT_STRING[dwFlags] | CRYPT_STRING_NOCRLF), "ptr", 0, "uint*", pcchString))
{
VarSetCapacity(pszString, pcchString << !!A_IsUnicode, 0)
if (DllCall("crypt32\CryptBinaryToString", "ptr", &pbBinary, "uint", cbBinary, "uint", (CRYPT_STRING[dwFlags] | CRYPT_STRING_NOCRLF), "ptr", &pszString, "uint*", pcchString))
{
return StrGet(&pszString)
}
}
return false
}
OnMessage(0x404, "AHK_NOTIFYICON")
OnMessage(0x200, "Button_Hover")
OnMessage(0x204, "GuiContext")
OnMessage(0x102, "WM_Char")
GuiContext( wparam, lparam, msg, hwndID ){
if (wparam = 2){
if(TogWinTab:=!TogWinTab){
Gui,Main:Show,w150 h40 NA
classButton[ "GuiContext" ].Default_Bitmap := PNG.A2
classButton[ "GuiContext" ].Hover_Bitmap   := PNG.AH2
classButton[ "GuiContext" ].Draw_Default()
If (Macro = 1)
FocusClient()
} else {
Gui,Main:Show,h590 w490 NA
classButton[ "GuiContext" ].Default_Bitmap := PNG.A1
classButton[ "GuiContext" ].Hover_Bitmap   := PNG.AH1
classButton[ "GuiContext" ].Draw_Default()
}
}
}
AHK_NOTIFYICON(wParam, lParam, uMsg, hWnd){
if (lParam = 0x201){
If !WinActive("MH -")
WinActivate, MH -
}
}
Button_Hover( wparam, lparam, msg, hwndID ){
Static Index , Hover_On, Key
MouseGetPos,,,, ctrl , 2
if( ! Hover_On && ctrl){
For Key, GuiInfo in classButton
if( ctrl = classButton[ Key ].GuiHwnd ){
classButton[ Key ].Draw_Hover() , Key := Key , Hover_On := 1
break 1
}
} else if ( Hover_On = 1 ){
if( ctrl != classButton[ Key ].GuiHwnd && classButton[ Key ].Default_Bitmap )
classButton[ Key ].Draw_Default() , Hover_On := 0 , break
if( ctrl != classButton[ Key ].GuiHwnd && classButton[ Key ].On_Bitmap)
classButton[ Key ].Draw()  , Hover_On := 0 , break
}
if (wparam = 1 && MoveTest = 0)
PostMessage, 0xA1, 2,,, A
}
WM_Char(wP) {
OnlyNumber := InStr(A_GuiControl, "Percet") ? 1 : 0
If (OnlyNumber == 0)
Return
If (wP = 8)
Return
wP := Chr(wP)
If wP is not digit
{
Gui, Submit, NoHide
Return, 0
}
}
HotkeyRemane(TValor){
TValor := Format("{:T}", TValor)
TValor := StrReplace(TValor, "+", "Shift+")
TValor := StrReplace(TValor, "^", "Ctrl+")
TValor := StrReplace(TValor, "!", "Alt+")
Return TValor
}
class IMG_Button	{
__New( x := 0 , y := 0,w := 0 , h := 0 ,PNG1:= 0,PNG2:= 0, Window := "1" , Label := "",Name := ""){
bw := w , bh := h
This.X := x, This.Y := y, This.W := w, This.H := h
This.Window := Window, This.Label := Label
This.Name := Name
This.Default_Bitmap := PNG1
This.Hover_Bitmap   := PNG2
This.Create_Trigger()
This.Draw_Default()
}
Create_Trigger(){
static
num := classButton.Length()+1
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y " 0xE hwndGuiHwnd v" Num " g" This.Label
This.Number := Num , This.GuiHwnd := GuiHwnd
}
Draw_Default(){
SetImage( This.GuiHwnd , This.Default_Bitmap )
}
Draw_Hover(){
SetImage( This.GuiHwnd , This.Hover_Bitmap )
}
Draw_Pressed(){
SetImage( This.GuiHwnd , This.Default_Bitmap )
MoveTest := 1
While( GetKeyState( "LButton" ) )
sleep , 10
MoveTest := 0
MouseGetPos,,,, ctrl , 2
if( This.GuiHwnd != ctrl ){
return False
} else {
This.Draw_Hover()
return True
}
}
}
class IMG_Switch {
__New(x, y, bw:=20,bh:=20,Valor:=0, Window:="1",PNG1:=0,PNG2:=0, GuiColor:="333333", ArrayNumber:="", Label:= ""){
This.Array := Valor
This.State := Valor[ArrayNumber]
This.ArrayNumber := ArrayNumber
This.Label := Label
This.X:=x, This.Y:=y, This.W:=bw, This.H:=bh
This.GuiColor:= "0xFF" GuiColor
This.Window:=Window
This.On_Bitmap  := PNG1
This.Off_Bitmap := PNG2
This.Create_Bitmap()
This.Create_Trigger()
This.Draw()
}
Create_Trigger(){
num := classButton.Length()+1
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y  " 0xE hwndGuiHwnd"
This.GuiHwnd:=GuiHwnd, This.Number := Num
BD := THIS.Switch_State.BIND( THIS )
GUICONTROL +G , % This.GuiHwnd , % BD
}
Create_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W, This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+1, This.H+1)
Gdip_DeleteBrush( Brush )
Gdip_DrawImage(G, This.On_Bitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
This.On_hBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+1, This.H+1)
Gdip_DeleteBrush( Brush )
Gdip_DrawImage(G, This.Off_Bitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
This.Off_hBitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
}
Draw(){
if(This.State)
SetImage( This.GuiHwnd , This.On_hBitmap )
else
SetImage( This.GuiHwnd , This.Off_hBitmap )
}
}
class Switch_Type1 {
__New(x, y, bw:=35, Window:="1", Name:="", Text:="", FontSize:= "10 Bold", FontColor:="FFFFFF", Font:="Tahoma", ArrayNumber:="", GuiColor:="333333", IniLocal:=""){
bh:= 20
This.Array := Name
This.State := Name[ArrayNumber]
This.ArrayNumber := ArrayNumber
This.GuiColor:= "0xFF" GuiColor
This.IniLocal := IniLocal
This.X:=x, This.Y:=y, This.W:=bw, This.H:=bh
This.Text:=Text, This.Font:=Font, This.FontSize:=FontSize
This.FontColor:= "0xFF" FontColor
This.Window:=Window
This.Create_Off_Bitmap()
This.Create_On_Bitmap()
This.Create_Trigger()
This.Draw()
}
Create_Trigger(){
num := classButton.Length()+1
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y  " 0xE hwndGuiHwnd"
This.GuiHwnd:=GuiHwnd, This.Number := Num
BD := THIS.Switch_State.BIND( THIS )
GUICONTROL +G , % This.GuiHwnd , % BD
}
Create_Off_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W, This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+1, This.H+1)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.FontColor )
Gdip_TextToGraphics( G , This.Text, "s" This.FontSize " vCenter c" Brush " x38 y1" , This.Font , This.W-38, This.H )
Gdip_DeleteBrush( Brush )
Gdip_DrawImage(G, PNG.Switch_Type2Off, 0, 0, 35, 20, 0, 0, 35, 20)
This.Off_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Pen := Gdip_CreatePen( "0x8242A5F5" , 1 )
Gdip_DrawRoundedRectangle( G, Pen, 0, 0, This.W-1, This.H-1, 2 )
Gdip_DeletePen( Pen )
This.Hover_Bitmap_Off := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
}
Create_On_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W, This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+1, This.H+1)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.FontColor )
Gdip_TextToGraphics( G , This.Text , "s" This.FontSize " vCenter c" Brush " x38 y1" , This.Font , This.W-38, This.H )
Gdip_DeleteBrush( Brush )
Gdip_DrawImage(G, PNG.Switch_Type2On, 0, 0, 35, 20, 0, 0, 35, 20)
This.On_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Pen := Gdip_CreatePen( "0x8242A5F5" , 1 )
Gdip_DrawRoundedRectangle( G, Pen, 0, 0, This.W-1, This.H-1, 2 )
Gdip_DeletePen( Pen )
This.Hover_Bitmap_On := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
}
Switch_State(){
MoveTest := 1
While( GetKeyState( "LButton" ) )
sleep , 10
MoveTest := 0
MouseGetPos,,,, ctrl , 2
if(ctrl != This.GuiHwnd)
return
This.State:=!This.State
Ini[This.Array.1][This.ArrayNumber] := This.State
Local:=This.IniLocal
IniWriteArray(Ini[This.Array.1],This.Array.1,%Local%)
This.Draw_Hover()
}
Draw(){
if(This.State)
SetImage( This.GuiHwnd , This.On_Bitmap )
else
SetImage( This.GuiHwnd , This.Off_Bitmap )
}
Draw_Hover(){
if(This.State)
SetImage( This.GuiHwnd , This.Hover_Bitmap_On )
else
SetImage( This.GuiHwnd , This.Hover_Bitmap_Off )
}
}
class Switch_Type2 {
__New(x, y, bw:=35, Window:="1", Name:="", Text:="", FontSize:= "10 Bold", FontColor:="FFFFFF", Font:="Tahoma", ArrayNumber:="", GuiColor:="333333", IniLocal:=""){
bh:= 20
This.Array := Name
This.State := Name[ArrayNumber]
This.ArrayNumber := ArrayNumber
This.GuiColor := "0xFF" GuiColor
This.IniLocal := IniLocal
This.X:=x, This.Y:=y, This.W:=bw, This.H:=bh
This.Text:=Text, This.Font:=Font, This.FontSize:=FontSize
This.FontColor:= "0xFF" FontColor
This.Window:=Window
This.Create_Off_Bitmap()
This.Create_On_Bitmap()
This.Create_Trigger()
This.Draw()
}
Create_Trigger(){
num := classButton.Length()+1
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y  " 0xE hwndGuiHwnd"
This.GuiHwnd:=GuiHwnd, This.Number := Num
BD := THIS.Switch_State.BIND( THIS )
GUICONTROL +G , % This.GuiHwnd , % BD
}
Create_Off_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W, This.H+1 )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 4 )
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+1, This.H+2)
Gdip_DeleteBrush( Brush )
Gdip_DrawImage(G, PNG.Switch_Type2Off, 0, 0, 35, 20, 0, 0, 35, 20)
This.Off_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Pen := Gdip_CreatePen( "0x8242A5F5" , 1 )
Gdip_DrawRoundedRectangle( G, Pen, 0, 0, This.W-1, This.H, 10 )
Gdip_DeletePen( Pen )
This.Hover_Bitmap_Off := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
}
Create_On_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W, This.H+1 )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 4 )
Brush := Gdip_BrushCreateSolid( This.GuiColor )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+1, This.H+2)
Gdip_DeleteBrush( Brush )
Gdip_DrawImage(G, PNG.Switch_Type2On, 0, 0, 35, 20, 0, 0, 35, 20)
This.On_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Pen := Gdip_CreatePen( "0x8242A5F5" , 1 )
Gdip_DrawRoundedRectangle( G, Pen, 0, 0, This.W-1, This.H, 10 )
Gdip_DeletePen( Pen )
This.Hover_Bitmap_On := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
}
Switch_State(){
MoveTest := 1
While( GetKeyState( "LButton" ) )
sleep , 10
MoveTest := 0
MouseGetPos,,,, ctrl , 2
if(ctrl != This.GuiHwnd)
return
This.State:=!This.State
Ini[This.Array.1][This.ArrayNumber] := This.State
if(ValidateFields()){
This.State:=!This.State
Ini[This.Array.1][This.ArrayNumber] := This.State
This.Draw()
return
}
Local:=This.IniLocal
IniWriteArray(Ini[This.Array.1],This.Array.1,%Local%)
PopulateFields()
If (Macro)
Data.PotionConfig:=1
This.Draw_Hover()
}
Draw(){
if(This.State)
SetImage( This.GuiHwnd , This.On_Bitmap )
else
SetImage( This.GuiHwnd , This.Off_Bitmap )
}
Draw_Hover(){
if(This.State)
SetImage( This.GuiHwnd , This.Hover_Bitmap_On )
else
SetImage( This.GuiHwnd , This.Hover_Bitmap_Off )
}
}
class Group_Box {
__New(x, y, w, h, Window:=1, Text:="GroupBox"){
This.X:=x, This.Y:=y, This.W := w , This.H := h+20
This.Text := Text, This.Window:=Window
pBitmap:=Gdip_CreateBitmap( This.W, This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( "0xFF333333" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 22 , This.W-1, This.H-23, 4)
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF202225" , 1 )
Gdip_DrawRoundedRectangle( G, Pen, 0, 22, This.W-1, This.H-23, 4)
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( "0xFFFFFFFF" )
Gdip_DrawOrientedString(G, This.Text, "Tahoma", 13, 1, 1, 0, This.W-1, 20,, Brush,, 0)
Gdip_DeleteBrush( Brush )
This.Default_Bitmap := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y " w" This.W " h" This.H, % "HBITMAP:*" This.Default_Bitmap
}
}
class Button_Type_1	{
__New( x:=10,y:=10,w:=150,h:=40,Button_Color:="FF0000",Button_Background_Color:="222222",Text:="Button",Font:="Arial",Font_Size:=16,Font_Color_Top:="000000",Font_Color_Bottom:="FFFFFF",Window:="1",Label:="",Roundness:=5,Name:="" ){
This.Roundness:=Roundness
This.Text_Color_Top := "0xFF" Font_Color_Top
This.Text_Color_Bottom := "0xFF" Font_Color_Bottom
This.Font := Font
This.Font_Size := Font_Size
This.Text := Text
This.Name := Name
This.X := x
This.Y := y
This.W := w
This.H := h
This.Button_Background_Color := "0xFF" Button_Background_Color
This.Button_Color := "0xFF" Button_Color
This.Window := Window
This.Label := Label
This.Create_Default_Bitmap()
This.Create_Hover_Bitmap()
This.Create_Pressed_Bitmap()
This.Create_Trigger()
sleep, 20
This.Draw_Default()
}
Create_Trigger(){
static
Num := This.Name = "" ? classButton.Length()+1 : This.Name
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y " w" This.W " h" This.H " hwndGuiHwnd v" Num " g" This.Label " 0xE"
This.Number := Num , This.GuiHwnd := GuiHwnd
}
Create_Default_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Button_Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF61646A" , "0xFF2E2124" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF4C4F54" , "0xFF35373B" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-2 , This.H-5 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W-1 , This.H-3 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Bottom )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y2 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Top )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Default_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Hover_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Button_Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF61646A" , "0xFF2E2124" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF55585D" , "0xFF3B3E41" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-2 , This.H-5 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W-1 , This.H-3 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Bottom )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y2" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Top )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Hover_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Pressed_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Button_Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF2A2C2E" , "0xFF45474E" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF2A2C2E" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W , This.H-8 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF46474D" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 7 , This.W , This.H-8 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 5 , 3 , This.W ,This.H-7 , "0xFF333639" , "0xFF43474B" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-3 , This.H-6 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W-1 , This.H-3 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Bottom )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y3" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Top )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y2" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Pressed_Bitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
Gdip_DisposeImage( pBitmap )
}
Editor(Text,Font_Color_Top){
This.Text_Color_Top := "0xFF" Font_Color_Top
This.Text := Text
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Button_Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF61646A" , "0xFF2E2124" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF4C4F54" , "0xFF35373B" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-2 , This.H-5 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W-1 , This.H-3 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Bottom )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y2 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Top )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Default_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Button_Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF61646A" , "0xFF2E2124" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF55585D" , "0xFF3B3E41" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-2 , This.H-5 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W-1 , This.H-3 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Bottom )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y2" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Top )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Hover_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Button_Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2 , This.H+2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 0 , 0 , This.W , This.H , "0xFF2A2C2E" , "0xFF45474E" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 0 , 1 , This.W , This.H-3 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF2A2C2E" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W , This.H-8 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF46474D" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 7 , This.W , This.H-8 , This.Roundness )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 5 , 3 , This.W ,This.H-7 , "0xFF333639" , "0xFF43474B" , 1 , 1 )
Gdip_FillRoundedRectangle( G , Brush , 1 , 2 , This.W-3 , This.H-6 , This.Roundness )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 0 , 0 , This.W-1 , This.H-3 , This.Roundness )
Gdip_DeletePen( Pen )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Bottom )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x1 y3" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color_Top )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y2" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Pressed_Bitmap := Gdip_CreateHBITMAPFromBitmap( pBitmap )
Gdip_DisposeImage( pBitmap )
SetImage( This.GuiHwnd , This.Hover_Bitmap )
}
Draw_Default(){
SetImage( This.GuiHwnd , This.Default_Bitmap )
}
Draw_Hover(){
SetImage( This.GuiHwnd , This.Hover_Bitmap )
}
Draw_Pressed(){
SetImage( This.GuiHwnd , This.Pressed_Bitmap )
MoveTest := 1
While( GetKeyState( "LButton" ) )
sleep , 10
MoveTest := 0
MouseGetPos,,,, ctrl , 2
if( This.GuiHwnd != ctrl ){
This.Draw_Default()
return False
}else	{
This.Draw_Hover()
return true
}
}
}
class Button_Type_2	{
__New( x := 10 , y := 10 , w := 150 , h := 40 , Gui_Color := "333333", Default_Color := "222222", Line_Color := "FFFFFF", Hover_Color := "222222" , Text := "Button" , Font := "Arial" , Font_Size := 16 , Font_Color := "000000" , Window := "1" , Label := "", Roundness:=5){
This.Roundness:=Roundness
This.Text_Color := "0xFF" Font_Color
This.Font := Font
This.Font_Size := Font_Size
This.Text := Text
This.X := x
This.Y := y
This.W := w
This.H := h
This.Gui_Color := "0xFF" Gui_Color
This.Line_Color := "0xFF" Line_Color
This.Default_Color := "0xFF" Default_Color
This.Hover_Color := "0xFF" Hover_Color
This.Button_Color := "0xFF" Button_Color
This.Window := Window
This.Label := Label
This.Create_Default_Bitmap()
This.Create_Hover_Bitmap()
This.Create_Pressed_Bitmap()
This.Create_Trigger()
sleep, 20
This.Draw_Default()
}
Create_Trigger(){
static
num := classButton.Length()+1
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y " w" This.W " h" This.H " hwndGuiHwnd v" Num " g" This.Label " 0xE"
This.Number := Num , This.GuiHwnd := GuiHwnd
}
Create_Default_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Gui_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2, This.H+2)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Line_Color )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Default_Color )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 , This.W-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Default_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Hover_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Gui_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W+2, This.H+2)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Line_Color )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Hover_Color )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 , This.W-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( This.Text_Color )
Gdip_TextToGraphics( G , This.Text , "s" This.Font_Size " Center vCenter c" Brush " x0 y1" , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Hover_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Pressed_Bitmap(){
This.Pressed_Bitmap := This.Default_Bitmap
}
Draw_Default(){
SetImage( This.GuiHwnd , This.Default_Bitmap )
}
Draw_Hover(){
SetImage( This.GuiHwnd , This.Hover_Bitmap )
}
Draw_Pressed(){
SetImage( This.GuiHwnd , This.Pressed_Bitmap )
MoveTest := 1
While( GetKeyState( "LButton" ) )
sleep , 10
MoveTest := 0
MouseGetPos,,,, ctrl , 2
if( This.GuiHwnd != ctrl ){
This.Draw_Default()
return False
}else	{
This.Draw_Hover()
return true
}
}
}
class Flat_UpDown_Type_1 {
__New(x,y,Window:="1",Name:="",Min_Range:=0,Max_Range:=20,Interval:=1){
Temp := StrSplit(Name, ".")
Name := Temp.1, Valor := Temp.2
This.Array := Valor
This.Name := Name
This.Value := %Name%[Valor]
This.Arrow_Color_Default_Saved:="0xFFB6B7B9"
This.Arrow_Color_Default:="0xFFFFFFFF"
This.Arrow_Color_Pressed_Saved:="0xFFa6a7a9"
This.Arrow_Color_Pressed:="0xFF5f5f5f"
This.Interval:=Interval
This.X:=x
This.Y:=y
This.W:=58
This.H:=26
This.Min_Range:=Min_Range
This.Max_Range:=Max_Range
This.Background_Color:="0xFF333333"
This.Window:=Window
This.Create_Default_Bitmap()
This.Create_Up_Bitmap()
This.Create_Down_Bitmap()
This.Create_Trigger()
sleep,20
This.Draw_Default()
}
Create_Trigger(){
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y " w" This.W " h" This.H " 0xE hwndGuiHwnd"
This.GuiHwnd := GuiHwnd
Gui , % This.Window ": Add" , Text , % "x" This.X + 43 " y" This.Y + 1 " w12 h12 BackgroundTrans hwndGuiHwnd"
This.Hwnd2 := GuiHwnd
BD := THIS.Add_Value.BIND( THIS )
GUICONTROL +G , % This.Hwnd2 , % BD
Gui , % This.Window ": Add" , Text , % "x" This.X + 43 " y" This.Y + 14 " w12 h12 BackgroundTrans hwndGuiHwnd"
This.Hwnd3 := GuiHwnd
BD := THIS.Subtract_Value.BIND( THIS )
GUICONTROL +G , % This.Hwnd3 , % BD
Gui , % This.Window ":Font" , cWhite s8 Bold , Segoe UI
Gui , % This.Window ": Add" , Edit , % "x" This.X + 5 " y" This.Y + 5 " w37 h16 -E0x200 Center ReadOnly hwndGuiHwnd" , % This.Value
This.Hwnd4:=GuiHwnd
}
Create_Default_Bitmap(){
pBitmap:=Gdip_CreateBitmap( 58 , 26 )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , 62 , 28 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF4B4D53" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 6 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF292B2C" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 3 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF353738" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 5 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF5F6369" )
Gdip_FillRectangle( G , Brush , 43 , 3 , 11 , 10 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF404347" )
Gdip_FillRectangle( G , Brush , 44 , 4 , 9 , 8 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF5F6369" )
Gdip_FillRectangle( G , Brush , 43 , 12 , 11 , 10 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF404347" )
Gdip_FillRectangle( G , Brush , 44 , 14 , 9 , 8 )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 3 , 43 , 22 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 13 , 53 , 13 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 46 , 9 , 51 , 9 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 47 , 8 , 50 , 8 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 48 , 7 , 49 , 7 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 46 , 17 , 51 , 17 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 47 , 18 , 50 , 18 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 48 , 19 , 49 , 19 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 3 , 3 , 51 , 19 , 1 )
Gdip_DeletePen( Pen )
Gdip_DeleteGraphics( G )
This.Default_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Up_Bitmap(){
pBitmap:=Gdip_CreateBitmap( 58 , 26 )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , 62 , 28 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF4B4D53" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 6 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF292B2C" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 3 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF353738" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 5 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 43 , 3 , 42 , 11 , "0xFF1E2024" , "0xFF45484D" , 1 , 1 )
Gdip_FillRectangle( G , Brush , 43 , 3 , 11 , 10 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF5F6369" )
Gdip_FillRectangle( G , Brush , 43 , 13 , 11 , 9 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF404347" )
Gdip_FillRectangle( G , Brush , 44 , 14 , 9 , 8 )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 3 , 43 , 22 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF2A2C2F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 13 , 53 , 13 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF2A2C2F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 12 , 43 , 3 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Pressed , 1 )
Gdip_DrawLine( G , Pen , 46 , 9 , 51 , 9 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Pressed , 1 )
Gdip_DrawLine( G , Pen , 47 , 8 , 50 , 8 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Pressed , 1 )
Gdip_DrawLine( G , Pen , 48 , 7 , 49 , 7 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 46 , 17 , 51 , 17 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 47 , 18 , 50 , 18 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 48 , 19 , 49 , 19 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 3 , 3 , 51 , 19 , 1 )
Gdip_DeletePen( Pen )
Gdip_DeleteGraphics( G )
This.Up_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Down_Bitmap(){
pBitmap:=Gdip_CreateBitmap( 58 , 26 )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Background_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , 62 , 28 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF4B4D53" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 6 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF292B2C" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 3 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF353738" )
Gdip_FillRoundedRectangle( G , Brush , 3 , 5 , 51 , 17 , 2 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_CreateLineBrushFromRect( 44 , 11 , 8 , 11 , "0xFF1E2024" , "0xFF45484D" , 1 , 1 )
Gdip_FillRectangle( G , Brush , 43 , 11 , 11 , 10 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF5F6369" )
Gdip_FillRectangle( G , Brush , 43 , 3 , 11 , 9 )
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF404347" )
Gdip_FillRectangle( G , Brush , 44 , 4 , 9 , 8 )
Gdip_DeleteBrush( Brush )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 3 , 43 , 22 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF2A2C2F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 13 , 53 , 13 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF2A2C2F" , 1 )
Gdip_DrawLine( G , Pen , 43 , 21 , 43 , 13 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 46 , 9 , 51 , 9 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 47 , 8 , 50 , 8 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Default , 1 )
Gdip_DrawLine( G , Pen , 48 , 7 , 49 , 7 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Pressed , 1 )
Gdip_DrawLine( G , Pen , 46 , 17 , 51 , 17 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Pressed , 1 )
Gdip_DrawLine( G , Pen , 47 , 18 , 50 , 18 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( This.Arrow_Color_Pressed , 1 )
Gdip_DrawLine( G , Pen , 48 , 19 , 49 , 19 )
Gdip_DeletePen( Pen )
Pen := Gdip_CreatePen( "0xFF1A1C1F" , 1 )
Gdip_DrawRoundedRectangle( G , Pen , 3 , 3 , 51 , 19 , 1 )
Gdip_DeletePen( Pen )
Gdip_DeleteGraphics( G )
This.Down_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Draw_Default(){
SetImage( This.GuiHwnd , This.Default_Bitmap )
}
Draw_Up(){
SetImage( This.GuiHwnd , This.Up_Bitmap )
}
Draw_Down(){
SetImage( This.GuiHwnd , This.Down_Bitmap )
}
Add_Value(){
GuiControl , % This.Window ": Focus" , % This.GuiHwnd
This.Draw_Up()
GuiControl , % This.Window ": +Redraw" ,% This.hwnd4
While( GetKeyState( "LButton" ) )
sleep , 10
This.Draw_Default()
If ((CtrlValue := This.Value) < This.Max_Range) {
CtrlValue += This.Interval
If CtrlValue Is Float
CtrlValue := Format("{1:0.2f}", CtrlValue)
}else if((CtrlValue := This.Value) >= This.Max_Range) {
If CtrlValue Is Float
CtrlValue := Format("{1:0.2f}", CtrlValue)
}
Name:=This.Name
Valor:=This.Array
%Name%[Valor]:=CtrlValue
Loop % %Name%.Length()
arrayS.= %Name%[A_Index] . "|"
StringTrimRight, arrayS, arrayS, 1
iniwrite, %arrayS%, %settingsFile%, Options, % Name
GuiControl, , % This.HWND4 , % (This.Value := CtrlValue)
}
Subtract_Value(){
GuiControl , % This.Window ": Focus" , % This.GuiHwnd
This.Draw_Down()
GuiControl , % This.Window ": +Redraw" ,% This.hwnd4
While( GetKeyState( "LButton" ) )
sleep , 10
This.Draw_Default()
If ((CtrlValue := This.Value) > This.Min_Range) {
CtrlValue -= This.Interval
If CtrlValue Is Float
CtrlValue := Format("{1:0.2f}", CtrlValue)
}else if((CtrlValue := This.Value) <= This.Min_Range){
If CtrlValue Is Float
CtrlValue := Format("{1:0.2f}", CtrlValue)
}
Name:=This.Name
Valor:=This.Array
%Name%[Valor]:=CtrlValue
Loop % %Name%.Length()
arrayS.= %Name%[A_Index] . "|"
StringTrimRight, arrayS, arrayS, 1
iniwrite, %arrayS%, %settingsFile%, Options, % Name
GuiControl, , % This.HWND4 , % (This.Value := CtrlValue)
}
}
class Tabs_Type_1_2	{
__New( x:=10 , y:=10 , w:=150 , h:=40 , Gui_Color:="333333", Text:="Button" , Font:="Arial" , Font_Size:=16 , Font_Color := "fefefe" , Window:="1", Labelg:="", Roundness:=5,Tabs_Number:=2){
This.Roundness:=Roundness
This.Font_Color := "0xFF" Font_Color
This.Font := Font
This.Font_Size := Font_Size
Temp := StrSplit(Text, "|")
This.Text1 := Temp.1
This.Text2 := Temp.2
This.X := x
This.Y := y
This.W := w
This.H := h
This.Gui_Color := "0xFF" Gui_Color
This.Window := Window
This.Labelg := Labelg
This.Tabs_Number := Tabs_Number
This.Create_Bk_Bitmap()
This.Create_Default_Bitmap()
This.Create_Active_Bitmap()
This.Create_Trigger()
sleep, 5
This.Draw_Default()
}
Create_Trigger(){
static
Labelv :=  "Tab1"
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndr := GuiHwnd
Labelv :=  "Tab2"
Gui , % This.Window ": Add" , Picture , % "x" This.X+This.W " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndl := GuiHwnd
}
Create_Bk_Bitmap(){
Testw1:=This.W*3
pBitmap:=Gdip_CreateBitmap( This.W*2 , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Gui_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W*2+2, This.H+2)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF47413c" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W*2-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF333333" )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 ,This.W*2-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
CropBitmap := Gdip_CreateBitmap(This.W, This.H)
G := Gdip_GraphicsFromImage(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
This.BKr_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, This.W, 0, This.W, This.H)
This.BKl_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DeleteGraphics(G)
Gdip_DisposeImage(CropBitmap)
This.Bk_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Default_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKr_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text1 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultr_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKl_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text2, "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultl_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Active_Bitmap(){
AciveBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( AciveBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( "0xFFaea693" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF998f76" )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 ,This.W-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKr_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text1 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activer_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKl_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text2 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activel_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
Gdip_DisposeImage(AciveBitmap)
}
Draw_Default(){
SetImage( This.GuiHwndr , This.Activer_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
Draw_Active(Label:=""){
If (Label="Tab1"){
SetImage( This.GuiHwndr , This.Activer_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
else if(Label="Tab2"){
SetImage( This.GuiHwndl , This.Activel_Bitmap )
SetImage( This.GuiHwndr , This.Defaultr_Bitmap )
}
}
}
class Tabs_Type_1_3	{
__New( x:=10 , y:=10 , w:=150 , h:=40 , Gui_Color:="333333", Text:="Button" , Font:="Arial" , Font_Size:=16 , Font_Color := "fefefe" , Window:="1", Labelg:="", Roundness:=5,Tabs_Number:=2){
This.Roundness:=Roundness
This.Font_Color := "0xFF" Font_Color
This.Font := Font
This.Font_Size := Font_Size
Temp := StrSplit(Text, "|")
This.Text1 := Temp.1
This.Text2 := Temp.2
This.Text3 := Temp.3
This.X := x
This.Y := y
This.W := w
This.H := h
This.Gui_Color := "0xFF" Gui_Color
This.Window := Window
This.Labelg := Labelg
This.Tabs_Number := Tabs_Number
This.Create_Bk_Bitmap()
This.Create_Default_Bitmap()
This.Create_Active_Bitmap()
This.Create_Trigger()
sleep, 5
This.Draw_Default()
}
Create_Trigger(){
static
Labelv :=  "Tab1"
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndr := GuiHwnd
Labelv :=  "Tab2"
Gui , % This.Window ": Add" , Picture , % "x" This.X+This.W " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndm := GuiHwnd
Labelv :=  "Tab3"
Gui , % This.Window ": Add" , Picture , % "x" This.X+This.W*2 " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndl := GuiHwnd
}
Create_Bk_Bitmap(){
Testw1:=This.W*3
pBitmap:=Gdip_CreateBitmap( This.W*3 , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Gui_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W*3+2, This.H+2)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF47413c" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W*3-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF333333" )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 ,This.W*3-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
CropBitmap := Gdip_CreateBitmap(This.W, This.H)
G := Gdip_GraphicsFromImage(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
This.BKr_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, This.W, 0, This.W, This.H)
This.BKm_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, This.W*2, 0, This.W, This.H)
This.BKl_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DeleteGraphics(G)
Gdip_DisposeImage(CropBitmap)
This.Bk_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Default_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKr_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text1 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultr_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKm_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text2, "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultm_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKl_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text3, "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultl_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Active_Bitmap(){
AciveBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( AciveBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( "0xFFaea693" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF998f76" )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 ,This.W-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKr_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text1 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activer_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKm_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text2 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activem_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKl_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text3 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activel_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
Gdip_DisposeImage(AciveBitmap)
}
Draw_Default(){
SetImage( This.GuiHwndr , This.Activer_Bitmap )
SetImage( This.GuiHwndm , This.Defaultm_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
Draw_Active(Label:=""){
If (Label="Tab1"){
SetImage( This.GuiHwndr , This.Activer_Bitmap )
SetImage( This.GuiHwndm , This.Defaultm_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
else if(Label="Tab2"){
SetImage( This.GuiHwndm , This.Activem_Bitmap )
SetImage( This.GuiHwndr , This.Defaultr_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
else if(Label="Tab3"){
SetImage( This.GuiHwndl , This.Activel_Bitmap )
SetImage( This.GuiHwndr , This.Defaultr_Bitmap )
SetImage( This.GuiHwndm , This.Defaultm_Bitmap )
}
}
}
class Tabs_Type_1_4	{
__New( x:=10 , y:=10 , w:=150 , h:=40 , Gui_Color:="333333", Text:="Button" , Font:="Arial" , Font_Size:=16 , Font_Color := "fefefe" , Window:="1", Labelg:="", Roundness:=5,Tabs_Number:=2){
This.Roundness:=Roundness
This.Font_Color := "0xFF" Font_Color
This.Font := Font
This.Font_Size := Font_Size
Temp := StrSplit(Text, "|")
This.Text1 := Temp.1
This.Text2 := Temp.2
This.Text3 := Temp.3
This.Text4 := Temp.4
This.X := x
This.Y := y
This.W := w
This.H := h
This.Gui_Color := "0xFF" Gui_Color
This.Window := Window
This.Labelg := Labelg
This.Tabs_Number := Tabs_Number
This.Create_Bk_Bitmap()
This.Create_Default_Bitmap()
This.Create_Active_Bitmap()
This.Create_Trigger()
sleep, 5
This.Draw_Default()
}
Create_Trigger(){
static
Labelv :=  "Tab1"
Gui , % This.Window ": Add" , Picture , % "x" This.X " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndr := GuiHwnd
Labelv :=  "Tab2"
Gui , % This.Window ": Add" , Picture , % "x" This.X+This.W " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndm1 := GuiHwnd
Labelv :=  "Tab3"
Gui , % This.Window ": Add" , Picture , % "x" This.X+This.W*2 " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndm2 := GuiHwnd
Labelv :=  "Tab4"
Gui , % This.Window ": Add" , Picture , % "x" This.X+This.W*3 " y" This.Y  " w" This.W " h" This.H " hwndGuiHwnd v" Labelv " g" This.Labelg " 0xE"
This.GuiHwndl := GuiHwnd
}
Create_Bk_Bitmap(){
Testw1:=This.W*3
pBitmap:=Gdip_CreateBitmap( This.W*3 , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( This.Gui_Color )
Gdip_FillRectangle( G , Brush , -1 , -1 , This.W*3+2, This.H+2)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF47413c" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W*3-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF333333" )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 ,This.W*3-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
CropBitmap := Gdip_CreateBitmap(This.W, This.H)
G := Gdip_GraphicsFromImage(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
This.BKr_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, This.W, 0, This.W, This.H)
This.BKm_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DrawImage(G, pBitmap, 0, 0, This.W, This.H, This.W*2, 0, This.W, This.H)
This.BKl_Bitmap := Gdip_CreateHBITMAPFromBitmap(CropBitmap)
Gdip_DeleteGraphics(G)
Gdip_DisposeImage(CropBitmap)
This.Bk_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Default_Bitmap(){
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKr_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text1 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultr_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKm_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text2, "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultm1_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKm_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text3, "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultm2_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKl_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text4, "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
This.Defaultl_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DisposeImage(pBitmap)
}
Create_Active_Bitmap(){
AciveBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( AciveBitmap )
Gdip_SetSmoothingMode( G , 2 )
Brush := Gdip_BrushCreateSolid( "0xFFaea693" )
Gdip_FillRoundedRectangle( G , Brush , 0 , 0 , This.W-1, This.H-1, This.Roundness)
Gdip_DeleteBrush( Brush )
Brush := Gdip_BrushCreateSolid( "0xFF998f76" )
Gdip_FillRoundedRectangle( G , Brush , 2 , 2 ,This.W-5, This.H-5, This.Roundness-3)
Gdip_DeleteBrush( Brush )
Gdip_DeleteGraphics( G )
pBitmap:=Gdip_CreateBitmap( This.W , This.H )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKr_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text1 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activer_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKm_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text2 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activem1_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKm_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text3 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activem2_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
G := Gdip_GraphicsFromImage( pBitmap )
Gdip_SetSmoothingMode( G , 2 )
BackgroundIMG := Gdip_CreateBitmapFromHBITMAP(This.BKl_Bitmap)
Gdip_DrawImage(G, BackgroundIMG, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Gdip_DrawImage(G, AciveBitmap, 0, 0, This.W, This.H, 0, 0, This.W, This.H)
Brush := Gdip_BrushCreateSolid( This.Font_Color )
Gdip_TextToGraphics( G , This.Text4 , "s" This.Font_Size " Center vCenter c" Brush " x0 y1 " , This.Font , This.W , This.H-1 )
Gdip_DeleteBrush( Brush )
This.Activel_Bitmap := Gdip_CreateHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G )
Gdip_DisposeImage(pBitmap)
Gdip_DisposeImage(AciveBitmap)
}
Draw_Default(){
SetImage( This.GuiHwndr , This.Activer_Bitmap )
SetImage( This.GuiHwndm1 , This.Defaultm1_Bitmap )
SetImage( This.GuiHwndm2 , This.Defaultm2_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
Draw_Active(Label:=""){
If (Label="Tab1"){
SetImage( This.GuiHwndr , This.Activer_Bitmap )
SetImage( This.GuiHwndm1 , This.Defaultm1_Bitmap )
SetImage( This.GuiHwndm2 , This.Defaultm2_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
else if(Label="Tab2"){
SetImage( This.GuiHwndm1 , This.Activem1_Bitmap )
SetImage( This.GuiHwndm2 , This.Defaultm2_Bitmap )
SetImage( This.GuiHwndr , This.Defaultr_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
else if(Label="Tab3"){
SetImage( This.GuiHwndm2 , This.Activem2_Bitmap )
SetImage( This.GuiHwndm1 , This.Defaultm1_Bitmap )
SetImage( This.GuiHwndr , This.Defaultr_Bitmap )
SetImage( This.GuiHwndl , This.Defaultl_Bitmap )
}
else if(Label="Tab4"){
SetImage( This.GuiHwndl , This.Activel_Bitmap )
SetImage( This.GuiHwndr , This.Defaultr_Bitmap )
SetImage( This.GuiHwndm1 , This.Defaultm1_Bitmap )
SetImage( This.GuiHwndm2 , This.Defaultm2_Bitmap )
}
}
}
class StatusBar {
__New(PNG,Options,Label,Window) {
static BarBitmap,BarGraphic,BarBrush
This.W := 102, This.H := 9
If (!BarBitmap){
BarBitmap := Gdip_CreateBitmap(This.W, This.H)
BarGraphic:= Gdip_GraphicsFromImage(BarBitmap)
BarBrush := Gdip_BrushCreateSolid("0xFF444444")
Gdip_DeleteGraphics( G )
}
This.PNG    := PNG
This.BarBitmap:= BarBitmap
This.BarGraphic:= BarGraphic
This.BarBrush := BarBrush
This.Label := Label
This.Window := Window
Gui, % This.Window ": Add" , Picture , % Options " w" This.W " h" This.H " 0xE hwndHwnd", % Label
This.Hwnd := Hwnd
This.Set(0)
}
Set(Valor) {
Valor := Valor > 100 ? 100 : Valor < 0 ? 0 : Valor
if (This.Valor != Valor)
This.Draw(Valor)
}
Draw(Valor) {
OldBarHBITMAP := This.BarHBITMAP
Gdip_DrawImageFast(This.BarGraphic, PNG[This.PNG], 0, 0)
Gdip_FillRectangle(This.BarGraphic, This.BarBrush, 1 + Valor, 1, 102 - Valor - 2, 7)
This.BarHBITMAP := Gdip_CreateARGBHBITMAPFromBitmap(This.BarBitmap)
This.Valor := Valor
SetImage( This.Hwnd , This.BarHBITMAP )
DllCall("DeleteObject", "Ptr", OldBarHBITMAP)
}
}
CreateFormData(ByRef retData, ByRef retHeader, objParam) {
New CreateFormData(retData, retHeader, objParam)
}
Class CreateFormData {
__New(ByRef retData, ByRef retHeader, objParam) {
Local CRLF := "`r`n", i, k, v, str, pvData
Local Boundary := this.RandomBoundary()
Local BoundaryLine := "------------------------------" . Boundary
this.Len := 0
this.Ptr := DllCall( "GlobalAlloc", "UInt",0x40, "UInt",1, "Ptr"  )
For k, v in objParam
{
If IsObject(v) {
For i, FileName in v
{
str := BoundaryLine . CRLF
. "Content-Disposition: form-data; name=""" . k . """; filename=""" . FileName . """" . CRLF
. "Content-Type: " . this.MimeType(FileName) . CRLF . CRLF
this.StrPutUTF8( str )
this.LoadFromFile( Filename )
this.StrPutUTF8( CRLF )
}
} Else {
str := BoundaryLine . CRLF
. "Content-Disposition: form-data; name=""" . k """" . CRLF . CRLF
. v . CRLF
this.StrPutUTF8( str )
}
}
this.StrPutUTF8( BoundaryLine . "--" . CRLF )
retData := ComObjArray( 0x11, this.Len )
pvData  := NumGet( ComObjValue( retData ) + 8 + A_PtrSize )
DllCall( "RtlMoveMemory", "Ptr",pvData, "Ptr",this.Ptr, "Ptr",this.Len )
this.Ptr := DllCall( "GlobalFree", "Ptr",this.Ptr, "Ptr" )
retHeader := "multipart/form-data; boundary=----------------------------" . Boundary
}
StrPutUTF8( str ) {
Local ReqSz := StrPut( str, "utf-8" ) - 1
this.Len += ReqSz
this.Ptr := DllCall( "GlobalReAlloc", "Ptr",this.Ptr, "UInt",this.len + 1, "UInt", 0x42 )
StrPut( str, this.Ptr + this.len - ReqSz, ReqSz, "utf-8" )
}
LoadFromFile( Filename ) {
Local objFile := FileOpen( FileName, "r" )
this.Len += objFile.Length
this.Ptr := DllCall( "GlobalReAlloc", "Ptr",this.Ptr, "UInt",this.len, "UInt", 0x42 )
objFile.RawRead( this.Ptr + this.Len - objFile.length, objFile.length )
objFile.Close()
}
RandomBoundary() {
str := "0|1|2|3|4|5|6|7|8|9|a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z"
Sort, str, D| Random
str := StrReplace(str, "|")
Return SubStr(str, 1, 12)
}
MimeType(FileName) {
n := FileOpen(FileName, "r").ReadUInt()
Return (n        = 0x474E5089) ? "image/png"
: (n        = 0x38464947) ? "image/gif"
: (n&0xFFFF = 0x4D42    ) ? "image/bmp"
: (n&0xFFFF = 0xD8FF    ) ? "image/jpeg"
: (n&0xFFFF = 0x4949    ) ? "image/tiff"
: (n&0xFFFF = 0x4D4D    ) ? "image/tiff"
: "application/octet-stream"
}
}
ArColor.Status := {HPFull: CorToDec("#C24A4A"), HP: CorToDec("#DB4F4F")
,MPFull: CorToDec("#38369C"), MP: CorToDec("#4340C0")}
ArColor.Conditions := { EatFood: CorToDec("#F6D48F"),      Haste: CorToDec("#B08B50"),  EnergyRing: CorToDec("#272DCC"),    LogoutBlock: CorToDec("#7E7E83")
,   CureParalyze: CorToDec("#E90404"),     Medusa: CorToDec("#808087"), CureBurning: CorToDec("#FECD0B"), ProtectionZone: CorToDec("#FFFFFF")
,        MedusaV: CorToDec("#254423"), CurePoison: CorToDec("#A8FFB5"),   CureCurse: CorToDec("#0A0A0A"),      UtamoVita: CorToDec("#9a1a37") }
ArColor.Cooldown := {MagicShield: CorToDec("#C4C764"), ExuraGranSio: CorToDec("#5F64EC"), UturaGran: CorToDec("#B9D9EB"), Utura: CorToDec("#D6EFFA"), UtitoTempoSan: CorToDec("#BECAD3"), ExuraGranIco: CorToDec("#939ADF"), ExuraMaxVita: CorToDec("#DAEDFE"), ExevoMasSan: CorToDec("#FEFAC2"), ExetaAmpRes: CorToDec("#D3AD9B"), Exori: CorToDec("#D2A16F"), ExoriGran: CorToDec("#8A4D9C"), ExoriMin: CorToDec("#A7A8A8"), ExoriMas: CorToDec("#33281F"), ExevoGranMasTera: CorToDec("#8C2A14"), ExevoGranMasFrigo: CorToDec("#2E628F"), ExevoGranMasFlam: CorToDec("#FAC567"), ExevoGranMasVis: CorToDec("#F2E4F6"), ExoriGranCon: CorToDec("#39DEEE"), ExoriHur: CorToDec("#757574"), ExoriGranIco: CorToDec("#856C59"), ExoriIco: CorToDec("#D6946E"), ExoriGranFrigo: CorToDec("#93B1CA"), ExoriMaxFrigo: CorToDec("#7493AD"), ExoriGranTera: CorToDec("#4A2B16"), ExoriMaxTera: CorToDec("#371D05"), ExevoFrigoHur: CorToDec("#0B4D7C"), ExevoGranFrigoHur: CorToDec("#459CC3"), ExevoTeraHur: CorToDec("#017A03"), ExoriAmpVis: CorToDec("#B288B8"), ExoriGranVis: CorToDec("#FA7CDA"), ExoriMaxVis: CorToDec("#FEDCF6"), ExoriGranFlam: CorToDec("#EE9231"), ExoriMaxFlam: CorToDec("#F6971E"), ExevoGranVisLux: CorToDec("#FFFDFE"), ExevoVisHur: CorToDec("#A6A0CD"), ExevoFlamHur: CorToDec("#460701"), ExevoVisLux: CorToDec("#A56FC0"), ExevoGranFlamHur: CorToDec("#B71701"), ExoriMoe: CorToDec("#2E321F"), ExoriKor: CorToDec("#333722"), UtamoTempo: CorToDec("#44544D"), UtitoTempo : CorToDec("#944238")}
ArColor.CooldownV:= {MagicShield: CorToDec("#6F6634"), ExuraGranSio: CorToDec("#F2F2EC"), UturaGran: CorToDec("#CCCBB7"), Utura: CorToDec("#E4F6FE"), UtitoTempoSan: CorToDec("#92A0A4"), ExuraGranIco: CorToDec("#F0EFE8"), ExuraMaxVita: CorToDec("#D6D8FF"), ExevoMasSan: CorToDec("#F5E4A6"), ExetaAmpRes: CorToDec("#F1F1F1"), Exori: CorToDec("#7B432E"), ExoriGran: CorToDec("#860B06"), ExoriMin: CorToDec("#414343"), ExoriMas: CorToDec("#4A2815"), ExevoGranMasTera: CorToDec("#D5C090"), ExevoGranMasFrigo: CorToDec("#99CDDD"), ExevoGranMasFlam: CorToDec("#FBC882"), ExevoGranMasVis: CorToDec("#925499"), ExoriGranCon: CorToDec("#19A8CD"), ExoriHur: CorToDec("#8B8786"), ExoriGranIco: CorToDec("#EFBC87"), ExoriIco: CorToDec("#8A8A8A"), ExoriGranFrigo: CorToDec("#BDE4F2"), ExoriMaxFrigo: CorToDec("#7397C1"), ExoriGranTera: CorToDec("#4F2914"), ExoriMaxTera: CorToDec("#F04905"), ExevoFrigoHur: CorToDec("#59A0BF"), ExevoGranFrigoHur: CorToDec("#215882"), ExevoTeraHur: CorToDec("#489420"), ExoriAmpVis: CorToDec("#481C4F"), ExoriGranVis: CorToDec("#D6189C"), ExoriMaxVis: CorToDec("#F6C7EC"), ExoriGranFlam: CorToDec("#F4D57A"), ExoriMaxFlam: CorToDec("#FACE75"), ExevoGranVisLux: CorToDec("#308FEF"), ExevoVisHur: CorToDec("#125EE0"), ExevoFlamHur: CorToDec("#7A1E00"), ExevoVisLux: CorToDec("#DDA8DE"), ExevoGranFlamHur: CorToDec("#ED5A0A"), ExoriMoe: CorToDec("#494E3D"), ExoriKor: CorToDec("#191919"), UtamoTempo: CorToDec("#283C3F"), UtitoTempo : CorToDec("#670402")}
Data.Group:=[]
ReadData(){
PrintScreenData()
if(GetColorHex(Cords.HP.2+1, Cords.HP.3+1) != "#b04e4e")
SearchPNG(PNG.HPBar, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.HP:=Erro
if(GetColorHex(Cords.Con.2+1, Cords.Con.3+1) != "#2C2C2C")
SearchPNG(PNG.ConditionsBar, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.Con:=Erro
if(Timer.SecondaryBattleList = True && InI.HkAutoHuntStart.4 == True || InI.HkAutoHuntStart.5 == True){
Timer.SecondaryBattleList := False
ReadSecondaryBattle()
}
if((InI.HkAutoHuntStart.6 == 1 || InI.HkAutoHuntStart.8 == 1) && Cords.SkillBar.1 == 0 && Cords.SkillBarEnd.1 == 0 && AutoHunt.Active == 1 && Timer.MessagesSound == False){
if (GetColorHex(Cords.ReadOnlyChat.2, Cords.ReadOnlyChat.3) != "#353535")
SearchPNG(PNG.ReadOnlyChat, Cords.SkillBar.2, Cords.SkillBar.3, Cords.SkillBarEnd.2-30, WindowInfo.Client.h, Tole:=20, Erro, Mode:=1), Cords.ReadOnlyChat := Erro
if(Cords.ReadOnlyChat.1 = 0){
OffSet := 0
Loop, 4 {
corPixelChat := GetColorHex(Cords.ReadOnlyChat.2+37, Cords.ReadOnlyChat.3+3-OffSet)
if (InI.HkAutoHuntStart.6 == 1) {
If (corPixelChat = "#60f8f8"){
SetTimer, MessagesSound, 1000
Timer.MessagesSound := True
Break
}
}
if (InI.HkAutoHuntStart.8 == 1) {
If (corPixelChat = "#F0F000"){
SetTimer, MessagesSound, 1000
Timer.MessagesSound := True
Break
}
}
OffSet += 13
}
} else {
English     := "Local Chat as Ready-Only is necessary to use Private Message Sound! Please do it."
Portuguese  := "Local Chat como Read-Only " chr(233) " necess" chr(225) "rio para usar Private Message Sound! Por favor configure."
ToolTip(%GlobalLanguage%,1000,Cords.Loot.4,Cords.Loot.5)
}
}
if(GetColorHex(Cords.SkillBar.2+15, Cords.SkillBar.3) != "#5a5a5a"){
SearchPNG(PNG.SkillBar, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.SkillBar:=Erro
if(Erro.1 = 0)
SearchPNG(PNG.SkillBarEnd, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.SkillBarEnd:=Erro
if(Erro.1 = 0)
SearchPNG(PNG.CooldownDiv, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=5, Erro, Mode:=1), Cords.CooldownDiv:=Erro
}
if( Cords.HP.1 != 0 && Cords.Con.1 != 0 && Cords.SkillBar.1 != 0 && WindowInfo.ClassNN.w + WindowInfo.ClassNN.h < 50){
Suspend, On
Waiting := 1
Data.Minimized := 1
English    := "Game Minimized"
Portuguese := "Jogo Minimizado"
GuiControl, Main:+cf0f000 , WindowTitle
GuiControl, Main:, WindowTitle, % %GlobalLanguage%
Return
} Else If ( Cords.HP.1 != 0 && Cords.Con.1 != 0 && Cords.SkillBar.1 != 0 && Data.Minimized != 1 && Data.NotFound > 2){
Waiting := 1
English    := "Macro is Paused."
Portuguese := "Macro foi pausado."
ToolTip(%GlobalLanguage%,1500,Cords.Loot.4,Cords.Loot.5)
If (IsInternetConnected() && Ini.Reconnect.2 == 1) {
SearchPNG(PNG.ConnectionFailed, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, ConnectionFailed, Mode:=1)
SearchPNG(PNG.ConnectionLost, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, ConnectionLost, Mode:=1)
SearchPNG(PNG.SorryError, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, SorryError, Mode:=1)
SearchPNG(PNG.SelectCharacter, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, SelectCharacter, Mode:=1)
If (ConnectionFailed.1 == 0 || ConnectionLost.1 == 0 || SorryError.1 == 0 || SelectCharacter.1 == 0) {
FocusClient()
SearchPNG(PNG.Ok, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Ok, Mode:=1)
If (Ok.1 == 0)
ControlClick % "x" Ok.2+WindowInfo.ClassNN.x+20 " y" Ok.3+WindowInfo.ClassNN.y+10, ahk_id %WinID%,,Left
Else
PressKey("Enter")
Sleep, 1000
Return
Timer.exaustDummy := False
SetTimer, exaustDummyDisable, Off
}
}
SearchPNG(PNG.LoginDetails, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=10, LoginDetails, Mode:=1)
SearchPNG(PNG.WrongAccPass, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=10, WrongAccPass, Mode:=1)
if (LoginDetails.1 == 0 || WrongAccPass.1 == 0){
FocusClient()
Macro := 0
if(AutoHunt.Active == 1){
EnableAutoHunt()
}
SetTimer, Button2, On
Return
}
} Else If ( Data.Minimized = 1 ){
Suspend, Off
Data.Minimized := 0
Waiting := 0
GuiControl, Main:+c00c000 , WindowTitle
GuiControl, Main:, WindowTitle, % WindowInfo.Title
} Else If ( Cords.HP.1 != 0 && Cords.Con.1 != 0 && Cords.SkillBar.1 != 0 ){
Data.NotFound ++
Waiting := 1
Return
} Else {
Data.NotFound := 0
Waiting := 0
}
if (Waiting == 1)
Return
if (WindowInfo.Window.x != Cords.Running.1 || WindowInfo.Window.y != Cords.Running.2 || Cords.Running.4 != WindowInfo.ClassNN.y){
Cords.Running.1 := WindowInfo.Window.x
Cords.Running.2 := WindowInfo.Window.y
Cords.Running.4 := WindowInfo.ClassNN.y
}
if (Cords.Con.1 = 0 && Timer.OCRQuiver = 0 && (ini.Quiver.3 = 1 || ini.DragQuiver.3 = 1)){
OCR := TibiaOCR(Cords.Con.2 + 100, Cords.Con.3 - 71)
Data.Quiver := (OCR != "" && (OCR < ini.Quiver.5 || OCR < ini.DragQuiver.7)) ? 0 : 1
Timer.OCRQuiver := 1
SetTimer, OCRQuiverDisable, -20000
}
if (Cords.Con.1 = 0 && Ini.AutoBless.3 == 1) {
SearchPNG(PNG.Bless, Cords.Con.2, Cords.Con.3-150, Cords.Con.2+35, Cords.Con.3-130, Tole:=20, Erro, Mode:=1), Data.Bless:=Erro
}
if (GetColorHex(Cords.BattleListDefault.2+2, Cords.BattleListDefault.3+2) != "#919191")
SearchPNG(PNG.BattleListDefault, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.BattleListDefault:=Erro
if (Cords.BattleListDefault.1 == 0){
Filtro := GetColorHex(Cords.BattleListDefault.2+131, Cords.BattleListDefault.3+4) = "#2C2C2C" ? 48 : 0
isAttacking := False
, emptyBattle := False
, Data.InfoMobs:=[]
, TargetY := Cords.BattleListDefault.3+28+Filtro
, TargetLife := GetColorHex(Cords.BattleListDefault.2+23, TargetY)
if (TargetLife == "#000000"){
CountMobs := 1
while (TargetLife == "#000000" && CountMobs <= 10){
TMobHP := GetColorHex(Cords.BattleListDefault.2+24, TargetY+1)
MobHP := TMobHP="#00C000"?100:TMobHP="#60c060"?90:TMobHP="#c0c000"?60:TMobHP="#c03030"?30:TMobHP="#c00000"?10:TMobHP="#600000"?5:0
TargetMob := False
TargetColor := GetColorHex(Cords.BattleListDefault.2+19, TargetY)
if (TargetColor == "#ff8080" || TargetColor == "#ff0000"){
isAttacking := True
TargetMob := True
}
Data.InfoMobs[CountMobs] := {HP:MobHP,x:Cords.BattleListDefault.2+10,y:TargetY-7,Target:TargetMob}
TargetY += 22, TargetLife := GetColorHex(Cords.BattleListDefault.2+23, TargetY)
If (TargetLife == "#000000")
CountMobs++
}
AutoHunt.MonsterQuantity := CountMobs
} else {
AutoHunt.MonsterQuantity := 0
emptyBattle := True
}
} else {
English     := "Please open your Battle List and click Start again."
Portuguese  := "Por favor, abra seu Battle List e clique em Start de novo."
ToolTip(%GlobalLanguage%,1000,Cords.Loot.4,Cords.Loot.5)
}
if (GetColorHex(Cords.Party.2+4, Cords.Party.3+4) != "#1e73ff" && Ini.HealConfig.3 = "Party List"){
SearchPNG(PNG.Party, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.Party:=Erro
if (Cords.Party.1 != 0 && (Ini.ExuraGranSio.3 || Ini.ExuraSio.3 || Ini.ExuraSioTwo.3 || Ini.UHRune.3 || Ini.UHRuneTwo.3)){
English     := "Please open your Party List again."
Portuguese  := "Por favor abra seu Party List de novo."
ToolTip(%GlobalLanguage%,1000,Cords.Loot.4,Cords.Loot.5)
}
}
If (Ini.ChatOn.3 = 1){
If (GetColorHex(Cords.Chat.2, Cords.Chat.3) != "#727373")
SearchPNG(PNG.Chat, Cords.SkillBarEnd.2-100, Cords.SkillBarEnd.3,  Cords.SkillBarEnd.2+100, WindowInfo.Client.h, Tole:=15, Erro, Mode:=1), Cords.Chat := Erro
if (Cords.Chat.1 = 0){
if (GetColorHex(Cords.Chat.2+46, Cords.Chat.3+5) = "#c0c0c0")
Data.Chat := 0
else
Data.Chat := 1
}
}
if (Cords.PotCooldown)
PotionRead()
if (Data.PotionConfig && !Data.CooldownPotion)
PotionConfig(), Data.PotionConfig:=0
OCRPotions()
if (GetColorHex(Cords.Loot.2+219, Cords.Loot.3+55) != OldLootCor){
SearchPNG(PNG.GameBorda, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=10, Erro, Mode:=1), Cords.Loot:=Erro
if (Erro.1 = 0){
OldLootCor := GetColorHex(Cords.Loot.2+219, Cords.Loot.3+55)
, LootCords()
if(SQTLoot.Gui.x && SQTLoot.Gui.y){
if (ini.ExerciseDummy.3 == 1)
Gui, RunningDummy: Show, % "NA w250 h50 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y-120, RunningDummy
else
Gui, RunningDummy: Hide
if (ini.ComboConfig.5 == 1)
Gui, RunningCombo: Show, % "NA w250 h20 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y, RunningCombo
else
Gui, RunningCombo: Hide
}
}
}
CooldownSkills()
if (Cords.HP.1 = 0){
if(ini.Weapon.3 = 1){
Weapon  := GetColorHex(Cords.Con.2+21, Cords.Con.3-81)
if (Weapon = "#7e8084")
Data.Weapon := 0
else
Data.Weapon := 1
}
if(ini.Ammo.3 = 1){
Ammo  := GetColorHex(Cords.Con.2+84, Cords.Con.3-47)
if (Ammo = "#4f4f4f" || Ammo = "#5b5e61") {
Data.Ammo := 0
} else {
if (Cords.Con.1 = 0 && Timer.exaustAmmo != 1){
OCR := TibiaOCR(Cords.Con.2 + 100, Cords.Con.3 - 35)
Data.Ammo := (OCR != "" && OCR < ini.Ammo.5) ? 0 : 1
}
}
}
1x := Cords.HP.2+13 , 1y := Cords.HP.3+4
2x := 1x            , 2y := 1y+12
HpMpPixels:=90
Loop, % HpMpPixels+1 {
1gx:=1x-A_Index+HpMpPixels+2
Color := GetColorDecimal(1gx, 1y)
If (Color = ArColor.Status.HPFull){
Data.HP := 90
Break 1
}
If (Color = ArColor.Status.HP){
Data.HP := HpMpPixels-A_Index+1
Break 1
}
Data.HP := 0
}
Data.HP := Floor(( Data.HP * 112 ) / 100)
Loop, % HpMpPixels+1 {
2gx:=2x-A_Index+HpMpPixels+2
Color:=GetColorDecimal(2gx, 2y)
If (Color = ArColor.Status.MPFull){
Data.MP := 90
Break 1
}
If (Color = ArColor.Status.MP){
Data.MP := HpMpPixels-A_Index+1
Break 1
}
Data.MP := 0
}
Data.MP := Floor((Data.MP * 112 ) / 100)
1x := Cords.Con.2+6 , 1y := Cords.Con.3+7, ConRead:=[]
loop, 10 {
Color := GetColorDecimal(1x, 1y)
for ConditionsName, ConditionsCor in ArColor.Conditions {
If (ConRead[A_Index] != A_Index)
If (Color = ConditionsCor){
Data.Conditions[ConditionsName] := 1
ConRead[A_Index] := A_Index
Break 1
} else
Data.Conditions[ConditionsName] := 0
}
1x := 1x + 10
}
If (Ini.HealConfig.3 = "Party List"){
If (Cords.Party.1 = 0 && (Ini.ExuraGranSio.3 = 1 || Ini.ExuraSio.3 = 1 || Ini.UHRune.3 = 1))
PartyWindow()
If (Cords.Party.1 = 0 && (Ini.ExuraSioTwo.3 = 1 || Ini.UHRuneTwo.3 = 1))
PartyWindow2()
} Else If (Ini.HealConfig.3 = "Secondary Battle"){
If (Cords.Battle.1 = 0 && (Ini.ExuraGranSio.3 = 1 || Ini.ExuraSio.3 = 1 || Ini.UHRune.3 = 1))
BattleWindow()
If (Cords.Battle.1 = 0 && (Ini.ExuraSioTwo.3 = 1 || Ini.UHRuneTwo.3 = 1))
BattleWindow2()
}
OffSet := 28
RConBarX := Cords.Con.2+3, RConBarY := Cords.Con.3-55
If (Ini.SwapRing.3 = 1 || Ini.EnergyRing.3 = 1){
SearchPNG(PNG.Rings.NoRing, RConBarX, RConBarY, RConBarX+OffSet, RConBarY+OffSet, Tole:=20, Erro, Mode:=1), Data.NoRing:=Erro.1, Data.TankRing:=1, Data.MainRing:=1, Data.EnergyRing:=1
If (Erro.1 != 0) {
If (Ini.EnergyRing.3){
SearchPNG(PNG.Rings.EnergyRing, RConBarX, RConBarY, RConBarX+OffSet, RConBarY+OffSet, Tole:=20, ErroEnergy, Mode:=1), Data.EnergyRing:=ErroEnergy.1
}
If (Ini.SwapRing.3){
SearchPNG(PNG.Rings[Ini.SwapRing.9], RConBarX, RConBarY, RConBarX+OffSet, RConBarY+OffSet, Tole:=20, Erro, Mode:=1), Data.TankRing:=Erro.1
If (Erro.1 != 0)
SearchPNG(PNG.Rings[Ini.SwapRing.10], RConBarX, RConBarY, RConBarX+OffSet, RConBarY+OffSet, Tole:=20, Erro, Mode:=1), Data.MainRing:=Erro.1
}
}
}
AConBarX := Cords.Con.2+3, AConBarY := Cords.Con.3-127
If (Ini.SwapAmulet.3 = 1 || Ini.SSA.3 = 1){
SearchPNG(PNG.Amulet.NoAmulet, AConBarX, AConBarY, AConBarX+OffSet, AConBarY+OffSet, Tole:=20, Erro, Mode:=1), Data.NoAmulet:=Erro.1, Data.TankAmulet:=1, Data.MainAmulet:=1, Data.SSA:=1
If (Erro.1 != 0){
If (Ini.SSA.3){
SearchPNG(PNG.Amulet.StoneSkinAmulet, AConBarX, AConBarY, AConBarX+OffSet, AConBarY+OffSet, Tole:=20, ErroSSA, Mode:=1), Data.SSA:=ErroSSA.1
}
If (Ini.SwapAmulet.3){
SearchPNG(PNG.Amulet[Ini.SwapAmulet.9], AConBarX, AConBarY, AConBarX+OffSet, AConBarY+OffSet, Tole:=20, Erro, Mode:=1), Data.TankAmulet:=Erro.1
If (Erro.1 != 0){
SearchPNG(PNG.Amulet[Ini.SwapAmulet.10], AConBarX, AConBarY, AConBarX+OffSet, AConBarY+OffSet, Tole:=20, Erro, Mode:=1), Data.MainAmulet:=Erro.1
If (Erro.1 != 0 && (Ini.SwapAmulet.9 = "ShockwaveAmulet" || Ini.SwapAmulet.10 = "ShockwaveAmulet")){
SearchPNG(PNG.ShockwaveAmulet1, AConBarX, AConBarY, AConBarX+OffSet, AConBarY+OffSet, Tole:=20, Erro, Mode:=1)
If (Erro.1 != 0 && (Ini.SwapAmulet.9 = "ShockwaveAmulet" || Ini.SwapAmulet.10 = "ShockwaveAmulet"))
SearchPNG(PNG.ShockwaveAmulet2, AConBarX, AConBarY, AConBarX+OffSet, AConBarY+OffSet, Tole:=20, Erro, Mode:=1)
If (Erro.1 != 0 && (Ini.SwapAmulet.9 = "ShockwaveAmulet" || Ini.SwapAmulet.10 = "ShockwaveAmulet"))
SearchPNG(PNG.ShockwaveAmulet3, AConBarX, AConBarY, AConBarX+OffSet, AConBarY+OffSet, Tole:=20, Erro, Mode:=1)
If (Erro.1 = 0 && Ini.SwapAmulet.9 = "ShockwaveAmulet")
Data.TankAmulet:=Erro.1
Else If (Erro.1 = 0 && Ini.SwapAmulet.10 = "ShockwaveAmulet")
Data.MainAmulet:=Erro.1
}
}
}
}
}
If (Ini.PairofSoftBoots.3 = 1){
BConBarX := Cords.Con.2+40, BConBarY := Cords.Con.3-33
SearchPNG(PNG.Boots.PairofSoftBoots, BConBarX, BConBarY, BConBarX+OffSet, BConBarY+OffSet, Tole:=20, Erro, Mode:=1), Data.PairofSoftBoots:=Erro.1
}
}
If (Data.HP = 0){
SearchPNG(PNG.Dead, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1)
If (Erro.1 = 0){
Macro := 0
English    := "Macro is Paused."
Portuguese := "Macro foi pausado."
ToolTip(%GlobalLanguage%,1500,Cords.Loot.4,Cords.Loot.5)
SetTimer, Button2, On
Return
}
}
return
}
TibiaDeBug(){
PrintScreenData()
DllCall(ProcCreateBitmap, "Ptr", WindowInfo.HBITMAP, "Ptr", 0, "Ptr*", NewBitmap)
Gdip_SaveBitmapToFile(NewBitmap, "DeBug.png")
DllCall(ProcDisposeImage, "Ptr", NewBitmap)
MsgBox, 4096, DeBug, % "`VersionType:`t " VersionType "`nTitle:`t " WindowInfo.Title "`nExe:`t " WindowInfo.Exe "`nClass:`t " WindowInfo.Class "`nIDClassNN: " WindowInfo.IDClassNN "`nID:`t " WindowInfo.ID "`npID:`t " WindowInfo.pID "`nWindow:`t x" WindowInfo.Window.x "`t y" WindowInfo.Window.y "`tw" WindowInfo.Window.w "`th" WindowInfo.Window.h "`nClassNN:`t x" WindowInfo.ClassNN.x "`t y" WindowInfo.ClassNN.y "`tw" WindowInfo.ClassNN.w "`th" WindowInfo.ClassNN.h "`nClient:`t w" WindowInfo.Client.w "`t h" WindowInfo.Client.h "`nLoot:`t x:" SQTLoot.1.x " y" SQTLoot.1.y " SQM: " SQTLoot.SQT
}
GuiContextBT(){
classButton[ "GuiContext" ].Draw_Pressed()
if( ! classButton[ "GuiContext" ].Draw_Pressed() )
return
if(TogWinTab:=!TogWinTab){
Gui,Main:Show,w150 h40 NA
classButton[ "GuiContext" ].Default_Bitmap := PNG.A2
classButton[ "GuiContext" ].Hover_Bitmap := PNG.AH2
classButton[ "GuiContext" ].Draw_Hover()
If (Macro = 1)
FocusClient()
} else {
Gui,Main:Show,h590 w490 NA
classButton[ "GuiContext" ].Default_Bitmap := PNG.A1
classButton[ "GuiContext" ].Hover_Bitmap := PNG.AH1
classButton[ "GuiContext"].Draw_Hover()
}
}
InitialSettings(){
defaultWindowsX := (A_ScreenWidth / 3)
defaultWindowsY := (A_ScreenHeight / 3)
if(userData.email){
userEmail := userData.email
userPassword := userData.password
} else {
userEmail := "trial@tibiahelper.com"
userPassword := "macro"
}
defaultSettingsFile =
    (
        [Config]
        Profile=1
        Vocation=Knight
        TibiaPath=C:\Users\%A_UserName%\AppData\Local\Tibia\Tibia.exe
        MHPath=%A_WorkingDir%\TibiaSettings.ini
        [ConfigHotkeys]
        HkStart=>||HkStart||0||[...]
        HkPause=>||HkPause||0||[...]
        HkFirstProfile=>||HkFirstProfile||0||[...]||1||Knight
        HkSecondProfile=>||HkSecondProfile||0||[...]||1||Druid
        HkThirdProfile=>||HkThirdProfile||0||[...]||2||Knight
        HkEnergyRing=>||HkEnergyRing||0||[...]
        HkSSA=>||HkSSA||0||[...]
        HkKeepHaste=>||HkKeepHaste||0||[...]
        HkUtamoVita=>||HkUtamoVita||0||[...]
        HkSwapRing=>||HkSwapRing||0||[...]
        HkSwapAmulet=>||HkSwapAmulet||0||[...]
        Reconnect=>||Reconnect||1
        [1-Knight]
        [2-Knight]
        [3-Knight]
        [4-Knight]
        [1-Paladin]
        [2-Paladin]
        [3-Paladin]
        [4-Paladin]
        [1-Druid]
        [2-Druid]
        [3-Druid]
        [4-Druid]
        [1-Sorcerer]
        [2-Sorcerer]
        [3-Sorcerer]
        [4-Sorcerer]
)
IfNotExist, %settingsFile%
FileAppend, %defaultSettingsFile%, %settingsFile%
}
StartButton(){
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
If (StartButton == 0) {
SetTimer, Button1, On
} Else {
Macro := 0
SetTimer, Button2, On
}
Return
}
LockedState(){
Locked:=!Locked
IniWrite, %Locked%, %settingsFile%, Config, Locked
if (Locked = 1){
SetImage( LockedID, PNG.LockOpened)
GuiControl, Main:Enable , ProfileSelected
GuiControl, Main:Enable , VocationSelected
} else {
SetImage( LockedID, PNG.LockClosed)
GuiControl, Main:Disable , ProfileSelected
GuiControl, Main:Disable , VocationSelected
}
}
FocusClient(){
If !WinActive("ahk_id" . WindowInfo.ID){
WinActivate, % "ahk_id" . WindowInfo.ID
Sleep, 500
}
}
SaveGuiPosition(){
If WinExist("ahk_id" . MHTibia) {
WinGetPos, GX, GY,,, ahk_id %MHTibia%
IniWrite, %GX%, %settingsFile%, Config, WindowsX
IniWrite, %GY%, %settingsFile%, Config, WindowsY
}
}
PressKey(hotkeys){
if GetKeyState("Alt")
MacroKeyWait := "Alt"
Else if GetKeyState("Ctrl")
MacroKeyWait := "Ctrl"
Else if GetKeyState("Shift")
MacroKeyWait := "Shift"
if (MacroKeyWait){
if GetKeyState("RAlt"){
English := "Alt Pressed"
Portuguese := "Alt Apertado"
GuiControl, Main:+cf0f000 , WindowTitle
GuiControl, Main:, WindowTitle, % %GlobalLanguage%
KeyWait, RAlt
} Else {
English := MacroKeyWait " Pressed"
Portuguese := MacroKeyWait " Apertado"
GuiControl, Main:+cf0f000 , WindowTitle
GuiControl, Main:, WindowTitle, % %GlobalLanguage%
KeyWait, %MacroKeyWait%, T1
if (ErrorLevel){
SendInput {%MacroKeyWait% up}
Sleep, 300
}
KeyWait, %MacroKeyWait%
}
GuiControl, Main:+c00c000 , WindowTitle
GuiControl, Main:, WindowTitle, % WindowInfo.Title
}
special := SubStr(hotkeys, 1, 1)
If (special = "^" || special = "+" || special = "!"){
StringTrimLeft, hotkeys, hotkeys, 1
FocusClient()
SendInput %special%{%hotkeys%}
} Else {
ControlSend, , {%hotkeys%}, % "ahk_id" . WindowInfo.ID
}
Sleep, 100
}
IniWriteArray(ArrayToInI,SaveName,Local){
newVar := ">"
For index, element in ArrayToInI
newVar .= "||" element
IniWrite, %newVar%, %settingsFile%, %Local%, %SaveName%
return
}
MsgArray(Array){
For Each, Element In Array {
if !IsObject(Element){
If (Concat != "")
Concat .= "`n"
Concat .= Element
}
}
return Concat
}
ToolTip(Message,TimeToDisplay:=1000,X:="",Y:="",WhichToolTip:=1){
ToolTip,%Message%,%X%,%Y%,%WhichToolTip%
SetTimer,ToolTipClear,-%TimeToDisplay%
Return
ToolTipClear:
ToolTip
Return
}
TibiaOCR(Foundx, Foundy, Nr:=3){
OCR := ""
loop, %Nr% {
Loop, 10 {
Index := 10-A_Index
SearchPNG(PNG.OCR[Index], Foundx, Foundy, Foundx+6, Foundy+8, Tole:=20, Found, Mode:=1)
if (Found.1 = 0){
OCR := Index OCR
Break 1
}
if else (Found.1 = 1 && Index = 0)
Break 2
}
Foundx -= 8
}
Return OCR
}
SelectWindow(){
global
Gui, Submit, NoHide
Ini.HealConfig.3 := %A_GuiControl%
IniWriteArray(Ini.HealConfig,"HealConfig","ConfigHotkeys")
GuiControl,Potions:ChooseString, WindowSelected , % Ini.HealConfig.3
GuiControl,DruidHealingSpells:ChooseString, WindowSelected2, % Ini.HealConfig.3
}
IsInternetConnected() {
static sz := A_IsUnicode ? 408 : 204, addrToStr := "Ws2_32\WSAAddressToString" (A_IsUnicode ? "W" : "A")
VarSetCapacity(wsaData, 408)
if DllCall("Ws2_32\WSAStartup", "UShort", 0x0202, "Ptr", &wsaData)
return false
if DllCall("Ws2_32\GetAddrInfoW", "wstr", "dns.msftncsi.com", "wstr", "http", "ptr", 0, "ptr*", results) {
DllCall("Ws2_32\WSACleanup")
return false
}
ai_family := NumGet(results+4, 0, "int")
ai_addr := Numget(results+16, 2*A_PtrSize, "ptr")
ai_addrlen := Numget(results+16, 0, "ptr")
DllCall(addrToStr, "ptr", ai_addr, "uint", ai_addrlen, "ptr", 0, "str", wsaData, "uint*", 204)
DllCall("Ws2_32\FreeAddrInfoW", "ptr", results)
DllCall("Ws2_32\WSACleanup")
http := ComObjCreate("WinHttp.WinHttpRequest.5.1")
if (ai_family = 2 && wsaData = "131.107.255.255:80") {
http.Open("GET", "http://www.msftncsi.com/ncsi.txt")
} else if (ai_family = 23 && wsaData = "[fd3e:4f5a:5b81::1]:80") {
http.Open("GET", "http://ipv6.msftncsi.com/ncsi.txt")
} else {
return false
}
http.Send()
return (http.ResponseText = "Microsoft NCSI")
}
ValidateFields() {
HotkeysConfigured := []
if (Ini.HealthFood.3) {
if (Ini.HealthFood.4 = "[...]" || Ini.HealthFood.4 = "") {
MsgErrorHotkeyMissing(Ini.HealthFood.1)
Return 1
}
if (Ini.HealthFood.5 = 0 || Ini.HealthFood.5 = "") {
MsgErrorPercentageMissing(Ini.HealthFood.1)
Return 1
}
HotkeysConfigured.Push(Ini.HealthFood.4)
}
if (Ini.ManaFood.3) {
if (Ini.ManaFood.4 = "[...]" || Ini.ManaFood.4 = "") {
MsgErrorHotkeyMissing(Ini.ManaFood.1)
Return 1
}
if (Ini.ManaFood.5 = 0 || Ini.ManaFood.5 = "") {
MsgErrorPercentageMissing(Ini.ManaFood.1)
Return 1
}
HotkeysConfigured.Push(Ini.ManaFood.4)
}
if (VersionType == "OTServer") {
if (ValidaOldUtamoVita()) {
Return 1
}
}
if (ValidaNewUtamoVita()) {
Return 1
}
if (ValidateEnergyRing()) {
Return 1
}
if (ValidateSSA()) {
Return 1
}
if (ValidateSwapRing()) {
Return 1
}
if (ValidateSwapAmulet()) {
Return 1
}
if (ValidateUH_Potions()) {
Return 1
}
if (ValidateHealingSpells()) {
Return 1
}
if (ValidateLoot()) {
Return 1
}
if (Ini.EatFood.3) {
if (Ini.EatFood.4 = "[...]" || Ini.EatFood.4 = "") {
MsgErrorHotkeyMissing(Ini.EatFood.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.EatFood.4 = v) {
MsgErrorHotkeyInUse(Ini.EatFood.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.EatFood.4)
}
if (ValidateHaste()) {
Return 1
}
if (ValidateCure()) {
Return 1
}
If (ini.Quiver.3) {
if(ini.DragQuiver.3 || Ini.Ammo.3){
if(GlobalLanguage == "English"){
MsgBox, 4112, Quiver Error, % "The checkbox for " ini.Quiver.1 " is active and you have Drag Quiver or Ammo also configured."
} else {
MsgBox, 4112, Quiver Error, % "Voc" Chr(234) " ativou o " ini.Quiver.1 " mas o Drag Quiver ou o Ammo tamb" Chr(233) "m est" Chr(227) "o configurados."
}
return 1
}
if(Ini.Quiver.4 = "[...]" || Ini.Quiver.4 = ""){
MsgErrorHotkeyMissing(Ini.Quiver.1)
Return 1
}
if(Ini.Quiver.5 = 0 || Ini.Quiver.5 = ""){
MsgErrorQuantity(Ini.Quiver.1)
Return 1
}
}
if (Ini.Ammo.3) {
if (ini.DragQuiver.3 || Ini.Quiver.3){
if (GlobalLanguage == "English") {
MsgBox, 4112, Quiver Error, % "The checkbox for " ini.Ammo.1 " is active and you have Drag Quiver or Quiver also configured."
} else {
MsgBox, 4112, Quiver Error, % "Voc" Chr(234) " ativou o " ini.Ammo.1 " mas o Drag Quiver ou o Quiver tamb" Chr(233) "m est" Chr(227) "o configurados."
}
return 1
}
if (Ini.Ammo.4 = "[...]" || Ini.Ammo.4 = "") {
MsgErrorHotkeyMissing(Ini.Ammo.1)
Return 1
}
if (Ini.Ammo.5 = 0 || Ini.Ammo.5 = "") {
MsgErrorQuantity(Ini.Ammo.1)
Return 1
}
}
if (Ini.DragQuiver.3) {
if (ini.Ammo.3 || Ini.Quiver.3){
if (GlobalLanguage == "English"){
MsgBox, 4112, Quiver Error, % "The checkbox for " ini.DragQuiver.1 " is active and you have Ammo or Quiver also configured."
} else {
MsgBox, 4112, Quiver Error, % "Voc" Chr(234) " ativou o " ini.DragQuiver.1 " mas o Ammo ou o Quiver tamb" Chr(233) "m est" Chr(227) "o configurados."
}
return 1
}
if (Ini.DragQuiver.5 = 0 || Ini.DragQuiver.5 = "") {
MsgErrorPositionFrom(Ini.DragQuiver.1)
Return 1
}
if (Ini.DragQuiver.7 = 0 || Ini.DragQuiver.7 = "") {
MsgErrorQuantity(Ini.DragQuiver.1)
Return 1
}
}
if (Ini.SpecialPotion.3) {
if (Ini.SpecialPotion.4 = "[...]" || Ini.SpecialPotion.4 = "") {
MsgErrorHotkeyMissing(Ini.SpecialPotion.1)
Return 1
}
}
if (Ini.Weapon.3) {
if(Ini.Weapon.4 = "[...]" || Ini.Weapon.4 = "") {
MsgErrorHotkeyMissing(Ini.Weapon.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.Weapon.4 = v) {
MsgErrorHotkeyInUse(Ini.Weapon.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.Weapon.4)
}
if (Ini.SpellMax.3) {
if (Ini.SpellMax.4 = "[...]" || Ini.SpellMax.4 = "") {
MsgErrorHotkeyMissing(Ini.SpellMax.1)
Return 1
}
}
If (Ini.AutoBless.3 == 1) {
if(Ini.AutoBless.4 = "[...]" || Ini.AutoBless.4 = "") {
MsgErrorHotkeyMissing(Ini.AutoBless.1)
Return 1
}
}
If (ValidateExerciseDummy()){
Return 1
}
If (ValidateTimedSpell()){
Return 1
}
If (ValidateSmartCast()){
Return 1
}
If (ValidateMoveItems()){
Return 1
}
If (ValidateMoveItemsBP()){
Return 1
}
If (ValidateMoveItemsMouse()){
Return 1
}
If (ValidateDance()){
Return 1
}
If (ValidateGodFlower()){
Return 1
}
If (ValidateAntiPush()){
Return 1
}
If (ValidateCombo()){
Return 1
}
Return 0
}
MsgErrorPercentageMissing(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, Percentage Missing, % "The checkbox for " FieldName " is active but no percentage is configured."
} else {
MsgBox, 4112, Faltando Percentual, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhum percentual."
}
}
MsgErrorHPPercentageMissing(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, HP Percentage Missing, % "The checkbox for " FieldName " is active but no HP percentage is configured."
} else {
MsgBox, 4112, Faltando Percentual HP, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhum percentual de HP."
}
}
MsgErrorMPPercentageMissing(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, MP Percentage Missing, % "The checkbox for " FieldName " is active but no MP percentage is configured."
} else {
MsgBox, 4112, Faltando Percentual MP, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhum percentual de MP."
}
}
MsgErrorWrongPercentageOrder(FieldName1, FieldName2){
if(GlobalLanguage == "English"){
MsgBox, 4112, Wrong Percentage Order, % "The " FieldName1 " must have a lower percentage compared to " FieldName2 "."
} else {
MsgBox, 4112, Wrong Percentage Order, % "O " FieldName1 " deve ter um percentual menor em compara" Chr(231) Chr(227) "o ao " FieldName2 "."
}
}
MsgErrorHotkeyMissing(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, Hotkey Missing, % "The checkbox for " FieldName " is active but no hotkey is configured."
} else {
MsgBox, 4112, Hotkey Faltando, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhuma hotkey."
}
}
MsgErrorCooldownMissing(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, Cooldown Missing, % "The checkbox for " FieldName " is active but no cooldown is configured."
} else {
MsgBox, 4112, Cooldown Faltando, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhum cooldown."
}
}
MsgErrorHotkeyInUse(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, Hotkey Already in Use, % "The hotkey configured for " FieldName " is already in use."
} else {
MsgBox, 4112, Hotkey Em Uso, % "A hotkey configurada para " FieldName " j" Chr(225) " esta em uso."
}
}
MsgErrorPositionFrom(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, % "Position FROM Missing", % "The checkbox for " FieldName " is active but no Position From is configured."
} else {
MsgBox, 4112, % "Posi" Chr(231) Chr(227) "ORIGINAL Faltando", % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhuma Position Original."
}
}
MsgErrorPositionTo(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, % "Position TO Missing", % "The checkbox for " FieldName " is active but no Position From is configured."
} else {
MsgBox, 4112, % "Posi" Chr(231) Chr(227) "o DESTINO Faltando", % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhuma Posi" Chr(231) Chr(227) "o de Destino."
}
}
MsgErrorSecondsMissing(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, Seconds Missing, % "The checkbox for " FieldName " is active but you didnt configure the time to use the spell."
} else {
MsgBox, 4112, Segundos Faltando, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou o tempo para usar a Spell."
}
}
MsgErrorPartyListNotOpened(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, Party List not Opened, % "The checkbox for " FieldName " is active but the Party List window is not opened."
} else {
MsgBox, 4112, Party List Fechado, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o esta com o Party List aberto."
}
}
MsgErrorQuantity(FieldName){
if(GlobalLanguage == "English"){
MsgBox, 4112, Quantity Missing, % "The checkbox for " FieldName " is active but no Quantity is configured."
} else {
MsgBox, 4112, Quantidade Faltando, % "Voc" Chr(234) " ativou o " FieldName " mas n" Chr(227) "o configurou nenhuma quantidade."
}
}
LoadData(){
global
IniRead, Profile , %settingsFile%, Config, Profile , 1
IniRead, Vocation, %settingsFile%, Config, Vocation, Knight
IniRead, Locked, %settingsFile%, Config, Locked , 1
DFHotKey:="[...]", DFPercentage:=0
IniRead, HotkeysArray, %settingsFile%, ConfigHotkeys
Ini.Reconnect :=["Reconnect" ,0]
Ini.Compatibility :=["Compatibility",0]
Ini.HkStart :=["HkStart",0,DFHotKey]
Ini.HkPause :=["HkPause",0,DFHotKey]
Ini.HkFirstProfile :=["HkFirstProfile" ,0,DFHotKey,"1","Knight"]
Ini.HkSecondProfile :=["HkSecondProfile",0,DFHotKey,"1","Paladin"]
Ini.HkThirdProfile :=["HkThirdProfile" ,0,DFHotKey,"1","Druid"]
Ini.HkUtamoVita :=["HkUtamoVita",0,DFHotKey]
Ini.HkSwapRing :=["HkSwapRing",0,DFHotKey]
Ini.HkSwapAmulet :=["HkSwapAmulet",0,DFHotKey]
Ini.HkEnergyRing :=["HkEnergyRing",0,DFHotKey]
Ini.HkSSA :=["HkSSA",0,DFHotKey]
Ini.HkKeepHaste :=["HkKeepHaste",0,DFHotKey]
Ini.HkAutoHuntStart :=["HkAutoHuntStart",0,DFHotKey,0,0,0,DFHotKey,0]
Ini.HkAutoHuntPause :=["HkAutoHuntPause",0,DFHotKey]
Ini.AutoHuntGlobalCombo :=["AutoHuntGlobalCombo",0,"FirstCombo",1,"SecondCombo",3,20]
Ini.AutoHuntGlobalLoot :=["AutoHuntGlobalLoot",1]
Ini.AutoHuntGlobalHaste :=["AutoHuntGlobalHaste",0,DFHotKey]
Ini.HealConfig :=["HealConfig","Potions","Party List"]
HotkeyLineArray := StrSplit(HotkeysArray, "`n")
Loop % HotkeyLineArray.Length(){
HotkeySubArray := StrSplit(HotkeyLineArray[A_Index], "=>||")
InI[HotkeySubarray.1] := StrSplit(HotkeySubArray.2, "||")
}
ProfileComb := Profile . "-" . Vocation
IniRead, ProfileArray, %settingsFile%, % ProfileComb
Ini.OTServer :=["OTServer","Main",0,0]
Ini.HealthFood :=["HealthFood" ,"HighPriority",0,DFHotKey,DFPercentage]
Ini.ManaFood :=["ManaFood" ,"HighPriority",0,DFHotKey,DFPercentage]
Ini.OldUtamoVita :=["OldUtamoVita" ,"OTServerHighPriority" ,0,DFHotKey,DFPercentage,DFPercentage,0]
Ini.EnergyRing :=["EnergyRing" ,"EnergyRingHighPriority",0,DFHotKey,DFPercentage,DFPercentage,0,DFPercentage]
Ini.UtamoTempo :=["UtamoTempo" ,"KnightHighPriority",0,DFHotKey,DFPercentage,DFPercentage,0]
Ini.SSA :=["SSA" ,"SSAHighPriority",0,DFHotKey,DFPercentage,DFPercentage,0]
Ini.UtamoVita :=["UtamoVita" ,"DruidSorcererHighPriority",0,DFHotKey,DFPercentage,DFPercentage,DFPercentage,DFHotKey,"Use Utamo on configured HP",0,DFHotKey]
Ini.SwapRing :=["SwapRing" ,"HighPriority",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoRing","NoRing",0]
Ini.SwapAmulet :=["SwapAmulet" ,"HighPriority",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoAmulet","NoAmulet",0]
Ini.FirstHealthPotion :=["FirstHealthPotion" ,"Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.SecondHealthPotion :=["SecondHealthPotion","Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.ThirdHealthPotion :=["ThirdHealthPotion" ,"Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.FourthHealthPotion :=["FourthHealthPotion" ,"Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.FirstManaPotion :=["FirstManaPotion" ,"Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.SecondManaPotion :=["SecondManaPotion" ,"Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.ThirdManaPotion :=["ThirdManaPotion" ,"Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.FourthManaPotion :=["FourthManaPotion" ,"Potions",0,DFHotKey,DFPercentage,DFPercentage,0,DFHotKey,"NoPotion"]
Ini.UHRune :=["UHRune" ,"Potions",0,DFHotKey,DFPercentage]
Ini.UHRuneTwo :=["UHRuneTwo" ,"Potions",0,DFHotKey,DFPercentage]
Ini.ExuraGranSio :=["ExuraGranSio" ,"DruidHealingSpells" ,0,DFHotKey,DFPercentage,DFPercentage]
Ini.ExuraSio :=["ExuraSio" ,"DruidHealingSpells" ,0,DFHotKey,DFPercentage,DFPercentage]
Ini.ExuraSioTwo :=["ExuraSioTwo" ,"DruidHealingSpells" ,0,DFHotKey,DFPercentage,DFPercentage]
Ini.ExuraGranIco :=["ExuraGranIco" ,"KnightHealingSpells",0,DFHotKey,DFPercentage,DFPercentage]
Ini.ExuraMaxVita :=["ExuraMaxVita" ,"DruidSorcererHealingSpells",0,DFHotKey,DFPercentage,DFPercentage]
Ini.FirstHealing :=["FirstHealing" ,"HealingSpells",0,DFHotKey,DFPercentage,DFPercentage]
Ini.SecondHealing :=["SecondHealing","HealingSpells",0,DFHotKey,DFPercentage,DFPercentage]
Ini.ThirdHealing :=["ThirdHealing" ,"HealingSpells",0,DFHotKey,DFPercentage,DFPercentage]
Ini.UturaGran :=["UturaGran" ,"KnightPaladinHealingSpells",0,DFHotKey,DFPercentage,DFPercentage]
Ini.Utura :=["Utura" ,"KnightPaladinHealingSpells",0,DFHotKey,DFPercentage,DFPercentage]
Ini.ComboConfig :=["ComboConfig","ComboConfig",0 , "FirstCombo",0,1]
Ini.HkCombo1 :=["HkCombo1" ,"ComboConfig","Primeiro" ,DFHotKey,0,0]
Ini.HkCombo2 :=["HkCombo2" ,"ComboConfig","Segundo" ,DFHotKey,0,0]
Ini.HkCombo3 :=["HkCombo3" ,"ComboConfig","Terceiro" ,DFHotKey,0,0]
Ini.FirstCombo :=["FirstCombo" ,"FirstCombo" ,0,DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"Attack 1"]
Ini.SecondCombo :=["SecondCombo" ,"SecondCombo",0,DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"Attack 1"]
Ini.ThirdCombo :=["ThirdCombo" ,"ThirdCombo" ,0,DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"None",DFHotKey,"Attack 1"]
Ini.Loot :=["Loot" ,"General",0,DFHotKey,5,0]
Ini.EatFood :=["EatFood" ,"General",0,DFHotKey]
Ini.Haste :=["Haste" ,"General",0,DFHotKey]
Ini.CureParalyze :=["CureParalyze" ,"General",0,DFHotKey,DFHotKey]
Ini.CureCurse :=["CureCurse" ,"General",0,DFHotKey]
Ini.CurePoison :=["CurePoison" ,"General",0,DFHotKey]
Ini.SpecialPotion :=["SpecialPotion" ,"General",0,DFHotKey]
Ini.Quiver :=["Quiver" ,"General",0,DFHotKey,0]
Ini.ChatOn :=["ChatOn","General",0]
Ini.AutoBless :=["AutoBless","General",0,DFHotKey]
Ini.TimedSpell1 :=["TimedSpell1" ,"Smart",0,DFHotKey,0,"None"]
Ini.TimedSpell2 :=["TimedSpell2" ,"Smart",0,DFHotKey,0,"None"]
Ini.TimedSpell3 :=["TimedSpell3" ,"Smart",0,DFHotKey,0,"None"]
Ini.SmartCast1 :=["SmartCast1" ,"Smart",0,DFHotKey,0,"Attack","Crosshair"]
Ini.SmartCast2 :=["SmartCast2" ,"Smart",0,DFHotKey,0,"Attack","Crosshair"]
Ini.SmartCast3 :=["SmartCast3" ,"Smart",0,DFHotKey,0,"Attack","Crosshair"]
Ini.MoveItems :=["MoveItems" ,"Smart",0,DFHotKey,0,0,0,0]
Ini.MoveItemsBP :=["MoveItemsBP" ,"Smart",0,DFHotKey,0,0]
Ini.MoveItemsMouse :=["MoveItemsMouse" ,"Smart",0,DFHotKey,0,0]
Ini.Dance :=["Dance" ,"PvP",0,DFHotKey,10]
Ini.GodFlower :=["GodFlower" ,"PvP",0,DFHotKey,0,0]
Ini.MagicWall :=["MagicWall" ,"PvP",0,DFHotKey]
Ini.AntiPush :=["AntiPush" ,"PvP",0,DFHotKey,0,0]
Ini.Ammo :=["Ammo" ,"PvP",0,DFHotKey,20]
Ini.DragQuiver :=["DragQuiver" ,"PvP",0,DFHotKey,0,0,0]
Ini.GoldConverter :=["GoldConverter" ,"PvP",0]
Ini.Weapon :=["Weapon" ,"Training",0,DFHotKey]
Ini.SpellMax :=["SpellMax" ,"Training",0,DFHotKey]
Ini.ExerciseDummy :=["ExerciseDummy" ,"Training",0,DFHotKey,0,0,0,0,30]
Ini.AntiAfk :=["AntiAfk" ,"Training",0]
Ini.Targeting :=["Targeting" ,"Training",0,DFHotKey,"Disabled","Disabled"]
Ini.PairofSoftBoots :=["PairofSoftBoots","Training",0,DFHotKey]
Ini.TrainSpells :=["TrainSpells","Training",0,DFHotKey,DFHotKey]
Ini.TakeFromFloor :=["TakeFromFloor","Training",60,0,0,0]
ProfileLineArray := StrSplit(ProfileArray, "`n")
Loop % ProfileLineArray.Length(){
SubArray := StrSplit(ProfileLineArray[A_Index], "=>||")
For index, element in StrSplit(SubArray.2, "||")
if index > 2
InI[Subarray.1][index] := element
}
SupportSpells := "None"
For each, element in Skills[Vocation]["Support"] {
SupportSpells .= "|" each
}
AttackSpells := "None"
For each, element in Skills[Vocation]["Attack"] {
AttackSpells .= "|" each
}
}
PopulateFields(){
global
LoadData()
Ini.OTServer.3 := 1
Gui, Config:Destroy
Suspend, Off
If (Vocation)
GuiControl, Main:ChooseString, VocationSelected, %Vocation%
If (Profile)
GuiControl, Main:ChooseString, ProfileSelected, %Profile%
If ( Vocation = "Druid" ){
PNGMP := "ManaPotion|StrongManaPotion|GreatManaPotion|UltimateManaPotion"
PNGHP := "HealthPotion"
Gui, KnightPaladinHealingSpells : Hide
Gui, KnightHealingSpells : Hide
Gui, KnightHighPriority : Hide
Gui, SSAHighPriority : Hide
If (InI.OTServer.4 != 1){
Gui, EnergyRingHighPriority : Hide
Gui, OTServerHighPriority : Hide
Gui, DruidSorcererHighPriority : Show
} else {
Gui, DruidSorcererHighPriority : Hide
Gui, EnergyRingHighPriority : Show
Gui, OTServerHighPriority : Show
}
Gui, DruidHealingSpells : Show
Gui, DruidSorcererHealingSpells : Show
Gui, NewOldUtamoHighPriority : Show
} Else If ( Vocation = "Sorcerer" ){
PNGMP := "ManaPotion|StrongManaPotion|GreatManaPotion|UltimateManaPotion"
PNGHP := "HealthPotion"
Gui, DruidHealingSpells : Hide
Gui, KnightPaladinHealingSpells : Hide
Gui, KnightHealingSpells : Hide
Gui, EnergyRingHighPriority : Hide
Gui, KnightHighPriority : Hide
Gui, SSAHighPriority : Hide
Gui, DruidSorcererHighPriority : Hide
If (InI.OTServer.4 != 1){
Gui, EnergyRingHighPriority : Hide
Gui, OTServerHighPriority : Hide
Gui, DruidSorcererHighPriority : Show
} else {
Gui, DruidSorcererHighPriority : Hide
Gui, EnergyRingHighPriority : Show
Gui, OTServerHighPriority : Show
}
Gui, DruidSorcererHealingSpells: Show
Gui, NewOldUtamoHighPriority : Show
} Else If ( Vocation = "Knight" ){
PNGMP := "ManaPotion|StrongManaPotion"
PNGHP := "HealthPotion|StrongHealthPotion|GreatHealthPotion|UltimateHealthPotion|SupremeHealthPotion"
Gui, DruidSorcererHighPriority : Hide
Gui, DruidSorcererHealingSpells: Hide
Gui, DruidHealingSpells : Hide
Gui, OTServerHighPriority : Hide
Gui, NewOldUtamoHighPriority : Hide
Gui, EnergyRingHighPriority : Show
Gui, KnightHighPriority : Show
Gui, SSAHighPriority : Show
Gui, KnightPaladinHealingSpells: Show
Gui, KnightHealingSpells : Show
} Else If ( Vocation = "Paladin" ){
PNGMP := "ManaPotion|StrongManaPotion|GreatManaPotion|GreatSpiritPotion|UltimateSpiritPotion"
PNGHP := "HealthPotion|StrongHealthPotion|GreatSpiritPotion|UltimateSpiritPotion"
Gui, DruidSorcererHighPriority : Hide
Gui, DruidSorcererHealingSpells: Hide
Gui, DruidHealingSpells : Hide
Gui, KnightHealingSpells : Hide
Gui, OTServerHighPriority : Hide
Gui, NewOldUtamoHighPriority : Hide
Gui, KnightHighPriority : Hide
Gui, EnergyRingHighPriority : Show
Gui, KnightPaladinHealingSpells: Show
Gui, SSAHighPriority : Show
}
For index, element in classButton {
If (element.state=0 || element.state=1){
classButton[index].state := ini[element.array.1][element.arrayNumber]
classButton[index].Draw()
}
}
For index, element in ini {
If (index != "AntiAfk" && index != "ComboConfig" && index != "TakeFromFloor"){
GuiControl, % element[2] ":", %index%4, % HotkeyRemane(InI[index][4])
}
ComboGui := False
switch (index){
case "Loot":
if(VersionType == "OTServer" && InI[index][6] == "1"){
GuiControl, % element[2] ":", %index%5, % "Exeta Loot"
} else {
GuiControl, % element[2] ":", %index%5, % "Delay: " InI[index][5] "ms"
}
case "CureParalyze":
GuiControl, % element[2] ":", %index%5, % HotkeyRemane(InI[index][5])
case "TrainSpells":
GuiControl, % element[2] ":", %index%5, % HotkeyRemane(InI[index][5])
case "TakeFromFloor":
English := "Every: "
Portuguese := "Cada: "
GuiControl, % element[2] ":", %index%4, % %GlobalLanguage% InI[index][4] "s"
case "Targeting":
English := "Seconds: "
Portuguese := "Segundos: "
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage% InI[index][5]
English := "Life %: "
Portuguese := "Vida %: "
GuiControl, % element[2] ":", %index%6, % %GlobalLanguage% InI[index][6]
case "Dance":
GuiControl, % element[2] ":", %index%5, % "Sleep: " InI[index][5] "ms"
case "Ammo":
English := "below "
Portuguese := "abaixo "
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage% InI[index][5] "x"
case "Quiver":
English := "below "
Portuguese := "abaixo "
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage% InI[index][5] "x"
case "DragQuiver":
English := "below "
Portuguese := "abaixo "
GuiControl, % element[2] ":", %index%7, % %GlobalLanguage% InI[index][7] "x"
case "ExerciseDummy":
English := "Charge: "
Portuguese := "Cargas: "
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage% InI[index][5] "x"
English := "Qty: "
Portuguese := "Qtd: "
GuiControl, % element[2] ":", %index%6, % %GlobalLanguage% InI[index][6] "x"
English := % InI[index][9] "seconds "
Portuguese := % InI[index][9] " segundos"
GuiControl, % element[2] ":", %index%9, % %GlobalLanguage%
case "TimedSpell1":
English := "Every: "
Portuguese := "Cada: "
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage% InI[index][5] "s"
GuiControl, % element[2] ":", %index%6, % "CD: " InI[index][6]
case "TimedSpell2":
English := "Every: "
Portuguese := "Cada: "
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage% InI[index][5] "s"
GuiControl, % element[2] ":", %index%6, % "CD: " InI[index][6]
case "TimedSpell3":
English := "Every: "
Portuguese := "Cada: "
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage% InI[index][5] "s"
GuiControl, % element[2] ":", %index%6, % "CD: " InI[index][6]
case "AntiPush":
case "MoveItems":
case "MoveItemsBP":
case "MoveItemsMouse":
case "GodFlower":
case "ExerciseDummy":
case "MagicWall":
case "ComboConfig":
switch (Ini[index][4]){
case "FirstCombo":
English := "First"
Portuguese := "Primeiro"
GuiControl, % element[2] ":ChooseString", %index%4, % %GlobalLanguage%
case "SecondCombo":
English := "Second"
Portuguese := "Segundo"
GuiControl, % element[2] ":ChooseString", %index%4, % %GlobalLanguage%
case "ThirdCombo":
English := "Third"
Portuguese := "Terceiro"
GuiControl, % element[2] ":ChooseString", %index%4, % %GlobalLanguage%
}
GuiControl, % element[2] ":ChooseString", %index%6, % InI[index][6]
case "HkCombo1":
GuiControl, % element[2] ":", %index%3, % InI[index][3]
case "HkCombo2":
GuiControl, % element[2] ":", %index%3, % InI[index][3]
case "HkCombo3":
GuiControl, % element[2] ":", %index%3, % InI[index][3]
case "FirstCombo":
ComboGui := True
case "SecondCombo":
ComboGui := True
case "ThirdCombo":
ComboGui := True
default:
GuiControl, % element[2] ":", %index%5, % InI[index][5] "%"
GuiControl, % element[2] ":", %index%6, % InI[index][6] "%"
if (index = "EnergyRing"){
GuiControl, % element[2] ":", %index%8, % InI[index][8] "%"
}
}
If (ComboGui == True) {
pos := StrSplit(InI[index][5], "CD:")
SetImage( %index%5 , PNG[pos.1] )
GuiControl, % element[2] ":", %index%5, % pos.1
GuiControl, % element[2] ":", %index%6, % HotkeyRemane(InI[index][6])
GuiControl, % element[2] ":", %index%5Cooldown, % pos.2
pos := StrSplit(InI[index][7], "CD:")
SetImage( %index%7 , PNG[pos.1] )
GuiControl, % element[2] ":", %index%7, % pos.1
GuiControl, % element[2] ":", %index%8, % HotkeyRemane(InI[index][8])
GuiControl, % element[2] ":", %index%7Cooldown, % pos.2
pos := StrSplit(InI[index][9], "CD:")
SetImage( %index%9 , PNG[pos.1] )
GuiControl, % element[2] ":", %index%9, % pos.1
GuiControl, % element[2] ":", %index%10, % HotkeyRemane(InI[index][10])
GuiControl, % element[2] ":", %index%9Cooldown, % pos.2
SetImage( %index%11 , PNG[InI[index][11]] )
GuiControl, % element[2] ":", %index%11, % InI[index][11]
GuiControl, % element[2] ":", %index%12, % HotkeyRemane(InI[index][12])
SetImage( %index%13 , PNG[InI[index][13]] )
GuiControl, % element[2] ":", %index%13, % InI[index][13]
GuiControl, % element[2] ":", %index%14, % HotkeyRemane(InI[index][14])
SetImage( %index%15 , PNG[InI[index][15]] )
GuiControl, % element[2] ":", %index%15, % InI[index][15]
GuiControl, % element[2] ":", %index%16, % HotkeyRemane(InI[index][16])
SetImage( %index%17 , PNG[InI[index][17]] )
GuiControl, % element[2] ":", %index%17, % InI[index][17]
GuiControl, % element[2] ":", %index%18, % HotkeyRemane(InI[index][18])
SetImage( %index%19 , PNG[InI[index][19]] )
GuiControl, % element[2] ":", %index%19, % InI[index][19]
GuiControl, % element[2] ":", %index%20, % HotkeyRemane(InI[index][20])
SetImage( %index%21 , PNG[InI[index][21]] )
GuiControl, % element[2] ":", %index%21, % InI[index][21]
GuiControl, % element[2] ":", %index%22, % HotkeyRemane(InI[index][22])
If (Ini[index][23] == "Attack 1") {
Data.Momentum[index]["spell"] := Ini[index][11]
Data.Momentum[index]["hotkey"] := Ini[index][12]
} Else If (Ini[index][23] == "Attack 2") {
Data.Momentum[index]["spell"]  := Ini[index][13]
Data.Momentum[index]["hotkey"] := Ini[index][14]
} Else If (Ini[index][23] == "Attack 3") {
Data.Momentum[index]["spell"]  := Ini[index][15]
Data.Momentum[index]["hotkey"] := Ini[index][16]
} Else If (Ini[index][23] == "Attack 4") {
Data.Momentum[index]["spell"]  := Ini[index][17]
Data.Momentum[index]["hotkey"] := Ini[index][18]
} Else If (Ini[index][23] == "Attack 5") {
Data.Momentum[index]["spell"]  := Ini[index][19]
Data.Momentum[index]["hotkey"] := Ini[index][20]
} Else {
Data.Momentum[index]["spell"]  := Ini[index][21]
Data.Momentum[index]["hotkey"] := Ini[index][22]
}
PNGTemp := % Data.Momentum[index]["spell"]
SetImage( %index%23 , PNG[PNGTemp] )
GuiControl, % element[2] ":", %index%23, % PNGTemp
} Else {
If (element[2] = "Potions"){
PotionName:= "Gui" . index, SetImage( %PotionName%, PNG[InI[index][9]])
}
If (InI[index][7] = 1 && index != "ExuraSio" && index != "Loot"){
GuiControl, % element[2] ":Hide", %index%5
GuiControl, % element[2] ":Hide", %index%6
} Else If (InI[index][7] = 0){
GuiControl, % element[2] ":Show", %index%5
GuiControl, % element[2] ":Show", %index%6
}
If(index = "SwapRing"){
GuiControl, % element[2] ":Show", %index%8
GuiControl, % element[2] ":", %index%8, % HotkeyRemane(InI[index][8])
SetImage( GuiRingTank , PNG[InI[index][9]] )
SetImage( GuiRingMain , PNG[InI[index][10]] )
If (InI[index][10] = "NoRing"){
GuiControl, % element[2] ":Hide", %index%8
InI[index][8] := InI[index][4]
}
}
If(index = "SwapAmulet"){
GuiControl, % element[2] ":Show", %index%8
GuiControl, % element[2] ":", %index%8, % HotkeyRemane(InI[index][8])
SetImage( GuiAmuletTank , PNG[InI[index][9]] )
SetImage( GuiAmuletMain , PNG[InI[index][10]] )
If (InI[index][10] = "NoAmulet"){
GuiControl, % element[2] ":Hide", %index%8
InI[index][8] := InI[index][4]
}
}
If (index = "UtamoVita"){
switch (Ini.UtamoVita.9){
case "Use Utamo on configured HP":
if(Ini.UtamoVita.7 != "" && Ini.UtamoVita.7 != 0 && Ini.UtamoVita.7 != "[...]"){
GuiControl, % element[2] ":", %index%7, % InI[index][7] "%"
GuiControl, % element[2] ":", %index%8, % HotkeyRemane(InI[index][8])
} else {
English := "Disabled"
Portuguese := "Desativado"
GuiControl, % element[2] ":", %index%7, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%8, % %GlobalLanguage%
}
English := "Will use Utamo Vita When your HP is below the % configured"
Portuguese := "Vai usar o Utamo quando seu HP estiver abaixo do % indicado"
case "Always Renew after expire":
English := "Disabled"
Portuguese := "Desativado"
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%6, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%7, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%8, % %GlobalLanguage%
English := "Always renew Utamo when it is finished"
Portuguese := "Renova o Utamo sempre que ele terminar"
case "Always Renew after cooldown":
English := "Disabled"
Portuguese := "Desativado"
GuiControl, % element[2] ":", %index%5, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%6, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%7, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%8, % %GlobalLanguage%
English := "Always renew when Cooldown is finished (14 seconds)"
Portuguese := "Renovar sempre que o Cooldown terminar (14 segundos)"
}
GuiControl, % element[2] ":", %index%9, % %GlobalLanguage%
GuiControl, % element[2] ":", %index%11, % HotkeyRemane(InI[index][11])
}
}
}
If (ProfileComb != HKProfileComb){
HotkeysOff()
HKProfileComb := ProfileComb
HotkeysOn()
}
if(Macro = 1){
if(ValidateFields()){
Macro := 0
SetTimer, Button2, On
Return
}
}
Gui, Main: +AlwaysOnTop
}
MainScreen(){
global
Menu, Tray, DeleteAll
Menu, Tray, Add, Show, MainOnTop
Menu, Tray, Add, Start, Button1
Menu, Tray, Add, Pause, Button2
Menu, Tray, Add, Exit, TrayClose
GuiControl, Main:, TimeRemaining, % " " userData.licenseEndDate
if (VersionType == "Global" && userData.autoHuntActive == 1){
GuiControl, AutoHuntGui:, TimeAHRemaining, % " " userData.autoHuntEndDate
}
IniRead, GX, %settingsFile%, Config, WindowsX, A_ScreenWidth/3
IniRead, GY, %settingsFile%, Config, WindowsY, A_ScreenHeight/3
if (GX = "" || GX < 0 || GX > A_ScreenWidth){
GX := (A_ScreenWidth/3)
}
if (GY = "" || GY < 0 || GY > A_ScreenWidth){
GY := (A_ScreenHeight/3)
}
Gui, Main:Show, x%GX% y%GY% h590 w490, MH - Tibia Helper
}
Profile(){
global
Gui, Submit, NoHide
ProfileComb:= ProfileSelected . "-" . VocationSelected
IniWrite, %ProfileSelected%, %settingsFile%, Config, Profile
IniWrite, %VocationSelected%, %settingsFile%, Config, Vocation
PopulateFields()
}
Limit(){
global
Gui, submit, nohide
If Percet1 not between 0 and 100
GuiControl,, Percet1
If Percet2 not between 0 and 100
GuiControl,, Percet2
If Percet3 not between 0 and 100
GuiControl,, Percet3
If (Support1 && (Support1 < 0 || Support1 > 600))
GuiControl,, Support1
If (Support2 && (Support2 < 0 || Support2 > 600))
GuiControl,, Support2
If (Support3 && (Support3 < 0 || Support3 > 600))
GuiControl,, Support3
}
Limit800(){
global
Gui, submit, nohide
If Percet1 not between 0 and 800
GuiControl,, Percet1
If Percet2 not between 0 and 800
GuiControl,, Percet2
}
InviteScreen(){
SaveGuiPosition()
GuiControl, Invite:, InviteCode, % userData.inviteCode
GuiControl, Invite:, FriendsInvited, % userData.friendsInvited
GuiControl, Invite:, RewardsToRedeem, % userData.rewardsToRedeem
Gui, Invite:Show, w350
}
CopyInviteCode(){
global
Gui, submit, nohide
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
clipboard := % userData.inviteCode
}
CopyInviteCodeEN(){
global
Gui, submit, nohide
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
clipboard := % "Guys, you should try Tibia Helper, an amazing tool for Tibia Global and OTServers, it has Auto Healer, Lootpicker, Combo and much more.`nJoin their Discord Server https://discord.gg/DCUCe8YVNK `nFollow them on Youtube https://www.youtube.com/channel/UCrHCyZ-YKuIvWEQj-yhYnGA`nMention my Invite Code when you buy it: " userData.inviteCode
}
CopyInviteCodeBR(){
global
Gui, submit, nohide
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
clipboard := % "Galera, vcs precisam testar o Tibia Helper, uma ferramenta top pra Tibia Global e OTServers, ele tem Auto Healer, Lootpicker, Combo e muito mais.`nEntrem no Servidor Discord deles https://discord.gg/DCUCe8YVNK `nSigam eles no Youtube https://www.youtube.com/channel/UCrHCyZ-YKuIvWEQj-yhYnGA`nMencionem o meu Invite Code quando comprarem: " userData.inviteCode
}
InviteGuiClose(){
Gui, Invite:Hide
}
OpenConfigurationScreen(){
SaveGuiPosition()
ConfigurationScreen()
}
ConfigurationScreen(){
global
if (userData.email != null){
Hotkey, % InI.HkStart.3,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% InI.HkStart.3,Off
}
Hotkey, % InI.HkPause.3,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% InI.HkPause.3,Off
}
Hotkey, % InI.HkFirstProfile.3,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% InI.HkFirstProfile.3,Off
}
Hotkey, % InI.HkSecondProfile.3,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% InI.HkSecondProfile.3,Off
}
Hotkey, % InI.HkThirdProfile.3,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% InI.HkThirdProfile.3,Off
}
Gui, Configuration:Show, w350 h550
}
}
ConfigurationGuiClose(){
global
Gui, GlobalHotkeys:submit, nohide
if(HkStart3 != "[...]" && HkStart3 != ""){
InI["HkStart"][3] := HkStart3
IniWriteArray(InI["HkStart"],"HkStart","ConfigHotkeys")
}
if(HkPause3 != "[...]" && HkPause3 != ""){
InI["HkPause"][3] := HkPause3
IniWriteArray(InI["HkPause"],"HkPause","ConfigHotkeys")
}
if(HkFirstProfile3 != "[...]" && HkFirstProfile3 != ""){
InI["HkFirstProfile"][3] := HkFirstProfile3
InI["HkFirstProfile"][4] := HkFirstProfile4
InI["HkFirstProfile"][5] := HkFirstProfile5
IniWriteArray(InI["HkFirstProfile"],"HkFirstProfile","ConfigHotkeys")
}
if(HkSecondProfile3 != "[...]" && HkSecondProfile3 != ""){
InI["HkSecondProfile"][3] := HkSecondProfile3
InI["HkSecondProfile"][4] := HkSecondProfile4
InI["HkSecondProfile"][5] := HkSecondProfile5
IniWriteArray(InI["HkSecondProfile"],"HkSecondProfile","ConfigHotkeys")
}
if(HkThirdProfile3 != "[...]" && HkThirdProfile3 != ""){
InI["HkThirdProfile"][3] := HkThirdProfile3
InI["HkThirdProfile"][4] := HkThirdProfile4
InI["HkThirdProfile"][5] := HkThirdProfile5
IniWriteArray(InI["HkThirdProfile"],"HkThirdProfile","ConfigHotkeys")
}
PopulateFields()
Gui, Configuration:Hide
}
ProfileScreen(){
GuiName:= "Profile"
Gui, %GuiName%:Destroy
Gui, %GuiName%: -Caption +ToolWindow +LastFound +AlwaysOnTop -0x20000
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, cFFFFFF
Gui, %GuiName%:Font, bold, Tahoma
Gui, %GuiName%:Add, Picture, x0 y0 +BackgroundTrans , % "HBITMAP:*" PNG.TopBarra
Gui, %GuiName%:Add, Picture, x3 y3 +BackgroundTrans , % "HBITMAP:*" PNG.16x16Logo
classButton.Push(New IMG_Button(350-28 , 0 , 28 , 22 , PNG.XClose , PNG.HXClose , GuiName , "ProfileGuiClose"))
English := "Copy Profile"
Portuguese := "Copiar Perfil"
Gui, %GuiName%:Add, Text, x25 y4 +BackgroundTrans, % %GlobalLanguage%
profileList := ""
Loop, 4 {
If (A_Index != SubStr(ProfileComb, 1 , 1)){
profileList := profileList . A_Index . SubStr(ProfileComb, 2 , 10) "|"
}
}
cx:=15, cy:=30
English := "Which profile do you want to paste the copied profile?"
Portuguese := "Qual perfil voc" Chr(234) " quer colar o perfil que foi copiado?"
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 5 " cWhite +BackgroundTrans", % %GlobalLanguage%
English := "Save to Profile:"
Portuguese := "Salvar no Perfil:"
Gui, %GuiName%:Add, Text, x23 y+10 cWhite +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DDL, x+10 yp-2 w100 vProfileToCopy choose1, % profileList
English := "Copy"
Portuguese := "Copiar"
classButton.Push(New Button_Type_1( cx+225 , cy+25 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "CopyProfile", Roundness:=3 ) )
Gui, %GuiName%:Show, w350 h90
}
CopyProfile(){
Gui, submit, nohide
IniRead, ProfileArray, %settingsFile%, % ProfileComb
IniWrite, %ProfileArray%, %settingsFile%, % ProfileToCopy
MsgBox, 4160, Profile Copied, % "Success!"
ProfileGuiClose()
}
ProfileGuiClose(){
Gui, Profile:Destroy
}
SaveSettings(){
global
try {
Fieldemail := OBJGet.Config.Edit01
FieldPassword := OBJGet.Config.Edit02
idioma := OBJGet.Ling
FileRead, settingsContent, %settingsFile%
settingsContent := StrReplace(settingsContent, "\", "\\")
settingsContent := StrReplace(settingsContent, "`r`n", "\r\n")
Body = {"type": "Save","email": "%Fieldemail%","password": "%FieldPassword%","game": "Tibia","content": "%settingsContent%","idioma": "%idioma%"}
WinHTTP := ComObjCreate("WinHttp.WinHttpRequest.5.1")
WinHTTP.Open("POST", Data.ServerIPPort, false)
WinHTTP.SetRequestHeader("Content-Type", "application/json")
WinHTTP.Send(Body)
userSettings := JsonToAHK(WinHTTP.ResponseText)
if(userSettings.error){
MsgBox, 4112, Error, % userSettings.error
Return
}
if(userSettings.content){
MsgBox, 4160, Settings Saved, % "Settings Saved."
} else {
MsgBox, 4112, Error, "Something went wrong. Please try again"
Return
}
} catch e {
If (i := InStr(e.Message, "Description:"))
MsgBox, % "Description: " StrReplace(SubStr(e.Message, i, InStr(e.Message, "`n",, i)-i), "Description:`t" , "") "`nFile: " e.File
}
}
LoadSettings(){
try {
Fieldemail := OBJGet.Config.Edit01
FieldPassword := OBJGet.Config.Edit02
idioma := OBJGet.Ling
Body = {"type": "Load","email": "%Fieldemail%","password": "%FieldPassword%","game": "Tibia","idioma": "%idioma%"}
WinHTTP := ComObjCreate("WinHttp.WinHttpRequest.5.1")
WinHTTP.Open("POST", Data.ServerIPPort, false)
WinHTTP.SetRequestHeader("Content-Type", "application/json")
WinHTTP.Send(Body)
userSettings := JsonToAHK(WinHTTP.ResponseText)
if(userSettings.error){
MsgBox, 4112, Error, % userSettings.error
Return
}
if(userSettings.content){
ResetSettings("Loading")
settingsContent := userSettings.content
FileAppend, %settingsContent% , %settingsFile%
Loadcomplete := 1
} else {
MsgBox, 4112, Error, "Something went wrong. Please try again"
Return
}
} catch e {
If (i := InStr(e.Message, "Description:"))
MsgBox, % "Description: " StrReplace(SubStr(e.Message, i, InStr(e.Message, "`n",, i)-i), "Description:`t" , "") "`nFile: " e.File
}
if (Loadcomplete = 1){
MsgBox, 4160, Settings Loaded, % "Settings Loaded."
ConfigurationGuiClose()
}
}
ResetSettings(var := ""){
InitialSettings()
IniDelete, %settingsFile%, Config
IniDelete, %settingsFile%, ConfigHotkeys
IniDelete, %settingsFile%, 1-Knight
IniDelete, %settingsFile%, 2-Knight
IniDelete, %settingsFile%, 3-Knight
IniDelete, %settingsFile%, 4-Knight
IniDelete, %settingsFile%, 1-Paladin
IniDelete, %settingsFile%, 2-Paladin
IniDelete, %settingsFile%, 3-Paladin
IniDelete, %settingsFile%, 4-Paladin
IniDelete, %settingsFile%, 1-Druid
IniDelete, %settingsFile%, 2-Druid
IniDelete, %settingsFile%, 3-Druid
IniDelete, %settingsFile%, 4-Druid
IniDelete, %settingsFile%, 1-Sorcerer
IniDelete, %settingsFile%, 2-Sorcerer
IniDelete, %settingsFile%, 3-Sorcerer
IniDelete, %settingsFile%, 4-Sorcerer
If (var != "Loading"){
FileAppend, %defaultSettingsFile%, %settingsFile%
MsgBox, 4160, Settings Reset, % "Settings Reset."
ConfigurationGuiClose()
}
}
LootAnalyser(){
global
Gui, submit, nohide
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
LootString := clipboard
If (StrLen(LootString) < 50 ||
!InStr(LootString, "Balance") ||
!InStr(LootString, "Supplies") ||
!InStr(LootString, "Loot") ||
!InStr(LootString, "Session") ||
!InStr(LootString, "Loot Type")){
MsgBox, 4112, Missing Parameters, % "Wrong data. Please copy the party hunt log and try again.`n`nDados invalidos. Por favor copie novamente o log do party hunt e tente de novo"
return false
}
LootString := StrReplace(LootString, "`r`n", " ")
LootString := StrReplace(LootString, " (Leader)", "")
analyser_temp := RemoveFirstSection(LootString)
number_of_players := NumberOfPlayers(analyser_temp)
players_and_their_balance := BalancePerPlayer(analyser_temp, number_of_players)
total_profit := TotalProfit(players_and_their_balance)
profit_per_person := total_profit / number_of_players
who_to_pay_and_how_much := FinalSplit(players_and_their_balance, profit_per_person, number_of_players)
LootResults(who_to_pay_and_how_much, total_profit, profit_per_person, resultsContent)
}
LootStringReset(){
Gui, submit, nohide
GuiControl, SplitLoot:, LootString,
}
RemoveFirstSection(temp) {
index := InStr(temp,"Balance: ")
substring1 := SubStr(temp, index + 9)
index2 := InStr(substring1," ")
substring2 := SubStr(substring1, 1, index2-1)
substring2 := StrReplace(substring2, ",", "")
analyser_temp := SubStr(substring1, StrLen(substring2) + 3)
return analyser_temp
}
NumberOfPlayers(temp) {
search := "Balance"
StringReplace, temp, temp, %search%, %search%, UseErrorLevel
count := ErrorLevel
return count
}
BalancePerPlayer(temp, number_of_players) {
players_and_balance := []
Loop, %number_of_players% {
index_loot := InStr(temp,"Loot:")
name_of_player := SubStr(temp, 1, index_loot -1)
name_of_player := Trim(name_of_player)
index_balance := InStr(temp,"Balance: ")
index_damage := InStr(temp,"Damage: ")
balance_of_player := SubStr(temp, index_balance + 9, index_damage - index_balance - 9)
balance_of_player := StrReplace(balance_of_player, ",", "")
balance_of_player := Trim(balance_of_player)
players_and_balance[A_Index] := {name: name_of_player, balance: balance_of_player}
index_healing := InStr(temp,"Healing: ")
temp := SubStr(temp, index_healing + 9)
index_space := InStr(temp," ")
temp := SubStr(temp, index_space + 1)
}
return players_and_balance
}
TotalProfit(players_and_their_balance) {
total_balance := 0
Loop, % players_and_their_balance.MaxIndex() {
total_balance := total_balance + players_and_their_balance[A_Index]["balance"]
}
return total_balance
}
FinalSplit(players_and_their_balance, profit_per_person, number_of_players) {
players_and_outstanding_payment := []
Loop, %number_of_players% {
name := players_and_their_balance[A_Index]["name"]
oustanding_payment := profit_per_person - players_and_their_balance[A_Index]["balance"]
players_and_outstanding_payment[A_Index] := {name: name, balance: oustanding_payment}
}
who_to_pay_and_how_much := []
Loop, %number_of_players% {
i := A_Index
if (players_and_outstanding_payment[i]["balance"] < 0) {
while (Abs(players_and_outstanding_payment[i]["balance"]) > 5) {
Loop, %number_of_players% {
j := A_Index
if (players_and_outstanding_payment[j]["balance"] > 0) {
if (players_and_outstanding_payment[j]["balance"] > Abs(players_and_outstanding_payment[i]["balance"])) {
players_and_outstanding_payment[j]["balance"] := players_and_outstanding_payment[j]["balance"] + players_and_outstanding_payment[i]["balance"]
who_to_pay_and_how_much.Push({name: players_and_outstanding_payment[i]["name"], amount: Abs(players_and_outstanding_payment[i]["balance"]), to_who: players_and_outstanding_payment[j]["name"]})
players_and_outstanding_payment[i]["balance"] := 0
} else {
players_and_outstanding_payment[i]["balance"] := players_and_outstanding_payment[i]["balance"] + players_and_outstanding_payment[j]["balance"]
players_and_outstanding_payment[j]["balance"] := Ceil(players_and_outstanding_payment[j]["balance"])
who_to_pay_and_how_much.Push({name: players_and_outstanding_payment[i]["name"], amount: Abs(players_and_outstanding_payment[j]["balance"]), to_who: players_and_outstanding_payment[j]["name"]})
players_and_outstanding_payment[j]["balance"] := 0
}
}
}
}
}
}
return who_to_pay_and_how_much
}
LootResults(who_to_pay_and_how_much, total_profit, profit_per_person, resultsContent){
static
Gui, LootResults:Destroy
Gui, LootResults:New, +parentSplitLoot -caption
Gui, LootResults:Color,%GColor1%,%GColor2%
Gui, LootResults:Font, c569cd6
Gui, LootResults:Font, bold, Tahoma
transfer_array := []
copy_button_array := []
i := 1
Loop, % who_to_pay_and_how_much.MaxIndex() {
amount := who_to_pay_and_how_much[A_Index]["amount"]
gp_amount := Round(amount)
payer_name := who_to_pay_and_how_much[A_Index]["name"]
payee_name := who_to_pay_and_how_much[A_Index]["to_who"]
if (amount) {
Gui, LootResults: Add, Button, % "x20 y+13 gCopyToClipboard vCopyButton" i , % "Copy"
if (amount > 1000) {
amount := Round(amount / 1000)
Gui, LootResults:Add, Text, % "x+5 yp+3 cWhite +BackgroundTrans", % payer_name " must transfer " amount "k to " payee_name "."
} else {
Gui, LootResults:Add, Text, % "x+5 yp+3 cWhite +BackgroundTrans", % payer_name " must transfer " amount " to " payee_name "."
}
LootMessage[i] := "transfer " gp_amount " to " payee_name
i++
}
}
Gui, LootResults:Show,  x10 y240 w490 h200, Loot Results
}
CopyToClipboard(){
Temp := A_GuiControl
indice := SubStr(Temp, 0)
clipboard := LootMessage[indice]
}
AntiAfkDisable(){
Timer.AntiAfk := False
}
AntiAfk(){
If (InI.AntiAfk.3 = 1 && Timer.AntiAfk != 1){
FocusClient()
SendInput {Ctrl down}
Sleep, 10
SendInput {Up down}
Sleep, 10
SendInput {Up up}
Sleep, 10
SendInput {Ctrl down}
Sleep, 10
SendInput {Down down}
Sleep, 10
SendInput {Down up}
Sleep, 10
SendInput {Ctrl up}
SendInput {Ctrl down}
Sleep, 10
SendInput {Left down}
Sleep, 10
SendInput {Left up}
Sleep, 10
SendInput {Ctrl down}
Sleep, 10
SendInput {Right down}
Sleep, 10
SendInput {Right up}
Sleep, 10
SendInput {Ctrl up}
Timer.AntiAfk := True
SetTimer, AntiAfkDisable, -840000
}
}
AntiPushHotkey(){
Data.AntiPush := !Data.AntiPush
}
AntiPush(){
If (Data.AntiPush = 1 && InI.AntiPush.3 = 1){
FocusClient()
MouseGetPos, StartX, StartY
posX := 0
loop, 2 {
MouseMove, InI.AntiPush.5+posX, InI.AntiPush.6
Sleep, 50
SendInput {Shift Down}{LButton Down}
Sleep, 50
MouseMove, SQTLoot.9.x+WindowInfo.ClassNN.x, SQTLoot.9.y+WindowInfo.ClassNN.y
Sleep, 50
SendInput {LButton Up}{Shift Up}
Sleep, 50
posX += 37
}
MouseMove, StartX, StartY
Data.AntiPush := 0
}
}
ValidateAntiPush(){
if (Ini.AntiPush.3) {
if(Ini.AntiPush.5 = 0 || Ini.AntiPush.5 = ""){
MsgErrorPositionFrom(Ini.AntiPush.1)
Return 1
}
if(Ini.AntiPush.4 = "[...]" || Ini.AntiPush.4 = ""){
MsgErrorHotkeyMissing(Ini.AntiPush.1)
Return 1
} else {
Hotkey,% Ini.AntiPush.4,AntiPushHotkey
Hotkey,% Ini.AntiPush.4,On
}
for k, v in HotkeysConfigured {
if (InI.AntiPush.4 = v) {
MsgErrorHotkeyInUse(Ini.AntiPush.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.AntiPush.4)
}
}
global Skills := []
Skills.LastUsed := 1
Skills.BlockedAttack := False
global SupportSpells
global AttackSpells
global Combo := []
global ComboOriginal := []
Data.Momentum := []
Data.Momentum.FirstCombo := []
Data.Momentum.SecondCombo := []
Data.Momentum.ThirdCombo := []
Skills.Knight := {Support: [], Attack: []}
Skills.Knight.Support.ExetaRes          := ["ExetaRes"          , 6 ]
Skills.Knight.Support.ExetaAmpRes       := ["ExetaAmpRes"       , 12]
Skills.Knight.Support.UtitoTempo        := ["UtitoTempo"        , 10]
Skills.Knight.Support.UtamoTempo        := ["UtamoTempo"        , 10]
Skills.Knight.Attack.ExoriIco           := ["ExoriIco"          , 6 ]
Skills.Knight.Attack.ExoriGranIco       := ["ExoriGranIco"      , 30]
Skills.Knight.Attack.ExoriHur           := ["ExoriHur"          , 6 ]
Skills.Knight.Attack.Exori              := ["Exori"             , 4 ]
Skills.Knight.Attack.ExoriGran          := ["ExoriGran"         , 6 ]
Skills.Knight.Attack.ExoriMin           := ["ExoriMin"          , 6 ]
Skills.Knight.Attack.ExoriMas           := ["ExoriMas"          , 8 ]
Skills.Knight.Attack.Runa               := ["Runa"              , 2 ]
Skills.Paladin := {Support: [], Attack: []}
Skills.Paladin.Support.ExanaAmpRes      := ["ExanaAmpRes"       , 8 ]
Skills.Paladin.Support.UtitoTempoSan    := ["UtitoTempoSan"     , 10 ]
Skills.Paladin.Attack.ExoriCon          := ["ExoriCon"          , 2 ]
Skills.Paladin.Attack.ExoriGranCon      := ["ExoriGranCon"      , 8 ]
Skills.Paladin.Attack.ExoriSan          := ["ExoriSan"          , 6 ]
Skills.Paladin.Attack.ExevoMasSan       := ["ExevoMasSan"       , 4 ]
Skills.Paladin.Attack.ExoriSan          := ["ExoriSan"          , 6 ]
Skills.Paladin.Attack.Runa              := ["Runa"              , 2 ]
Skills.Druid := {Support: [], Attack: []}
Skills.Druid.Attack.ExoriFrigo          := ["ExoriFrigo"        , 2 ]
Skills.Druid.Attack.ExoriGranFrigo      := ["ExoriGranFrigo"    , 8 , "Special" ]
Skills.Druid.Attack.ExoriMaxFrigo       := ["ExoriMaxFrigo"     , 30, "Ultimate" ]
Skills.Druid.Attack.ExevoGranMasFrigo   := ["ExevoGranMasFrigo" , 40, "Focus" ]
Skills.Druid.Attack.ExoriTera           := ["ExoriTera"         , 2 ]
Skills.Druid.Attack.ExoriGranTera       := ["ExoriGranTera"     , 8 , "Special" ]
Skills.Druid.Attack.ExoriMaxTera        := ["ExoriMaxTera"      , 30, "Ultimate" ]
Skills.Druid.Attack.ExevoGranMasTera    := ["ExevoGranMasTera"  , 40, "Focus" ]
Skills.Druid.Attack.ExoriFlam           := ["ExoriFlam"         , 2 ]
Skills.Druid.Attack.ExoriVis            := ["ExoriVis"          , 2 ]
Skills.Druid.Attack.ExoriFlam           := ["ExoriFlam"         , 2 ]
Skills.Druid.Attack.ExoriMoeIco         := ["ExoriMoeIco"       , 2 ]
Skills.Druid.Attack.ExevoFrigoHur       := ["ExevoFrigoHur"     , 4 ]
Skills.Druid.Attack.ExevoGranFrigoHur   := ["ExevoGranFrigoHur" , 8 ]
Skills.Druid.Attack.ExevoTeraHur        := ["ExevoTeraHur"      , 4 ]
Skills.Druid.Attack.Runa                := ["Runa"              , 2 ]
Skills.Sorcerer := {Support: [], Attack: []}
Skills.Sorcerer.Support.ExoriMoe            := ["ExoriMoe"          , 12, "Cripple" ]
Skills.Sorcerer.Support.ExoriKor            := ["ExoriKor"          , 12, "Cripple" ]
Skills.Sorcerer.Attack.ExoriVis             := ["ExoriVis"          , 2 ]
Skills.Sorcerer.Attack.ExoriAmpVis          := ["ExoriAmpVis"       , 8 , "Special"  ]
Skills.Sorcerer.Attack.ExoriGranVis         := ["ExoriGranVis"      , 8 , "Special"  ]
Skills.Sorcerer.Attack.ExoriMaxVis          := ["ExoriMaxVis"       , 30, "Ultimate" ]
Skills.Sorcerer.Attack.ExevoGranMasVis      := ["ExevoGranMasVis"   , 40, "Focus"    ]
Skills.Sorcerer.Attack.ExoriFlam            := ["ExoriFlam"         , 2 ]
Skills.Sorcerer.Attack.ExoriGranFlam        := ["ExoriGranFlam"     , 8 , "Special"  ]
Skills.Sorcerer.Attack.ExoriMaxFlam         := ["ExoriMaxFlam"      , 30, "Ultimate" ]
Skills.Sorcerer.Attack.ExevoGranMasFlam     := ["ExevoGranMasFlam"  , 40, "Focus"    ]
Skills.Sorcerer.Attack.ExevoGranVisLux      := ["ExevoGranVisLux"   , 6 ]
Skills.Sorcerer.Attack.ExevoGranFlamHur     := ["ExevoGranFlamHur"  , 4 ]
Skills.Sorcerer.Attack.ExevoVisHur          := ["ExevoVisHur"       , 8 ]
Skills.Sorcerer.Attack.ExevoFlamHur         := ["ExevoFlamHur"      , 4 ]
Skills.Sorcerer.Attack.ExevoVisLux          := ["ExevoVisLux"       , 4 ]
Skills.Sorcerer.Attack.ExoriMort            := ["ExoriMort"         , 2 ]
Skills.Sorcerer.Attack.ExoriTera            := ["ExoriTera"         , 2 ]
Skills.Sorcerer.Attack.ExoriFrigo           := ["ExoriFrigo"        , 2 ]
Skills.Sorcerer.Attack.Runa                 := ["Runa"              , 2 ]
HkCombo1(){
if (Data.Combo == False || (Data.Combo == True && Combo != Ini.FirstCombo)){
if (Data.Combo == False){
if(Data.Conditions.ProtectionZone == 1){
Return
}
Data.Combo := !Data.Combo
}
Combo := Ini.FirstCombo
Data.ComboSave := 1
Skills.LastUsed := 1
Data.ComboName := InI.HkCombo1.3
Data.ComboRetarget := InI.HkCombo1.5
Data.ComboLoot := InI.HkCombo1.6
Return
}
if (Combo == Ini.FirstCombo){
if (Data.ComboLoot = 1){
Data.Loot := 1
Combo.LastLoot := 1
}
Data.Combo := !Data.Combo
Skills.LastUsed := 1
Return
}
}
HkCombo2(){
if (Data.Combo == False || (Data.Combo == True && Combo != Ini.SecondCombo)){
if (Data.Combo == False){
if(Data.Conditions.ProtectionZone == 1){
Return
}
Data.Combo := !Data.Combo
}
Combo := Ini.SecondCombo
Data.ComboName := InI.HkCombo2.3
Data.ComboRetarget := InI.HkCombo2.5
Data.ComboLoot := InI.HkCombo2.6
Data.ComboSave := 1
Skills.LastUsed := 1
Return
}
if (Combo == Ini.SecondCombo){
if (Data.ComboLoot = 1){
Data.Loot := 1
Combo.LastLoot := 1
}
Data.Combo := !Data.Combo
Skills.LastUsed := 1
Return
}
}
HkCombo3(){
if (Data.Combo == False || (Data.Combo == True && Combo != Ini.ThirdCombo)){
if (Data.Combo == False){
if(Data.Conditions.ProtectionZone == 1){
Return
}
Data.Combo := !Data.Combo
}
Combo := Ini.ThirdCombo
Data.ComboName := InI.HkCombo3.3
Data.ComboRetarget := InI.HkCombo3.5
Data.ComboLoot := InI.HkCombo3.6
Data.ComboSave := 1
Skills.LastUsed := 1
Return
}
if (Combo == Ini.ThirdCombo){
if (Data.ComboLoot = 1){
Data.Loot := 1
Combo.LastLoot := 1
}
Data.Combo := !Data.Combo
Skills.LastUsed := 1
Return
}
}
exaustExetaRes(){
Timer.ExetaRes := False
}
exaustExetaAmpRes(){
Timer.ExetaAmpRes := False
}
exaustExanaAmpRes(){
Timer.ExanaAmpRes := False
}
exaustUtamoTempo(){
Timer.UtamoTempo := False
}
exaustUtitoTempo(){
Timer.UtitoTempo := False
}
exaustUtitoTempoSan(){
Timer.UtitoTempoSan := False
}
EnableBlockedAttack(){
Skills.BlockedAttack := False
}
Combo(){
If (emptyBattle == False && Data.Combo == False && InI.ComboConfig.3 == 1 && AutoHunt.MonsterQuantity >= InI.ComboConfig.6 && AutoHunt.Active != 1){
Data.Combo := True
Combo := Ini[Ini.ComboConfig.4]
Data.ComboSave := 1
Skills.LastUsed := 1
switch (Ini.ComboConfig.4){
case "FirstCombo":
Data.ComboName := InI.HkCombo1.3
Data.ComboRetarget := InI.HkCombo1.5
Data.ComboLoot := InI.HkCombo1.6
case "SecondCombo":
Data.ComboName := InI.HkCombo2.3
Data.ComboRetarget := InI.HkCombo2.5
Data.ComboLoot := InI.HkCombo2.6
case "ThirdCombo":
Data.ComboName := InI.HkCombo3.3
Data.ComboRetarget := InI.HkCombo3.5
Data.ComboLoot := InI.HkCombo3.6
}
}
if (Data.Combo == True) {
if(emptyBattle == True){
if(Data.ComboLoot = 1){
if(AutoHunt.Active == 1){
if(Ini.AutoHuntGlobalLoot.2 == 1){
Data.Loot := 1
}
} else {
Data.Loot := 1
}
Combo.LastLoot := 1
}
Skills.LastUsed := 1
Data.Combo := False
} else {
If (Data.Group["Support"] != 1) {
While (Timer.exaustSupport == False && A_Index <= 3){
SkillsName   := 3 + (2 * A_Index)
SkillsHotkey := 4 + (2 * A_Index)
pos := StrSplit(Combo[SkillsName], "CD:")
ComboSkill := pos.1
If !InStr(Combo[SkillsName],"NoneCD:") {
If (ComboSkill == "ExetaRes" || ComboSkill == "ExetaAmpRes" || ComboSkill == "ExanaAmpRes" || ComboSkill == "UtamoTempo" || ComboSkill == "UtitoTempo" || ComboSkill == "UtitoTempoSan"){
If (Timer[ComboSkill] != True) {
Timer[ComboSkill] := True
If (pos.2)
exaustTime := pos.2 * 1010
Else
exaustTime := Skills[Vocation]["Support"][Combo[SkillsName]][2] * 1010
SetTimer, % "exaust" ComboSkill, % "-" exaustTime
PressKey(Combo[SkillsHotkey])
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -300
}
} Else If (Data.Skill[Combo[SkillsName]] != 1) {
PressKey(Combo[SkillsHotkey])
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -300
}
}
}
}
If (isAttacking == False && Data.ComboRetarget = 1 && Timer.ClickAttack == False) {
If (Data.ComboLoot = 1 && Combo.LastLoot = 0) {
If (AutoHunt.Active == 1){
If (Ini.AutoHuntGlobalLoot.2 == 1) {
Data.Loot := 1
}
} Else {
Data.Loot := 1
}
}
ControlClick % "x" Data.InfoMobs.1.X+WindowInfo.ClassNN.x " y"Data.InfoMobs.1.Y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
Timer.ClickAttack := True
SetTimer, exaustClickAttackDisable, -500
isAttacking := True
Combo.LastLoot := 0
}
If (Data.Group["Attack"] != 1) {
If (Skills.BlockedAttack == False && Data.Momentum[Ini.ComboConfig.4]["spell"] != "None" && Data.Skill[Data.Momentum[Ini.ComboConfig.4]["spell"]] != 1) {
PressKey(Data.Momentum[Ini.ComboConfig.4]["hotkey"])
Skills.BlockedAttack := True
SetTimer, EnableBlockedAttack, -400
} Else {
If(Skills.LastUsed > 6) {
Skills.LastUsed := 1
}
While (Skills.BlockedAttack == False && Skills.LastUsed <= 6) {
SkillsName   := 9  + (2 * Skills.LastUsed)
SkillsHotkey := 10 + (2 * Skills.LastUsed)
If (Combo[SkillsName] != "None") {
If (Data.Skill[Combo[SkillsName]] != 1) {
PressKey(Combo[SkillsHotkey])
Skills.BlockedAttack := True
SetTimer, EnableBlockedAttack, -400
}
}
Skills.LastUsed++
}
}
}
}
}
}
ValidateCombo(){
if(Ini.HkCombo1.4 != "[...]" && Ini.HkCombo1.4 != ""){
if(ValidateComboSequence("FirstCombo")){
Return 1
}
Hotkey,% Ini.HkCombo1.4,HkCombo1
Hotkey,% Ini.HkCombo1.4,On
for k, v in HotkeysConfigured {
if(Ini.HkCombo1.4 = v) {
MsgErrorHotkeyInUse("Combo 1")
Return 1
}
}
HotkeysConfigured.Push(Ini.HkCombo1.4)
}
if(Ini.HkCombo2.4 != "[...]" && Ini.HkCombo2.4 != ""){
if(ValidateComboSequence("SecondCombo")){
Return 1
}
Hotkey,% Ini.HkCombo2.4,HkCombo2
Hotkey,% Ini.HkCombo2.4,On
for k, v in HotkeysConfigured {
if(Ini.HkCombo2.4 = v) {
MsgErrorHotkeyInUse("Combo 2")
Return 1
}
}
HotkeysConfigured.Push(Ini.HkCombo2.4)
}
if(InI.HkCombo3.4 != "[...]" && InI.HkCombo3.4 != ""){
if(ValidateComboSequence("ThirdCombo")){
Return 1
}
Hotkey,% Ini.HkCombo3.4,HkCombo3
Hotkey,% Ini.HkCombo3.4,On
for k, v in HotkeysConfigured {
if(Ini.HkCombo3.4 = v) {
MsgErrorHotkeyInUse("Combo 3")
Return 1
}
}
HotkeysConfigured.Push(Ini.HkCombo3.4)
}
if(Ini.Targeting.3 && ((Ini.HkCombo1.4 != "[...]" && Ini.HkCombo1.4 != "") || (Ini.HkCombo2.4 != "[...]" && Ini.HkCombo2.4 != "") || (Ini.HkCombo3.4 != "[...]" && Ini.HkCombo3.4 != ""))) {
English    := "You have Combo and Targeting (Extras Tab) active together. Take care."
Portuguese := "Voc" Chr(234) " tem o Combo e o Targeting (Aba Extras) ativos ao mesmo tempo. Tome cuidado."
ToolTip(%GlobalLanguage%,1500,Cords.Loot.4,Cords.Loot.5)
}
}
ValidateComboSequence(ComboName){
SkillsGroup := []
ComboSequence := []
Loop, 3 {
SkillsName   := 3 + (2 * A_Index)
SkillsHotkey := 4 + (2 * A_Index)
pos := StrSplit(Ini[ComboName][SkillsName], "CD:")
ComboSequence[SkillsName] := pos.1
ComboSequence[SkillsHotkey] := Ini[ComboName][SkillsHotkey]
if (ComboSequence[SkillsName] != "None") {
if (ComboSequence[SkillsHotkey] = "[...]" || ComboSequence[SkillsHotkey] = "") {
MsgErrorHotkeyMissing(ComboSequence[SkillsName])
Return 1
}
if (!pos.2) {
MsgErrorCooldownMissing(ComboSequence[SkillsName])
Return 1
}
if (Skills[Vocation]["Support"][ComboSequence[SkillsName]][3]) {
for k, v in SkillsGroup {
if (VersionType != "OTServer"){
if (Skills[Vocation]["Support"][ComboSequence[SkillsName]][3] = v) {
if(GlobalLanguage == "English"){
MsgBox, 4112, Cooldown Group Error, % "The skill " ComboSequence[SkillsName] " shares the same group cooldown of a previous skill, please use just one of them."
} else {
MsgBox, 4112, Erro no Grupo de Cooldown, % "A skill " ComboSequence[SkillsName] " compartilha o mesmo grupo de cooldown de uma skill acima, por favor escolha apenas uma delas."
}
Return 1
}
}
}
SkillsGroup.Push(Skills[Vocation]["Support"][ComboSequence[SkillsName]][3])
}
}
}
Loop, 6 {
SkillsName   := 9 + (2 * A_Index)
SkillsHotkey := 10 + (2 * A_Index)
ComboSequence[SkillsName] := Ini[ComboName][SkillsName]
ComboSequence[SkillsHotkey] := Ini[ComboName][SkillsHotkey]
if (ComboSequence[SkillsName] != "None") {
if(ComboSequence[SkillsHotkey] = "[...]" || ComboSequence[SkillsHotkey] = ""){
MsgErrorHotkeyMissing(ComboSequence[SkillsName])
Return 1
}
If (Skills[Vocation]["Attack"][ComboSequence[SkillsName]][3]) {
for k, v in SkillsGroup {
if (VersionType != "OTServer"){
if (Skills[Vocation]["Attack"][ComboSequence[SkillsName]][3] = v) {
if (GlobalLanguage == "English") {
MsgBox, 4112, Cooldown Group Error, % "The skill " ComboSequence[SkillsName] " shares the same group cooldown of a previous skill, please use just one of them."
} else {
MsgBox, 4112, Erro no Grupo de Cooldown, % "A skill " ComboSequence[SkillsName] " compartilha o mesmo grupo de cooldown de uma skill acima, por favor escolha apenas uma delas."
}
Return 1
}
}
}
SkillsGroup.Push(Skills[Vocation]["Attack"][ComboSequence[SkillsName]][3])
}
}
}
}
CureSpells(){
If(Data.Group.Healing != 1 && Timer.UtitoTempoSan != 1){
If(Ini.CureParalyze.3 = 1 && Data.Conditions.CureParalyze = 1){
PressKey(Ini.CureParalyze.4)
} Else If(Ini.CureCurse.3 = 1 && Data.Conditions.CureCurse = 1){
PressKey(Ini.CureCurse.4)
} Else If(Ini.CurePoison.3 = 1 && Data.Conditions.CurePoison = 1){
PressKey(Ini.CurePoison.4)
}
} else if(Data.Group.Support != 1 && Timer.UtitoTempoSan != 1){
If(Ini.CureParalyze.3 = 1 && Data.Conditions.CureParalyze = 1 && Ini.CureParalyze.5 != "[...]" && Ini.CureParalyze.5 != ""){
PressKey(Ini.CureParalyze.5)
}
}
}
ValidateCure(){
if (Ini.CureParalyze.3) {
if(Ini.CureParalyze.4 = "[...]" || Ini.CureParalyze.4 = ""){
MsgErrorHotkeyMissing("Paralyze Hk 1")
Return 1
}
}
if (Ini.CureCurse.3) {
if(Ini.CureCurse.4 = "[...]" || Ini.CureCurse.4 = ""){
MsgErrorHotkeyMissing(Ini.CureCurse.1)
Return 1
}
}
if (Ini.CurePoison.3) {
if(Ini.CurePoison.4 = "[...]" || Ini.CurePoison.4 = ""){
MsgErrorHotkeyMissing(Ini.CurePoison.1)
Return 1
}
}
}
DanceHotkey(){
Data.Dance := !Data.Dance
}
Dance(){
If (Data.Dance = 1 && InI.Dance.3 = 1){
FocusClient()
SendInput {Ctrl down}
Sleep, 10
SendInput {Up}
Sleep, % InI.Dance.5
SendInput {Right}
Sleep, % InI.Dance.5
SendInput {Down}
Sleep, % InI.Dance.5
SendInput {Left}
Sleep, 10
SendInput {Ctrl up}
}
}
ValidateDance(){
if (Ini.Dance.3) {
if(Ini.Dance.4 = "[...]" || Ini.Dance.4 = ""){
MsgErrorHotkeyMissing(Ini.Dance.1)
Return 1
} else {
Hotkey,% Ini.Dance.4,DanceHotkey
Hotkey,% Ini.Dance.4,On
}
for k, v in HotkeysConfigured {
if (InI.Dance.4 = v) {
MsgErrorHotkeyInUse(Ini.Dance.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.Dance.4)
}
}
HkEnergyRing(){
If ((Vocation != "Knight" && Vocation != "Paladin") && InI.OTServer.3 != 1) {
Ini["EnergyRing"][3] := 0
IniWriteArray(InI["EnergyRing"],"EnergyRing",ProfileComb)
Hotkey,% InI["HkEnergyRing"].3,Off
Return
}
if (Ini.HkEnergyRing.3 != "[...]" && Ini.HkEnergyRing.3 != ""){
classButton["EnergyRing"].state:=!classButton["EnergyRing"].state
Ini["EnergyRing"][3] := classButton["EnergyRing"].state
IniWriteArray(InI["EnergyRing"],"EnergyRing",ProfileComb)
classButton["EnergyRing"].Draw()
} Else {
Hotkey,% InI["HkEnergyRing"].3,Off
}
}
ValidateEnergyRing(){
if (Ini.EnergyRing.3 && Ini.OldUtamoVita.3 = 1) {
if(Ini.EnergyRing.4 = "[...]" || Ini.EnergyRing.4 = ""){
MsgErrorHotkeyMissing(Ini.EnergyRing.1)
Return 1
}
if(!Ini.EnergyRing.7){
if(Ini.EnergyRing.5 = 0 || Ini.EnergyRing.5 = ""){
MsgErrorPercentageMissing("equip " Ini.EnergyRing.1 )
Return 1
}
if (Ini.EnergyRing.6 = 0 || Ini.EnergyRing.6 = "") {
MsgErrorPercentageMissing("unequip " Ini.EnergyRing.1 )
Return 1
}
if (Ini.EnergyRing.5 >= Ini.EnergyRing.6) {
MsgErrorWrongPercentageOrder("equip Energy Ring", "unequip Energy Ring")
Return 1
}
}
for k, v in HotkeysConfigured {
if (InI.EnergyRing.4 = v) {
MsgErrorHotkeyInUse(Ini.EnergyRing.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.EnergyRing.4)
}
}
EnergyRing(){
If (Ini.EnergyRing.3 = 1 && Timer.exaustRing != 1 && (Vocation == "Knight" || Vocation == "Paladin" || InI.OTServer.4 = 1)) {
If (Data.EnergyRing != 0 && Data.Conditions.ProtectionZone != 1 && (Data.HP <= Ini.EnergyRing.5 || Ini.EnergyRing.7 = 1) && Data.MP >= Ini.EnergyRing.8) {
PressKey(Ini.EnergyRing.4)
Timer.exaustRing := 1
SetTimer, exaustRingDisable, -400
Data.TryToEquip := 0
} Else If (Data.EnergyRing = 0 && Ini.EnergyRing.7 != 1 && (Data.HP >= Ini.EnergyRing.6 || Data.MP <= Ini.EnergyRing.8)) {
If (Ini.SwapRing.3 = 1 && Data.TryToEquip = 0) {
If (Data.TankRing != 0 && (Data.HP < Ini.SwapRing.6 || Ini.SwapRing.7 = 1)) {
PressKey(Ini.SwapRing.4)
Timer.exaustRing := 1
SetTimer, exaustRingDisable, -400
} Else If (Data.MainRing != 0 && Data.HP >= Ini.SwapRing.6 && Ini.SwapRing.7 != 1) {
PressKey(Ini.SwapRing.8)
Timer.exaustRing := 1
SetTimer, exaustRingDisable, -400
}
Data.TryToEquip := 1
} Else {
PressKey(Ini.EnergyRing.4)
Timer.exaustRing := 1
SetTimer, exaustRingDisable, -400
}
}
}
}
ExerciseDummy(){
If (InI.ExerciseDummy.3 == 1 && Timer.exaustDummy == False){
if(VersionType == "OTServer"){
PressKey(Ini.ExerciseDummy.4)
ControlClick % "x" Ini["ExerciseDummy"][7] " y" Ini["ExerciseDummy"][8], ahk_id %WinID%,,Left
English     := % "Dummy Training OTServer Active`nUsing the weapon every " Ini["ExerciseDummy"][9] " seconds."
Portuguese  := % "Treino com Dummy em OTServer Ativo`nUsando a weapon a cada " Ini["ExerciseDummy"][9] " segundos."
GuiControl, RunningDummy:+c00c000 , DummyGui
GuiControl, RunningDummy:, DummyGui, % %GlobalLanguage%
Timer.exaustDummy := True
SetTimer, exaustDummyDisable, % Ini["ExerciseDummy"][9] * (-1000)
} else if(VersionType == "Global"){
While (InI.ExerciseDummy.6 > 0 && Macro == 1){
PressKey(Ini.ExerciseDummy.4)
ControlClick % "x" Ini["ExerciseDummy"][7] " y" Ini["ExerciseDummy"][8], ahk_id %WinID%,,Left
InI.ExerciseDummy.6 := InI.ExerciseDummy.6 - 1
GuiControl, Training:, ExerciseDummy6, % "Qty: " InI.ExerciseDummy.6 "x"
CurrentCharges := InI.ExerciseDummy.5
While (CurrentCharges != 0 && Macro == 1){
English     := "Dummy Training Active`n`nUsing 1 of " CurrentCharges " charges.`n" InI.ExerciseDummy.6 " weapons left."
Portuguese  := "Treino com Dummy Ativo`n`nUsando 1 de " CurrentCharges " cargas.`n" InI.ExerciseDummy.6 " weapons restante."
GuiControl, RunningDummy:+c00c000 , DummyGui
GuiControl, RunningDummy:, DummyGui, % %GlobalLanguage%
if(SQTLoot.Gui.x && SQTLoot.Gui.y)
Gui, RunningDummy: Show, % "NA w250 h50 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y-120, RunningDummy
Sleep, 2001
CurrentCharges--
}
}
If (Ini.ExerciseDummy.6 == 0){
classButton["ExerciseDummy"].state := !classButton["ExerciseDummy"].state
Ini["ExerciseDummy"][3] := classButton[135].state
IniWriteArray(InI["ExerciseDummy"],"ExerciseDummy",ProfileComb)
classButton["ExerciseDummy"].Draw()
Gui, RunningDummy: Hide
}
if (Macro == 0)
Gui, RunningDummy: Destroy
}
} else if (InI.ExerciseDummy.3 == 0)
Gui, RunningDummy: Hide
}
ValidateExerciseDummy(){
if (Ini.ExerciseDummy.3) {
if(Ini.ExerciseDummy.4 = "[...]" || Ini.ExerciseDummy.4 = ""){
MsgErrorHotkeyMissing(Ini.ExerciseDummy.1)
Return 1
}
if(VersionType == "Global"){
if(Ini.ExerciseDummy.5 = 0 || Ini.ExerciseDummy.5 = ""){
MsgBox, 4112, Charge Missing, % "The checkbox for " Ini.ExerciseDummy.1 " is active but no Charge was configured." "`n`nVoc" Chr(234) " ativou o " Ini.ExerciseDummy.1 " mas nao configurou nenhum Charge."
Return 1
}
if(Ini.ExerciseDummy.6 = 0 || Ini.ExerciseDummy.6 = ""){
MsgErrorQuantity(Ini.ExerciseDummy.1)
Return 1
}
}
if(Ini.ExerciseDummy.7 = 0 || Ini.ExerciseDummy.7 = ""){
MsgErrorPositionTo(Ini.ExerciseDummy.1)
Return 1
}
if(Ini.ExerciseDummy.9 = 0 || Ini.ExerciseDummy.9 = ""){
MsgBox, 4112, Time to use again, % "The checkbox for " Ini.ExerciseDummy.1 " is active but no time to use it again was configured." "`n`nVoc" Chr(234) " ativou o " Ini.ExerciseDummy.1 " mas nao configurou o tempo para usar de novo."
Return 1
}
for k, v in HotkeysConfigured {
if (InI.ExerciseDummy.4 = v) {
MsgErrorHotkeyInUse(Ini.ExerciseDummy.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.ExerciseDummy.4)
}
}
GodFlowerHotkey(){
Data.GodFlower := !Data.GodFlower
}
GodFlower(){
If (Data.GodFlower = 1 && InI.GodFlower.3 = 1){
FocusClient()
Cor := GetColorHex(Cords.GodFlower.2+11,Cords.GodFlower.3+11)
if ( Cor = "#BC7996" || Cor = "#e8ab00" || Cor = "#e7953b" || Cor = "#f3d1e0" || Cor = "#9e3a11" || Cor = "#e8ab00"){
MouseGetPos, StartX, StartY
MouseMove, InI.GodFlower.5, InI.GodFlower.6
Sleep, 50
SendInput {LButton Down}
Sleep, 50
MouseMove, StartX, StartY
Sleep, 50
SendInput {LButton Up}
Sleep, 50
}
Data.GodFlower := 0
}
}
ValidateGodFlower(){
if (Ini.GodFlower.3) {
if(Ini.GodFlower.5 = 0 || Ini.GodFlower.5 = ""){
MsgErrorPositionFrom(Ini.GodFlower.1)
Return 1
}
if(Ini.GodFlower.4 = "[...]" || Ini.GodFlower.4 = ""){
MsgErrorHotkeyMissing(Ini.GodFlower.1)
Return 1
} else {
Hotkey,% Ini.GodFlower.4,GodFlowerHotkey
Hotkey,% Ini.GodFlower.4,On
SearchPNG(PNG.Slot, InI.GodFlower.5-36-WindowInfo.ClassNN.x, InI.GodFlower.6-36-WindowInfo.ClassNN.y,  InI.GodFlower.5+36-WindowInfo.ClassNN.x, InI.GodFlower.6+36-WindowInfo.ClassNN.y, Tole:=20, Erro, Mode:=1)
Cords.GodFlower:=Erro
}
for k, v in HotkeysConfigured {
if (InI.GodFlower.4 = v) {
MsgErrorHotkeyInUse(Ini.GodFlower.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.GodFlower.4)
}
}
HkKeepHaste(){
if (Ini.HkKeepHaste.3 != "[...]" && Ini.HkKeepHaste.3 != ""){
classButton["Haste"].state:=!classButton["Haste"].state
Ini["Haste"][3] := classButton["Haste"].state
IniWriteArray(InI["Haste"],"Haste",ProfileComb)
classButton["Haste"].Draw()
} Else {
Hotkey,% InI["HkKeepHaste"].3,Off
}
}
ValidateHaste(){
if (Ini.Haste.3) {
if(Ini.Haste.4 = "[...]" || Ini.Haste.4 = ""){
MsgErrorHotkeyMissing(Ini.Haste.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.Haste.4 = v) {
MsgErrorHotkeyInUse(Ini.Haste.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.Haste.4)
}
}
HealingSpells(){
If(Data.Group.Healing != 1 && Timer.UtitoTempoSan != 1){
If (Ini.ExuraGranSio.3 = 1 && Cords.Party.1 = 0 && Data.FriendHP != "" && Data.FriendHP <= Ini.ExuraGranSio.5 && Data.MP >= Ini.ExuraGranSio.6 && Data.Skill.ExuraGranSio != 1){
PressKey(Ini.ExuraGranSio.4)
} Else If (Ini.ExuraGranIco.3 = 1 && Data.HP <= Ini.ExuraGranIco.5 && Data.MP >= Ini.ExuraGranIco.6 && Data.Skill.ExuraGranIco != 1){
PressKey(Ini.ExuraGranIco.4)
} Else If (Ini.ExuraMaxVita.3 = 1 && Data.HP <= Ini.ExuraMaxVita.5 && Data.MP >= Ini.ExuraMaxVita.6 && Data.Skill.ExuraMaxVita != 1){
PressKey(Ini.ExuraMaxVita.4)
} Else If (Ini.FirstHealing.3 = 1 && Data.HP <= Ini.FirstHealing.5 && Data.MP >= Ini.FirstHealing.6){
PressKey(Ini.FirstHealing.4)
} Else If (Ini.ExuraSio.3 = 1 && Cords.Party.1 = 0 && Data.FriendHP != "" && Data.FriendHP <= Ini.ExuraSio.5 && Data.MP >= Ini.ExuraSio.6){
PressKey(Ini.ExuraSio.4)
} Else If (Ini.SecondHealing.3 = 1 && Data.HP <= Ini.SecondHealing.5 && Data.MP >= Ini.SecondHealing.6){
PressKey(Ini.SecondHealing.4)
} Else If (Ini.ThirdHealing.3 = 1 && Data.HP <= Ini.ThirdHealing.5 && Data.MP >= Ini.ThirdHealing.6){
PressKey(Ini.ThirdHealing.4)
} Else If (Ini.ExuraSioTwo.3 = 1 && Cords.Party.1 = 0 && Data.FriendHPTwo != "" && Data.FriendHPTwo <= Ini.ExuraSioTwo.5 && Data.MP >= Ini.ExuraSioTwo.6){
PressKey(Ini.ExuraSioTwo.4)
} Else If (Ini.UturaGran.3 = 1 && Data.HP <= Ini.UturaGran.5 && Data.Skill.UturaGran != 1){
PressKey(Ini.UturaGran.4)
} Else If (Ini.Utura.3 = 1 && Data.HP <= Ini.Utura.5 && Data.Skill.Utura != 1){
PressKey(Ini.Utura.4)
} Else If (Ini.CureParalyze.3 = 1 && Data.Conditions.CureParalyze = 1){
PressKey(Ini.CureParalyze.4)
} Else If (Ini.CureCurse.3 = 1 && Data.Conditions.CureCurse = 1){
PressKey(Ini.CureCurse.4)
} Else If (Ini.CurePoison.3 = 1 && Data.Conditions.CurePoison = 1){
PressKey(Ini.CurePoison.4)
}
} Else If (Ini.ExuraSio.3 = 1 && Ini.ExuraSio.7 = 1 && Cords.Party.1 = 0 && Data.FriendHP != "" && Data.FriendHP <= Ini.ExuraSio.5 && Data.MP >= Ini.ExuraSio.6){
If (Ini.ExuraGranSio.3 = 1 && Data.FriendHP <= Ini.ExuraGranSio.5 && Data.MP >= Ini.ExuraGranSio.6 && Data.Skill.ExuraGranSio != 1){
PressKey(Ini.ExuraGranSio.4)
Return
}
If (Ini.ExuraMaxVita.3 = 1 && Data.HP <= Ini.ExuraMaxVita.5 && Data.MP >= Ini.ExuraMaxVita.6 && Data.Skill.ExuraMaxVita != 1)
Return
if (Ini.FirstHealing.3 = 1 && Data.HP <= Ini.FirstHealing.5 && Data.MP >= Ini.FirstHealing.6)
Return
PressKey(Ini.ExuraSio.4)
}
}
ValidateHealingSpells(){
if (Ini.FirstHealing.3) {
if(Ini.FirstHealing.4 = "[...]" || Ini.FirstHealing.4 = ""){
MsgErrorHotkeyMissing(Ini.FirstHealing.1)
Return 1
}
if(Ini.FirstHealing.5 = 0 || Ini.FirstHealing.5 = ""){
MsgErrorHPPercentageMissing(Ini.FirstHealing.1)
Return 1
}
if(Ini.FirstHealing.6 = 0 || Ini.FirstHealing.6 = ""){
MsgErrorMPPercentageMissing(Ini.FirstHealing.1)
Return 1
}
}
if (Ini.SecondHealing.3) {
if(Ini.SecondHealing.4 = "[...]" || Ini.SecondHealing.4 = ""){
MsgErrorHotkeyMissing(Ini.SecondHealing.1)
Return 1
}
if(Ini.SecondHealing.5 = 0 || Ini.SecondHealing.5 = ""){
MsgErrorHPPercentageMissing(Ini.SecondHealing.1)
Return 1
}
if(Ini.SecondHealing.6 = 0 || Ini.SecondHealing.6 = ""){
MsgErrorMPPercentageMissing(Ini.SecondHealing.1)
Return 1
}
if (Ini.FirstHealing.3) {
if(Ini.SecondHealing.5 <= Ini.FirstHealing.5){
MsgErrorWrongPercentageOrder(Ini.FirstHealing.1, Ini.SecondHealing.1)
Return 1
}
}
}
if (Ini.ThirdHealing.3) {
if(Ini.ThirdHealing.4 = "[...]" || Ini.ThirdHealing.4 = ""){
MsgErrorHotkeyMissing(Ini.ThirdHealing.1)
Return 1
}
if(Ini.ThirdHealing.5 = 0 || Ini.ThirdHealing.5 = ""){
MsgErrorHPPercentageMissing(Ini.ThirdHealing.1)
Return 1
}
if(Ini.ThirdHealing.6 = 0 || Ini.ThirdHealing.6 = ""){
MsgErrorMPPercentageMissing(Ini.ThirdHealing.1)
Return 1
}
if (Ini.FirstHealing.3) {
if(Ini.ThirdHealing.5 <= Ini.FirstHealing.5){
MsgErrorWrongPercentageOrder(Ini.FirstHealing.1, Ini.ThirdHealing.1)
Return 1
}
}
if (Ini.SecondHealing.3) {
if(Ini.ThirdHealing.5 <= Ini.SecondHealing.5){
MsgErrorWrongPercentageOrder(Ini.SecondHealing.1, Ini.ThirdHealing.1)
Return 1
}
}
}
if (Ini.ExuraMaxVita.3) {
if(Ini.ExuraMaxVita.4 = "[...]" || Ini.ExuraMaxVita.4 = ""){
MsgErrorHotkeyMissing(Ini.ExuraMaxVita.1)
Return 1
}
if(Ini.ExuraMaxVita.5 = 0 || Ini.ExuraMaxVita.5 = ""){
MsgErrorHPPercentageMissing(Ini.ExuraMaxVita.1)
Return 1
}
if(Ini.ExuraMaxVita.6 = 0 || Ini.ExuraMaxVita.6 = ""){
MsgErrorMPPercentageMissing(Ini.ExuraMaxVita.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.ExuraMaxVita.4 = v) {
MsgErrorHotkeyInUse(Ini.ExuraMaxVita.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.ExuraMaxVita.4)
}
if (Ini.ExuraMaxIco.3) {
if(Ini.ExuraMaxIco.4 = "[...]" || Ini.ExuraMaxIco.4 = ""){
MsgErrorHotkeyMissing(Ini.ExuraMaxIco.1)
Return 1
}
if(Ini.ExuraMaxIco.5 = "0" || Ini.ExuraMaxIco.5 = ""){
MsgErrorHPPercentageMissing(Ini.ExuraMaxIco.1)
Return 1
}
if(Ini.ExuraMaxIco.6 = "0" || Ini.ExuraMaxIco.6 = ""){
MsgErrorMPPercentageMissing(Ini.ExuraMaxIco.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.ExuraMaxIco.4 = v) {
MsgErrorHotkeyInUse(Ini.ExuraMaxIco.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.ExuraMaxIco.4)
}
if (Ini.ExuraSio.3) {
if(Ini.ExuraSio.4 = "[...]" || Ini.ExuraSio.4 = ""){
MsgErrorHotkeyMissing(Ini.ExuraSio.1)
Return 1
}
if(Ini.ExuraSio.5 = 0 || Ini.ExuraSio.5 = ""){
MsgErrorHPPercentageMissing(Ini.ExuraSio.1)
Return 1
}
if(Ini.ExuraSio.6 = 0 || Ini.ExuraSio.6 = ""){
MsgErrorMPPercentageMissing(Ini.ExuraSio.1)
Return 1
}
if(Cords.Party.1 != 0 && Ini.HealConfig.3 = "Party List"){
MsgErrorPartyListNotOpened(Ini.ExuraSio.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.ExuraSio.4 = v) {
MsgErrorHotkeyInUse(Ini.ExuraSio.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.ExuraSio.4)
}
if (Ini.ExuraSioTwo.3) {
if(Ini.ExuraSioTwo.4 = "[...]" || Ini.ExuraSioTwo.4 = ""){
MsgErrorHotkeyMissing(Ini.ExuraSioTwo.1)
Return 1
}
if(Ini.ExuraSioTwo.5 = 0 || Ini.ExuraSioTwo.5 = ""){
MsgErrorHPPercentageMissing(Ini.ExuraSioTwo.1)
Return 1
}
if(Ini.ExuraSioTwo.6 = 0 || Ini.ExuraSioTwo.6 = ""){
MsgErrorMPPercentageMissing(Ini.ExuraSioTwo.1)
Return 1
}
if(Cords.Party.1 != 0 && Ini.HealConfig.3 = "Party List"){
MsgErrorPartyListNotOpened(Ini.ExuraSioTwo.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.ExuraSioTwo.4 = v) {
MsgErrorHotkeyInUse(Ini.ExuraSioTwo.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.ExuraSioTwo.4)
}
if (Ini.ExuraGranSio.3) {
if(Ini.ExuraGranSio.4 = "[...]" || Ini.ExuraGranSio.4 = ""){
MsgErrorHotkeyMissing(Ini.ExuraGranSio.1)
Return 1
}
if(Ini.ExuraGranSio.5 = 0 || Ini.ExuraGranSio.5 = ""){
MsgErrorHPPercentageMissing(Ini.ExuraGranSio.1)
Return 1
}
if(Ini.ExuraGranSio.6 = 0 || Ini.ExuraGranSio.6 = ""){
MsgErrorMPPercentageMissing(Ini.ExuraGranSio.1)
Return 1
}
if(Cords.Party.1 != 0 && Ini.HealConfig.3 = "Party List"){
MsgErrorPartyListNotOpened(Ini.ExuraGranSio.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.ExuraGranSio.4 = v) {
MsgErrorHotkeyInUse(Ini.ExuraGranSio.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.ExuraGranSio.4)
}
}
HotkeysOff(){
Suspend, Off
Hotkey, % Ini.Loot.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.Loot.4,Off
}
Hotkey, % Ini.Dance.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.Dance.4,Off
}
Hotkey, % Ini.MoveItems.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.MoveItems.4,Off
}
Hotkey, % Ini.MoveItemsBP.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.MoveItemsBP.4,Off
}
Hotkey, % Ini.MoveItemsMouse.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.MoveItemsMouse.4,Off
}
Hotkey, % Ini.GodFlower.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.GodFlower.4,Off
}
Hotkey, % Ini.SmartCast1.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.SmartCast1.4,Off
}
Hotkey, % Ini.SmartCast2.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.SmartCast2.4,Off
}
Hotkey, % Ini.SmartCast3.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% Ini.SmartCast3.4,Off
}
Hotkey, % InI.HkCombo1.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% InI.HkCombo1.4,Off
}
Hotkey, % InI.HkCombo2.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% InI.HkCombo2.4,Off
}
Hotkey, % InI.HkCombo3.4,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% InI.HkCombo3.4,Off
}
Hotkey, % InI.HkAutoHuntStart.3,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% InI.HkAutoHuntStart.3,Off
}
Hotkey, % InI.HkAutoHuntPause.3,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% InI.HkAutoHuntPause.3,Off
}
Hotkey, % InI.HkAutoHuntStart.7,, UseErrorLevel
If (ErrorLevel = 0) {
Hotkey,% InI.HkAutoHuntStart.7,Off
}
}
HotkeysOn(){
Suspend, Off
If (InI.HkEnergyRing.3 != "[...]" && InI.HkEnergyRing.3 != "") {
If (Vocation == "Knight" || Vocation == "Paladin" || InI.OTServer.4 = 1) {
Hotkey,% InI.HkEnergyRing.3,HkEnergyRing
Hotkey,% InI.HkEnergyRing.3,On
}
}
If (InI.HkKeepHaste.3 != "[...]" && InI.HkKeepHaste.3 != "") {
Hotkey,% InI.HkKeepHaste.3,HkKeepHaste
Hotkey,% InI.HkKeepHaste.3,On
}
If (InI.HkUtamoVita.3 != "[...]" && InI.HkUtamoVita.3 != "") {
If ((Vocation == "Sorcerer" || Vocation == "Druid") && InI.OTServer.4 != 1) {
Hotkey,% InI.HkUtamoVita.3,HkUtamoVita
Hotkey,% InI.HkUtamoVita.3,On
}
}
If (InI.HkSwapRing.3 != "[...]" && InI.HkSwapRing.3 != "") {
Hotkey,% InI.HkSwapRing.3,HkSwapRing
Hotkey,% InI.HkSwapRing.3,On
}
If (InI.HkSwapAmulet.3 != "[...]" && InI.HkSwapAmulet.3 != "") {
Hotkey,% InI.HkSwapAmulet.3,HkSwapAmulet
Hotkey,% InI.HkSwapAmulet.3,On
}
if(InI.HkStart.3 != "[...]" && InI.HkStart.3 != "") {
Hotkey,% InI.HkStart.3,Button1
Hotkey,% InI.HkStart.3,On
}
if(InI.HkPause.3 != "[...]" && InI.HkPause.3 != "") {
Hotkey,% InI.HkPause.3,Button2
Hotkey,% InI.HkPause.3,On
}
if(InI.HkFirstProfile.3 != "[...]" && InI.HkFirstProfile.3 != "") {
Hotkey,% InI.HkFirstProfile.3,FirstProfile
Hotkey,% InI.HkFirstProfile.3,On
}
if(InI.HkSecondProfile.3 != "[...]" && InI.HkSecondProfile.3 != "") {
Hotkey,% InI.HkSecondProfile.3,SecondProfile
Hotkey,% InI.HkSecondProfile.3,On
}
if(InI.HkThirdProfile.3 != "[...]" && InI.HkThirdProfile.3 != "") {
Hotkey,% InI.HkThirdProfile.3,ThirdProfile
Hotkey,% InI.HkThirdProfile.3,On
}
ValidateAutoHunt()
}
FirstProfile(){
global
Profile := InI.HkFirstProfile.4
Vocation := InI.HkFirstProfile.5
ProfileSelected := Profile
VocationSelected := Vocation
GuiControl, Main:ChooseString, ProfileSelected, % Profile
GuiControl, Main:ChooseString, VocationSelected, % Vocation
Profile()
}
SecondProfile(){
global
Profile := InI.HkSecondProfile.4
Vocation := InI.HkSecondProfile.5
ProfileSelected := Profile
VocationSelected := Vocation
GuiControl, Main:ChooseString, ProfileSelected, % Profile
GuiControl, Main:ChooseString, VocationSelected, % Vocation
Profile()
}
ThirdProfile(){
global
Profile := InI.HkThirdProfile.4
Vocation := InI.HkThirdProfile.5
ProfileSelected := Profile
VocationSelected := Vocation
GuiControl, Main:ChooseString, ProfileSelected, % Profile
GuiControl, Main:ChooseString, VocationSelected, % Vocation
Profile()
}
LootHotkey(){
Data.Loot := 1
}
GetLootTibia(){
MouseGetPos, StartX, StartY
if (VersionType == "OTServer" && Ini.Loot.6 == "1"){
PressKey(Ini.Loot.4)
} else if (WinActive("ahk_id" . WindowInfo.ID)) {
SendInput, {Shift down}
Sleep, 10
Loop, 9 {
Random, OutVarX, Round(-SQTLoot.SQT/3), Round(SQTLoot.SQT/3)
Random, OutVarY, Round(-SQTLoot.SQT/3), Round(SQTLoot.SQT/3)
If (InI.Loot.5 > 0){
MouseMove, SQTLoot[A_Index].x+WindowInfo.ClassNN.x+OutVarX, SQTLoot[A_Index].y+WindowInfo.ClassNN.y+OutVarY
Random, OutVarSleep, Round(InI.Loot.5*0.80), Round(InI.Loot.5*1.20)
DllCall("Sleep", "UInt", OutVarSleep)
}
ControlClick % "x" SQTLoot[A_Index].x+WindowInfo.ClassNN.x+OutVarX " y" SQTLoot[A_Index].y+WindowInfo.ClassNN.y+OutVarY, ahk_id %WinID%,,Right
}
SendInput, {Shift Up}
}
If (InI.Loot.5 > 0)
MouseMove, StartX, StartY
Data.Loot := 0
}
ValidateLoot(){
if (Ini.Loot.3) {
if(Ini.Loot.4 = "[...]" || Ini.Loot.4 = ""){
MsgErrorHotkeyMissing(Ini.Loot.1)
Return 1
} else {
Hotkey,% Ini.Loot.4,LootHotkey
Hotkey,% Ini.Loot.4,On
}
for k, v in HotkeysConfigured {
if (InI.Loot.4 = v) {
MsgErrorHotkeyInUse(Ini.Loot.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.Loot.4)
}
}
MoveItemsHotkey(){
Data.MoveItems := !Data.MoveItems
}
MoveItems(){
If (Data.MoveItems = 1 && InI.MoveItems.3 = 1){
While (Data.MoveItems = 1 && Macro = 1){
ControlClick % "x" InI["MoveItems"][5] " y" InI["MoveItems"][6], ahk_id %WinID%,,,, D NA
Sleep, 50
ControlClick % "x" InI["MoveItems"][7] " y" InI["MoveItems"][8], ahk_id %WinID%,,,, U NA
Sleep, 50
}
}
}
ValidateMoveItems(){
if (Ini.MoveItems.3) {
if(Ini.MoveItems.5 = 0 || Ini.MoveItems.5 = ""){
MsgErrorPositionFrom(Ini.MoveItems.1)
Return 1
}
if(Ini.MoveItems.7 = 0 || Ini.MoveItems.7 = ""){
MsgErrorPositionTo(Ini.MoveItems.1)
Return 1
}
if(Ini.MoveItems.4 = "[...]" || Ini.MoveItems.4 = ""){
MsgErrorHotkeyMissing(Ini.MoveItems.1)
Return 1
} else {
Hotkey,% Ini.MoveItems.4,MoveItemsHotkey
Hotkey,% Ini.MoveItems.4,On
}
for k, v in HotkeysConfigured {
if (InI.MoveItems.4 = v) {
MsgErrorHotkeyInUse(Ini.MoveItems.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.MoveItems.4)
}
}
MoveItemsBPHotkey(){
KeyWait, %A_ThisHotkey% , T1
If (ErrorLevel){
ToolTip, % "Choose the position.`n`nSelecione a posicao."
Sleep, 100
KeyWait, LButton, D
MouseGetPos, MouseTestx, MouseTesty
InI["MoveItemsBP"][5] := MouseTestx
InI["MoveItemsBP"][6] := MouseTesty
IniWriteArray(Ini["MoveItemsBP"],"MoveItemsBP",ProfileComb)
ToolTip
} Else {
MouseGetPos, StartX, StartY
ControlClick % "x" StartX " y" StartY, ahk_id %WinID%,,,, D NA
ControlClick % "x" InI["MoveItemsBP"][5] " y" InI["MoveItemsBP"][6], ahk_id %WinID%,,,, U NA
}
}
ValidateMoveItemsBP(){
if (Ini.MoveItemsBP.3) {
if(Ini.MoveItemsBP.5 = 0 || Ini.MoveItemsBP.5 = ""){
MsgErrorPositionFrom(Ini.MoveItemsBP.1)
Return 1
}
if(Ini.MoveItemsBP.4 = "[...]" || Ini.MoveItemsBP.4 = ""){
MsgErrorHotkeyMissing(Ini.MoveItemsBP.1)
Return 1
} else {
Hotkey,% Ini.MoveItemsBP.4,MoveItemsBPHotkey
Hotkey,% Ini.MoveItemsBP.4,On
}
for k, v in HotkeysConfigured {
if (InI.MoveItemsBP.4 = v) {
MsgErrorHotkeyInUse(Ini.MoveItemsBP.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.MoveItemsBP.4)
}
}
MoveItemsMouseHotkey(){
KeyWait, %A_ThisHotkey% , T1
If (ErrorLevel){
ToolTip, % "Choose the position.`n`nSelecione a posicao."
Sleep, 100
KeyWait, LButton, D
MouseGetPos, ItemsMouseX, ItemsMouseY
InI["MoveItemsMouse"][5] := ItemsMouseX
InI["MoveItemsMouse"][6] := ItemsMouseY
IniWriteArray(Ini["MoveItemsMouse"],"MoveItemsMouse",ProfileComb)
ToolTip
} Else {
MouseGetPos, StartX, StartY
ControlClick % "x" InI["MoveItemsMouse"][5] " y" InI["MoveItemsMouse"][6], ahk_id %WinID%,,,, D NA
ControlClick % "x" StartX " y" StartY, ahk_id %WinID%,,,, U NA
}
}
ValidateMoveItemsMouse(){
if (Ini.MoveItemsMouse.3) {
if(Ini.MoveItemsMouse.5 = 0 || Ini.MoveItemsMouse.5 = ""){
MsgErrorPositionFrom(Ini.MoveItemsMouse.1)
Return 1
}
if(Ini.MoveItemsMouse.4 = "[...]" || Ini.MoveItemsMouse.4 = ""){
MsgErrorHotkeyMissing(Ini.MoveItemsMouse.1)
Return 1
} else {
Hotkey,% Ini.MoveItemsMouse.4,MoveItemsMouseHotkey
Hotkey,% Ini.MoveItemsMouse.4,On
}
for k, v in HotkeysConfigured {
if (InI.MoveItemsMouse.4 = v) {
MsgErrorHotkeyInUse(Ini.MoveIMoveItemsMousetems.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.MoveItemsMouse.4)
}
}
SmartCast1Hotkey(){
If (InI.SmartCast1.3 == 1){
MouseGetPos, StartX, StartY
Data.MouseX := StartX, Data.MouseY := StartY
Data.SmartCast1 := True
If (InI.SmartCast1.5 == 1) {
Data.RunePriority := True
} Else {
Data.RunePriority := False
}
} Else {
PressKey(Ini.SmartCast1.4)
Data.SmartCast1 := False
}
}
SmartCast2Hotkey(){
If (InI.SmartCast2.3 == 1){
MouseGetPos, StartX, StartY
Data.MouseX := StartX, Data.MouseY := StartY
Data.SmartCast2 := True
If (InI.SmartCast2.5 == 1) {
Data.RunePriority := True
} Else {
Data.RunePriority := False
}
} Else {
PressKey(Ini.SmartCast2.4)
Data.SmartCast2 := False
}
}
SmartCast3Hotkey(){
If (InI.SmartCast3.3 == 1){
Data.SmartCast3 := True
MouseGetPos, StartX, StartY
Data.MouseX := StartX, Data.MouseY := StartY
If (InI.SmartCast3.5 == 1) {
Data.RunePriority := True
} Else {
Data.RunePriority := False
}
} Else {
PressKey(Ini.SmartCast3.4)
Data.SmartCast3 := False
}
}
SmartCast(){
If (Data.SmartCast1 = 1 && InI.SmartCast1.3 == 1 && Data.CooldownPotion != 1 && Timer.exaustPotion != 1 && BlockedFunctions != 1 && Timer.exaustPotionOT != 1){
If (Data.Group[InI.SmartCast1.6] != 1){
PressKey(Ini.SmartCast1.4)
If (InI.SmartCast1.7 == "Crosshair"){
ControlClick % "x" Data.MouseX " y" Data.MouseY, ahk_id %WinID%,,Left
Sleep, 100
}
Data.SmartCast1   := False
Data.RunePriority := False
BlockedFunctions  := True
}
}
If (Data.SmartCast2 = 1 && InI.SmartCast2.3 == 1 && Data.CooldownPotion != 1 && Timer.exaustPotion != 1 && BlockedFunctions != 1 && Timer.exaustPotionOT != 1){
If (Data.Group[InI.SmartCast2.6] != 1){
PressKey(Ini.SmartCast2.4)
If (InI.SmartCast2.7 == "Crosshair"){
ControlClick % "x" Data.MouseX " y" Data.MouseY, ahk_id %WinID%,,Left
Sleep, 100
}
Data.SmartCast2   := False
Data.RunePriority := False
BlockedFunctions  := True
}
}
If (Data.SmartCast3 = 1 && InI.SmartCast3.3 == 1 && Data.CooldownPotion != 1 && Timer.exaustPotion != 1 && BlockedFunctions != 1 && Timer.exaustPotionOT != 1){
If (Data.Group[InI.SmartCast3.6] != 1){
PressKey(Ini.SmartCast3.4)
If (InI.SmartCast3.7 == "Crosshair"){
ControlClick % "x" Data.MouseX " y" Data.MouseY, ahk_id %WinID%,,Left
Sleep, 100
}
Data.SmartCast3   := False
Data.RunePriority := False
BlockedFunctions  := True
}
}
}
ValidateSmartCast(){
if (Ini.SmartCast1.3) {
if(Ini.SmartCast1.4 = "[...]" || Ini.SmartCast1.4 = ""){
MsgErrorHotkeyMissing(Ini.SmartCast1.1)
Return 1
} else {
Hotkey,% Ini.SmartCast1.4,SmartCast1Hotkey
Hotkey,% Ini.SmartCast1.4,On
}
for k, v in HotkeysConfigured {
if (InI.SmartCast1.4 = v) {
MsgErrorHotkeyInUse(Ini.SmartCast1.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.SmartCast1.4)
}
if (Ini.SmartCast2.3) {
if(Ini.SmartCast2.4 = "[...]" || Ini.SmartCast2.4 = ""){
MsgErrorHotkeyMissing(Ini.SmartCast2.1)
Return 1
} else {
Hotkey,% Ini.SmartCast2.4,SmartCast2Hotkey
Hotkey,% Ini.SmartCast2.4,On
}
for k, v in HotkeysConfigured {
if (InI.SmartCast2.4 = v) {
MsgErrorHotkeyInUse(Ini.SmartCast2.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.SmartCast2.4)
}
if (Ini.SmartCast3.3) {
if(Ini.SmartCast3.4 = "[...]" || Ini.SmartCast3.4 = ""){
MsgErrorHotkeyMissing(Ini.SmartCast3.1)
Return 1
} else {
Hotkey,% Ini.SmartCast3.4,SmartCast3Hotkey
Hotkey,% Ini.SmartCast3.4,On
}
for k, v in HotkeysConfigured {
if (InI.SmartCast3.4 = v) {
MsgErrorHotkeyInUse(Ini.SmartCast3.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.SmartCast3.4)
}
}
HkSwapRing(){
if (Ini.HkSwapRing.3 != "[...]" && Ini.HkSwapRing.3 != ""){
classButton["SwapRing"].state:=!classButton["SwapRing"].state
Ini["SwapRing"][3] := classButton["SwapRing"].state
IniWriteArray(InI["SwapRing"],"SwapRing",ProfileComb)
classButton["SwapRing"].Draw()
} Else {
Hotkey,% InI["HkSwapRing"].3,Off
}
}
ValidateSwapRing(){
if (Ini.SwapRing.3) {
if(Ini.EnergyRing.7){
if(GlobalLanguage == "English"){
MsgBox, 4112, Energy Ring Always Equipped, % "You cannot have Energy Ring Always Equipped together with Swap Ring Enable. Choose one of them."
} else {
MsgBox, 4112, Energy Ring Sempre Equipado, % "Voc" Chr(234) " n" Chr(227) "o pode ter o Energy Ring com a op" Chr(231) Chr(227) "o Sempre Equipado e ter tamb" Chr(233) "m ativo o Swap Ring. Escolha um ou outro."
}
Return 1
}
if(Ini.SwapRing.4 = "[...]" || Ini.SwapRing.4 = ""){
MsgErrorHotkeyMissing("Tank Ring")
Return 1
}
if(!Ini.SwapRing.7){
if(Ini.SwapRing.5 = 0 || Ini.SwapRing.5 = ""){
MsgErrorPercentageMissing(Ini.SwapRing.1 " Tank Ring")
Return 1
}
if(Ini.SwapRing.8 = "[...]" || Ini.SwapRing.8 = ""){
MsgErrorHotkeyMissing("Main Ring")
Return 1
}
if(Ini.SwapRing.6 = 0 || Ini.SwapRing.6 = ""){
MsgErrorPercentageMissing(Ini.SwapRing.1 " Main Ring")
Return 1
}
if(Ini.SwapRing.5 >= Ini.SwapRing.6){
MsgErrorWrongPercentageOrder("Tank Ring", "Main Ring")
Return 1
}
}
if (Ini.EnergyRing.3) {
if(Ini.EnergyRing.5 >= Ini.SwapRing.5){
MsgErrorWrongPercentageOrder("Energy Ring", "Tank Ring")
Return 1
}
}
for k, v in HotkeysConfigured {
if (InI.SwapRing.4 = v) {
MsgErrorHotkeyInUse(Ini.SwapRing.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.SwapRing.4)
}
}
SwapRing(){
If (Ini.SwapRing.3 = 1 && Timer.exaustRing != 1){
If (Ini.EnergyRing.3 != 1 || (Ini.EnergyRing.3 = 1 && Ini.EnergyRing.7 != 1 && Data.EnergyRing != 0)){
If (Ini.SwapRing.11 != 1)
StatusTemp := Data.HP
Else
StatusTemp := Data.MP
If (Data.TankRing != 0 && ((StatusTemp <= Ini.SwapRing.5 || Ini.SwapRing.7 = 1) || (Data.TankRingOn = True && StatusTemp < Ini.SwapRing.6))){
Data.TankRingOn := True
PressKey(Ini.SwapRing.4)
Timer.exaustRing := 1
SetTimer, exaustRingDisable, -400
} Else If (StatusTemp >= Ini.SwapRing.6 && Ini.SwapRing.7 != 1 || (Data.TankRingOn = False && StatusTemp >= Ini.SwapRing.5)){
if (Ini.SwapRing.10 = "NoRing" && Data.TankRing != 0){
Return
}
if (Ini.SwapRing.10 != "NoRing" && Data.MainRing != 1){
Return
}
Data.TankRingOn := False
PressKey(Ini.SwapRing.8)
Timer.exaustRing := 1
SetTimer, exaustRingDisable, -400
}
}
}
}
HkSwapAmulet(){
if (Ini.HkSwapAmulet.3 != "[...]" && Ini.HkSwapAmulet.3 != ""){
classButton["SwapAmulet"].state:=!classButton["SwapAmulet"].state
Ini["SwapAmulet"][3] := classButton["SwapAmulet"].state
IniWriteArray(InI["SwapAmulet"],"SwapAmulet",ProfileComb)
classButton["SwapAmulet"].Draw()
} Else {
Hotkey,% InI["HkSwapAmulet"].3,Off
}
}
ValidateSwapAmulet(){
if (Ini.SwapAmulet.3) {
if(Ini.SSA.7){
if(GlobalLanguage == "English"){
MsgBox, 4112, SSA Always Equipped, % "You cannot haveSSA Always Equipped together with Swap Amulet Enable. Choose one of them."
} else {
MsgBox, 4112, SSA Sempre Equipado, % "Voc" Chr(234) " n" Chr(227) "o pode ter o SSA com a op" Chr(231) Chr(227) "o Sempre Equipado e ter tamb" Chr(233) "m ativo o Swap Amulet. Escolha um ou outro."
}
Return 1
}
if(Ini.SwapAmulet.4 = "[...]" || Ini.SwapAmulet.4 = ""){
MsgErrorHotkeyMissing("Tank Amulet")
Return 1
}
if(!Ini.SwapAmulet.7){
if(Ini.SwapAmulet.5 = 0 || Ini.SwapAmulet.5 = ""){
MsgErrorPercentageMissing(Ini.SwapAmulet.1 " Tank Amulet" )
Return 1
}
if(Ini.SwapAmulet.8 = "[...]" || Ini.SwapAmulet.8 = ""){
MsgErrorHotkeyMissing("Main Amulet")
Return 1
}
if(Ini.SwapAmulet.6 = 0 || Ini.SwapAmulet.6 = ""){
MsgErrorPercentageMissing(Ini.SwapAmulet.1 " Main Amulet" )
Return 1
}
if(Ini.SwapAmulet.5 >= Ini.SwapAmulet.6){
MsgErrorWrongPercentageOrder("Tank Amulet", "Main Amulet")
Return 1
}
}
if (Ini.SSA.3) {
if(Ini.SSA.5 >= Ini.SwapAmulet.5){
MsgErrorWrongPercentageOrder("SSA", "Tank Amulet")
Return 1
}
}
for k, v in HotkeysConfigured {
if (InI.SwapAmulet.4 = v) {
MsgErrorHotkeyInUse(Ini.SwapAmulet.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.SwapAmulet.4)
}
}
SwapAmulet(){
if (Ini.SwapAmulet.3 = 1 && Timer.exaustAmulet != 1){
If (Ini.SSA.3 != 1 || (Ini.SSA.3 = 1 && Ini.SSA.7 != 1 && Data.SSA != 0)){
If (Ini.SwapAmulet.11 != 1)
StatusTemp := Data.HP
Else
StatusTemp := Data.MP
if (Data.TankAmulet != 0 && ((StatusTemp <= Ini.SwapAmulet.5 || Ini.SwapAmulet.7 = 1) || (Data.TankAmuletOn = True && StatusTemp < Ini.SwapAmulet.6))){
PressKey(Ini.SwapAmulet.4)
Data.TankAmuletOn := True
Timer.exaustAmulet := 1
SetTimer, exaustAmuletDisable, -400
} else if ((StatusTemp >= Ini.SwapAmulet.6 && Ini.SwapAmulet.7 != 1) || (Data.TankAmuletOn = False && StatusTemp >= Ini.SwapAmulet.5)){
if (Ini.SwapAmulet.10 = "NoAmulet" && Data.TankAmulet != 0){
Return
}
if (Ini.SwapAmulet.10 != "NoAmulet" && Data.MainAmulet != 1){
Return
}
Data.TankAmuletOn := False
PressKey(Ini.SwapAmulet.8)
Timer.exaustAmulet := 1
SetTimer, exaustAmuletDisable, -400
}
}
}
}
HkSSA(){
If (Vocation != "Knight" && Vocation != "Paladin") {
Ini["SSA"][3] := 0
IniWriteArray(InI["SSA"],"SSA",ProfileComb)
Hotkey,% InI["HkSSA"].3,Off
Return
}
if (Ini.HkSSA.3 != "[...]" && Ini.HkSSA.3 != ""){
classButton["SSA"].state:=!classButton["SSA"].state
Ini["SSA"][3] := classButton["SSA"].state
IniWriteArray(InI["SSA"],"SSA",ProfileComb)
classButton["SSA"].Draw()
} Else {
Hotkey,% InI["HkSSA"].3,Off
}
}
ValidateSSA(){
if (Ini.SSA.3 = 1) {
if(Ini.SSA.4 = "[...]" || Ini.SSA.4 = ""){
MsgErrorHotkeyMissing(Ini.SSA.1)
Return 1
}
if(!Ini.SSA.7){
if(Ini.SSA.5 = 0 || Ini.SSA.5 = ""){
MsgErrorPercentageMissing("equip " Ini.SSA.1 )
Return 1
}
if(Ini.SSA.6 = 0 || Ini.SSA.6 = ""){
MsgErrorPercentageMissing("unequip " Ini.SSA.1 )
Return 1
}
if(Ini.SSA.5 >= Ini.SSA.6){
MsgErrorWrongPercentageOrder("equip SSA", "unequip SSA")
Return 1
}
}
for k, v in HotkeysConfigured {
if (InI.SSA.4 = v) {
MsgErrorHotkeyInUse(Ini.SSA.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.SSA.4)
}
}
SSA(){
If (Ini.SSA.3 = 1 && Timer.exaustAmulet != 1 && (Vocation == "Knight" || Vocation == "Paladin")){
If(Data.SSA != 0 && (Data.HP <= Ini.SSA.5 || Ini.SSA.7 = 1)){
PressKey(Ini.SSA.4)
Timer.exaustAmulet := 1
SetTimer, exaustAmuletDisable, -400
Data.TryToEquip := 0
} Else If (Data.SSA = 0 && Ini.SSA.7 != 1 && (Data.HP >= Ini.SSA.6)){
If (Ini.SwapAmulet.3 = 1 && Data.TryToEquip = 0){
If (Data.TankAmulet != 0 && (Data.HP < Ini.SwapAmulet.6 || Ini.SwapAmulet.7 = 1)){
PressKey(Ini.SwapAmulet.4)
Timer.exaustAmulet := 1
SetTimer, exaustAmuletDisable, -400
} Else If (Data.MainAmulet != 0 && Data.HP >= Ini.SwapAmulet.6 && Ini.SwapAmulet.7 != 1){
PressKey(Ini.SwapAmulet.8)
Timer.exaustAmulet := 1
SetTimer, exaustAmuletDisable, -400
}
Data.TryToEquip := 1
} Else {
PressKey(Ini.SSA.4)
Timer.exaustAmulet := 1
SetTimer, exaustAmuletDisable, -400
}
}
}
}
EnableTargeting(){
SetTimer, EnableTargeting, Off
Timer.Targeting := True
}
Targeting(){
If (InI.Targeting.3 == 1 && emptyBattle == False && Cords.BattleListDefault.1 == 0 && (Timer.Targeting = True || isAttacking == False)){
If (InI.Targeting.5 != "Disabled" && Data.InfoMobs.1.Target != 1){
ControlClick % "x" Data.InfoMobs.1.X+WindowInfo.ClassNN.x " y" Data.InfoMobs.1.Y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
ControlClick % "x" Cords.BattleListDefault.2 " y" Cords.BattleListDefault.3, ahk_id %WinID%,,,, U NA
isAttacking := True
Timer.Targeting := False
SetTimer, EnableTargeting, % "-" InI.Targeting.5 * 1000
} Else If (InI.Targeting.6 != "Disabled"){
if (isAttacking = true){
For Mob, Info in Data.InfoMobs {
If (Info.HP <= InI.Targeting.6 && Info.Target = 1){
ControlSend, , {ESC}, % "ahk_id" . WindowInfo.ID
For Mob, Info in Data.InfoMobs {
If (Info.HP >= 100 && Info.Target = 0){
ControlClick % "x" Info.X+WindowInfo.ClassNN.x " y" Info.Y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
ControlClick % "x" Cords.BattleListDefault.2 " y" Cords.BattleListDefault.3, ahk_id %WinID%,,,, U NA
isAttacking := True
Timer.Targeting := False
SetTimer, EnableTargeting, -600
Break 2
}
}
}
}
} Else {
For Mob, Info in Data.InfoMobs {
If (Info.HP >= 100 && Info.Target = 0){
ControlClick % "x" Info.X+WindowInfo.ClassNN.x " y" Info.Y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
ControlClick % "x" Cords.BattleListDefault.2 " y" Cords.BattleListDefault.3, ahk_id %WinID%,,,, U NA
isAttacking := True
Timer.Targeting := False
SetTimer, EnableTargeting, -600
Break
}
}
}
} Else If (isAttacking = False){
ControlClick % "x" Data.InfoMobs.1.X+WindowInfo.ClassNN.x " y" Data.InfoMobs.1.Y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
ControlClick % "x" Cords.BattleListDefault.2 " y" Cords.BattleListDefault.3, ahk_id %WinID%,,,, U NA
isAttacking := True
Timer.Targeting := False
SetTimer, EnableTargeting, -600
}
}
}
TimedSpell1(){
Timer.TimedSpell1 := False
}
TimedSpell2(){
Timer.TimedSpell2 := False
}
TimedSpell3(){
Timer.TimedSpell3 := False
}
TimedSpell(){
If (InI.TimedSpell1.3 == 1 && Timer.TimedSpell1 = False && BlockedFunctions != 1){
If (InI.TimedSpell1.6 = "None" || Data.Group[InI.TimedSpell1.6] != 1){
PressKey(Ini.TimedSpell1.4)
Timer.TimedSpell1 := True
SetTimer, TimedSpell1, % "-" InI.TimedSpell1.5 * 1050
BlockedFunctions := True
}
}
If (InI.TimedSpell2.3 == 1 && Timer.TimedSpell2 = False && BlockedFunctions != 1){
If (InI.TimedSpell2.6 = "None" || Data.Group[InI.TimedSpell2.6] != 1){
PressKey(Ini.TimedSpell2.4)
Timer.TimedSpell2 := True
SetTimer, TimedSpell2, % "-" InI.TimedSpell2.5 * 1050
BlockedFunctions := True
}
}
If (InI.TimedSpell3.3 == 1 && Timer.TimedSpell3 = False && BlockedFunctions != 1){
If (InI.TimedSpell3.6 = "None" || Data.Group[InI.TimedSpell3.6] != 1){
PressKey(Ini.TimedSpell3.4)
Timer.TimedSpell3 := True
SetTimer, TimedSpell3, % "-" InI.TimedSpell3.5 * 1050
BlockedFunctions := True
}
}
}
ValidateTimedSpell(){
if (Ini.TimedSpell1.3) {
if(Ini.TimedSpell1.4 = "[...]" || Ini.TimedSpell1.4 = ""){
MsgErrorHotkeyMissing(Ini.TimedSpell1.1)
Return 1
}
if(Ini.TimedSpell1.5 = 0 || Ini.TimedSpell1.5 = ""){
MsgErrorSecondsMissing(Ini.TimedSpell1.1)
Return 1
}
}
if (Ini.TimedSpell2.3) {
if(Ini.TimedSpell2.4 = "[...]" || Ini.TimedSpell2.4 = ""){
MsgErrorHotkeyMissing(Ini.TimedSpell2.1)
Return 1
}
if(Ini.TimedSpell2.5 = 0 || Ini.TimedSpell2.5 = ""){
MsgErrorSecondsMissing(Ini.TimedSpell2.1)
Return 1
}
}
if (Ini.TimedSpell3.3) {
if(Ini.TimedSpell3.4 = "[...]" || Ini.TimedSpell3.4 = ""){
MsgErrorHotkeyMissing(Ini.TimedSpell3.1)
Return 1
}
if(Ini.TimedSpell3.5 = 0 || Ini.TimedSpell3.5 = ""){
MsgErrorSecondsMissing(Ini.TimedSpell3.1)
Return 1
}
}
}
TakeFromFloorOff(){
Timer.TakeFromFloor := False
}
TakeFromFloor() {
If (InI.TakeFromFloor.3 == 1 && Timer.TakeFromFloor = False && BlockedFunctions != 1){
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,,, D NA
ControlClick % "x" InI["TakeFromFloor"][5] " y" InI["TakeFromFloor"][6], ahk_id %WinID%,,,, U NA
Timer.TakeFromFloor := True
SetTimer, TakeFromFloorOff, % "-" InI.TakeFromFloor.4 * 1050
BlockedFunctions := True
}
}
ValidateTakeFromFloor() {
if (Ini.TakeFromFloor.3) {
if(Ini.TakeFromFloor.4 = 0 || Ini.TakeFromFloor.4 = ""){
MsgErrorSecondsMissing(Ini.TakeFromFloor.1)
Return 1
}
if(Ini.TakeFromFloor.5 = 0 || Ini.TakeFromFloor.5 = ""){
MsgErrorPositionTo(Ini.TakeFromFloor.1)
Return 1
}
}
}
HkUtamoVita(){
If ((Vocation != "Sorcerer" && Vocation != "Druid") || InI.OTServer.4 = 1) {
Ini["UtamoVita"][3] := 0
IniWriteArray(InI["UtamoVita"],"UtamoVita",ProfileComb)
Hotkey,% InI["HkUtamoVita"].3,Off
Return
}
if (Ini.HkUtamoVita.3 != "[...]" && Ini.HkUtamoVita.3 != ""){
classButton["UtamoVita"].state:=!classButton["UtamoVita"].state
Ini["UtamoVita"][3] := classButton["UtamoVita"].state
IniWriteArray(InI["UtamoVita"],"UtamoVita",ProfileComb)
classButton["UtamoVita"].Draw()
} Else {
Hotkey,% InI["HkUtamoVita"].3,Off
}
}
ValidaOldUtamoVita(){
if (Ini.OldUtamoVita.3) {
if(Ini.OldUtamoVita.4 = "[...]" || Ini.OldUtamoVita.4 = ""){
MsgErrorHotkeyMissing(Ini.OldUtamoVita.1)
Return 1
}
if(!Ini.OldUtamoVita.7){
if(Ini.OldUtamoVita.5 = 0 || Ini.OldUtamoVita.5 = ""){
MsgErrorHPPercentageMissing(Ini.OldUtamoVita.1)
Return 1
}
if(Ini.OldUtamoVita.6 = 0 || Ini.OldUtamoVita.6 = ""){
MsgErrorMPPercentageMissing(Ini.OldUtamoVita.1)
Return 1
}
}
for k, v in HotkeysConfigured {
if (InI.OldUtamoVita.4 = v) {
MsgErrorHotkeyInUse(Ini.OldUtamoVita.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.OldUtamoVita.4)
}
}
OldUtamoVita(){
If (Ini.OldUtamoVita.3 = 1 && InI.OTServer.4 = 1 && Timer.exaustSupport != 1 && Data.Conditions.EnergyRing != 1 && Data.Conditions.ProtectionZone != 1){
If ((Data.HP <= Ini.OldUtamoVita.5 && Data.MP >= Ini.OldUtamoVita.6) || Ini.OldUtamoVita.7){
PressKey(Ini.OldUtamoVita.4)
Timer.exaustSupport := 1
SetTimer, exaustSupportDisable, -300
}
}
}
ValidaNewutamoVita(){
if (Ini.UtamoVita.3) {
if(Ini.UtamoVita.4 = "[...]" || Ini.UtamoVita.4 = ""){
MsgErrorHotkeyMissing(Ini.UtamoVita.1)
Return 1
}
if(Ini.UtamoVita.9 == "Use Utamo on configured HP"){
if(Ini.UtamoVita.5 = 0 || Ini.UtamoVita.5 = ""){
MsgErrorHPPercentageMissing(Ini.UtamoVita.1)
Return 1
}
if(Ini.UtamoVita.6 = 0 || Ini.UtamoVita.6 = ""){
MsgErrorMPPercentageMissing(Ini.UtamoVita.1)
Return 1
}
if(Ini.UtamoVita.7 != 0 && Ini.UtamoVita.7 != ""){
if(Ini.UtamoVita.8 = "[...]" || Ini.UtamoVita.8 = ""){
MsgErrorHotkeyMissing("Break Utamo Vita")
Return 1
} else {
for k, v in HotkeysConfigured {
if (InI.UtamoVita.8 = v) {
MsgErrorHotkeyInUse(Ini.UtamoVita.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.UtamoVita.8)
}
}
}
if(Ini.UtamoVita.10){
if(Ini.UtamoVita.11 = "[...]" || Ini.UtamoVita.11 = ""){
MsgErrorHotkeyMissing("Mana Shield Potion")
Return 1
} else {
for k, v in HotkeysConfigured {
if (InI.UtamoVita.11 = v) {
MsgErrorHotkeyInUse(Ini.UtamoVita.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.UtamoVita.11)
}
}
for k, v in HotkeysConfigured {
if (InI.UtamoVita.4 = v) {
MsgErrorHotkeyInUse(Ini.UtamoVita.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.UtamoVita.4)
}
}
NewUtamoVita(){
if(Data.Conditions.EnergyRing == 1){
Data.Conditions.UtamoVita := 1
}
If (Ini.UtamoVita.3 = 1 && Data.Conditions.ProtectionZone != 1 && (Vocation = "Sorcerer" || Vocation = "Druid") && InI.OTServer.4 != 1){
switch (Ini.UtamoVita.9){
case "Use Utamo on configured HP":
If (Data.HP <= Ini.UtamoVita.5 && Data.MP >= Ini.UtamoVita.6 && Data.Conditions.UtamoVita != 1){
If (Data.Skill.MagicShield = 1 && Ini.UtamoVita.10 = 1 && Timer.exaustMagicShield != 1){
PressKey(Ini.UtamoVita.11)
Timer.exaustMagicShield := True
SetTimer, exaustMagicShieldDisable, -400
} Else If (Data.Skill.MagicShield != 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1){
PressKey(Ini.UtamoVita.4)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -300
}
} Else If ((Ini.UtamoVita.7 != 0 && Ini.UtamoVita.7 != "") && Data.Conditions.UtamoVita = 1 && Data.HP >= Ini.UtamoVita.7 && Data.Group.Support != 1 && Timer.exaustSupport != 1 && Data.Skill.MagicShield != 1){
PressKey(Ini.UtamoVita.8)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -300
}
case "Always Renew after expire":
If (Data.Conditions.UtamoVita != 1){
If (Data.Skill.MagicShield = 1 && Ini.UtamoVita.10 = 1 && Timer.exaustMagicShield != 1){
PressKey(Ini.UtamoVita.11)
Timer.exaustMagicShield := True
SetTimer, exaustMagicShieldDisable, -400
} Else If (Data.Skill.MagicShield != 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1){
PressKey(Ini.UtamoVita.4)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -300
}
}
case "Always Renew after cooldown":
If (Data.Conditions.UtamoVita != 1){
If (Data.Skill.MagicShield = 1 && Ini.UtamoVita.10 = 1 && Timer.exaustMagicShield != 1){
PressKey(Ini.UtamoVita.11)
Timer.exaustMagicShield := True
SetTimer, exaustMagicShieldDisable, -400
} Else If (Data.Skill.MagicShield != 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1){
PressKey(Ini.UtamoVita.4)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -300
}
} else if (Data.Skill.MagicShield != 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1){
PressKey(Ini.UtamoVita.4)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -300
}
}
}
}
TimersUtamoOption(){
global
Gui, submit, nohide
switch (UtamoOption){
case "Usar utamo na vida indicada":
temp := "Use Utamo on configured HP"
case "Renovar sempre que expirar":
temp := "Always Renew after expire"
case "Renovar sempre que tiver cooldown":
temp := "Always Renew after cooldown"
default:
temp := UtamoOption
}
if(temp != "Use Utamo on configured HP"){
GuiControl, Config:Disable , Percet1
GuiControl, Config:Disable , Percet2
GuiControl, Config:Disable , Percet3
GuiControl, Config:Disable , New_Hotkey2
} else {
GuiControl, Config:Enable , Percet1
GuiControl, Config:Enable , Percet2
GuiControl, Config:Enable , Percet3
GuiControl, Config:Enable , New_Hotkey2
}
InI.UtamoVita.9 := temp
IniWriteArray(Ini.UtamoVita,"UtamoVita",ProfileComb)
}
exaustPotionDisable(){
Timer.exaustPotion := False
}
exaustPotionOT(){
Timer.exaustPotionOT := False
}
UH_Potions(){
If(Data.CooldownPotion != 1 && Timer.exaustPotion != 1 && Data.RunePriority != 1){
If (Ini.FirstHealthPotion.3 = 1 && Data.HP <= Ini.FirstHealthPotion.5 && Data.FirstHealthPotion = 1){
PressKey(Ini.FirstHealthPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
} Else If (Ini.FirstManaPotion.3 = 1 && Data.MP <= Ini.FirstManaPotion.5 && Data.FirstManaPotion = 1){
PressKey(Ini.FirstManaPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
} Else If (Ini.SecondHealthPotion.3 = 1 && Data.HP <= Ini.SecondHealthPotion.5 && Data.SecondHealthPotion = 1){
PressKey(Ini.SecondHealthPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
} Else If (Ini.SecondManaPotion.3 = 1 && Data.MP <= Ini.SecondManaPotion.5 && Data.SecondManaPotion = 1){
PressKey(Ini.SecondManaPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
} Else If (Ini.ThirdHealthPotion.3 = 1 && Data.HP <= Ini.ThirdHealthPotion.5 && Data.ThirdHealthPotion = 1){
PressKey(Ini.ThirdHealthPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
} Else If (Ini.ThirdManaPotion.3 = 1 && Data.MP <= Ini.ThirdManaPotion.5 && Data.ThirdManaPotion = 1) {
PressKey(Ini.ThirdManaPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
} Else If (Ini.FourthHealthPotion.3 = 1 && Data.HP <= Ini.FourthHealthPotion.5 && Data.FourthHealthPotion = 1) {
PressKey(Ini.FourthHealthPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
} Else If (Ini.FourthManaPotion.3 = 1 && Data.MP <= Ini.FourthManaPotion.5 && Data.FourthManaPotion = 1) {
PressKey(Ini.FourthManaPotion.4)
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
}
If (InI.OTServer.3 = 1 && Timer.exaustPotion = 1){
Timer.exaustPotionOT := 1
SetTimer, exaustPotionOT, -1100
}
}
If(Data.CooldownPotion != 1 && Timer.exaustPotion != 1){
If (Ini.UHRune.3 = 1 && Cords.Party.1 = 0 && Data.Conditions.ProtectionZone != 1 && Data.FriendHP && Data.Skill.UHRune != 1 && Data.FriendHP <= Ini.UHRune.5){
if (GetColorHex(Cords.Party.2+129, Cords.Party.3+2) = "#2C2C2C")
Filtro := 26
Else
Filtro := 0
PressKey(Ini.UHRune.4)
ControlClick % "x" Cords.Party.2+40+WindowInfo.ClassNN.x " y" Cords.Party.3+20+Filtro+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
ControlClick % "x" Cords.Party.2 " y" Cords.Party.3, ahk_id %WinID%,,,, U NA
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
}
}
If(Data.CooldownPotion != 1 && Timer.exaustPotion != 1){
If (Ini.UHRuneTwo.3 = 1 && Cords.Party.1 = 0 && Data.Conditions.ProtectionZone != 1 && Data.FriendHPTwo && Data.Skill.UHRune != 1 && Data.FriendHPTwo <= Ini.UHRuneTwo.5){
if (GetColorHex(Cords.Party.2+129, Cords.Party.3+2) = "#2C2C2C")
Filtro := 26
Else
Filtro := 0
PressKey(Ini.UHRuneTwo.4)
ControlClick % "x" Cords.Party.2+40+WindowInfo.ClassNN.x " y" Cords.Party.3+20+26+Filtro+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
ControlClick % "x" Cords.Party.2 " y" Cords.Party.3, ahk_id %WinID%,,,, U NA
Timer.exaustPotion := 1
SetTimer, exaustPotionDisable, -400
}
}
}
ValidateUH_Potions(){
if (Ini.FirstHealthPotion.3) {
if(Ini.FirstHealthPotion.4 = "[...]" || Ini.FirstHealthPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.FirstHealthPotion.1)
Return 1
}
if(Ini.FirstHealthPotion.5 = 0 || Ini.FirstHealthPotion.5 = ""){
MsgErrorPercentageMissing(Ini.FirstHealthPotion.1)
Return 1
}
}
if (Ini.SecondHealthPotion.3) {
if(Ini.SecondHealthPotion.4 = "[...]" || Ini.SecondHealthPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.SecondHealthPotion.1)
Return 1
}
if(Ini.SecondHealthPotion.5 = 0 || Ini.SecondHealthPotion.5 = ""){
MsgErrorPercentageMissing(Ini.SecondHealthPotion.1)
Return 1
}
if (Ini.FirstHealthPotion.3) {
if(Ini.SecondHealthPotion.5 <= Ini.FirstHealthPotion.5){
MsgErrorWrongPercentageOrder(Ini.FirstHealthPotion.1, Ini.SecondHealthPotion.1)
Return 1
}
}
}
if (Ini.ThirdHealthPotion.3) {
if(Ini.ThirdHealthPotion.4 = "[...]" || Ini.ThirdHealthPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.ThirdHealthPotion.1)
Return 1
}
if(Ini.ThirdHealthPotion.5 = 0 || Ini.ThirdHealthPotion.5 = ""){
MsgErrorPercentageMissing(Ini.ThirdHealthPotion.1)
Return 1
}
if (Ini.FirstHealthPotion.3) {
if(Ini.ThirdHealthPotion.5 <= Ini.FirstHealthPotion.5){
MsgErrorWrongPercentageOrder(Ini.FirstHealthPotion.1, Ini.ThirdHealthPotion.1)
Return 1
}
}
if (Ini.SecondHealthPotion.3) {
if(Ini.ThirdHealthPotion.5 <= Ini.SecondHealthPotion.5){
MsgErrorWrongPercentageOrder(Ini.SecondHealthPotion.1, Ini.ThirdHealthPotion.1)
Return 1
}
}
}
if (Ini.FourthHealthPotion.3) {
if(Ini.FourthHealthPotion.4 = "[...]" || Ini.FourthHealthPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.FourthHealthPotion.1)
Return 1
}
if(Ini.FourthHealthPotion.5 = 0 || Ini.FourthHealthPotion.5 = ""){
MsgErrorPercentageMissing(Ini.FourthHealthPotion.1)
Return 1
}
if (Ini.FirstHealthPotion.3) {
if(Ini.FourthHealthPotion.5 <= Ini.FirstHealthPotion.5){
MsgErrorWrongPercentageOrder(Ini.FirstHealthPotion.1, Ini.FourthHealthPotion.1)
Return 1
}
}
if (Ini.SecondHealthPotion.3) {
if(Ini.FourthHealthPotion.5 <= Ini.SecondHealthPotion.5){
MsgErrorWrongPercentageOrder(Ini.SecondHealthPotion.1, Ini.FourthHealthPotion.1)
Return 1
}
}
if (Ini.ThirdHealthPotion.3) {
if(Ini.FourthHealthPotion.5 <= Ini.ThirdHealthPotion.5){
MsgErrorWrongPercentageOrder(Ini.ThirdHealthPotion.1, Ini.FourthHealthPotion.1)
Return 1
}
}
}
if (Ini.FirstManaPotion.3) {
if(Ini.FirstManaPotion.4 = "[...]" || Ini.FirstManaPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.FirstManaPotion.1)
Return 1
}
if(Ini.FirstManaPotion.5 = 0 || Ini.FirstManaPotion.5 = ""){
MsgErrorPercentageMissing(Ini.FirstManaPotion.1)
Return 1
}
}
if (Ini.SecondManaPotion.3) {
if(Ini.SecondManaPotion.4 = "[...]" || Ini.SecondManaPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.SecondManaPotion.1)
Return 1
}
if(Ini.SecondManaPotion.5 = 0 || Ini.SecondManaPotion.5 = ""){
MsgErrorPercentageMissing(Ini.SecondManaPotion.1)
Return 1
}
if (Ini.FirstManaPotion.3) {
if(Ini.SecondManaPotion.5 <= Ini.FirstManaPotion.5){
MsgErrorWrongPercentageOrder(Ini.FirstManaPotion.1, Ini.SecondManaPotion.1)
Return 1
}
}
}
if (Ini.ThirdManaPotion.3) {
if(Ini.ThirdManaPotion.4 = "[...]" || Ini.ThirdManaPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.ThirdManaPotion.1)
Return 1
}
if(Ini.ThirdManaPotion.5 = 0 || Ini.ThirdManaPotion.5 = ""){
MsgErrorPercentageMissing(Ini.ThirdManaPotion.1)
Return 1
}
if (Ini.FirstManaPotion.3) {
if(Ini.ThirdManaPotion.5 <= Ini.FirstManaPotion.5){
MsgErrorWrongPercentageOrder(Ini.FirstManaPotion.1, Ini.ThirdManaPotion.1)
Return 1
}
}
if (Ini.SecondManaPotion.3) {
if(Ini.ThirdManaPotion.5 <= Ini.SecondManaPotion.5){
MsgErrorWrongPercentageOrder(Ini.SecondManaPotion.1, Ini.ThirdManaPotion.1)
Return 1
}
}
}
if (Ini.FourthManaPotion.3) {
if(Ini.FourthManaPotion.4 = "[...]" || Ini.FourthManaPotion.4 = ""){
MsgErrorHotkeyMissing(Ini.FourthManaPotion.1)
Return 1
}
if(Ini.FourthManaPotion.5 = 0 || Ini.FourthManaPotion.5 = ""){
MsgErrorPercentageMissing(Ini.FourthManaPotion.1)
Return 1
}
if (Ini.FirstManaPotion.3) {
if(Ini.FourthManaPotion.5 <= Ini.FirstManaPotion.5){
MsgErrorWrongPercentageOrder(Ini.FirstManaPotion.1, Ini.FourthManaPotion.1)
Return 1
}
}
if (Ini.SecondManaPotion.3) {
if(Ini.FourthManaPotion.5 <= Ini.SecondManaPotion.5){
MsgErrorWrongPercentageOrder(Ini.SecondManaPotion.1, Ini.FourthManaPotion.1)
Return 1
}
}
if (Ini.ThirdManaPotion.3) {
if(Ini.FourthManaPotion.5 <= Ini.ThirdManaPotion.5){
MsgErrorWrongPercentageOrder(Ini.ThirdManaPotion.1, Ini.FourthManaPotion.1)
Return 1
}
}
}
if (Ini.UHRune.3) {
if(Ini.UHRune.4 = "[...]" || Ini.UHRune.4 = ""){
MsgErrorHotkeyMissing(Ini.UHRune.1)
Return 1
}
if(Ini.UHRune.5 = 0 || Ini.UHRune.5 = ""){
MsgErrorPercentageMissing(Ini.UHRune.1)
Return 1
}
if(Cords.Party.1 != 0 && Ini.HealConfig.3 == "Party List"){
MsgErrorPartyListNotOpened(Ini.UHRune.1)
Return 1
}
for k, v in HotkeysConfigured {
if (InI.UHRune.4 = v) {
MsgErrorHotkeyInUse(Ini.UHRune.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.UHRune.4)
}
if (Ini.UHRuneTwo.3) {
if(Ini.UHRuneTwo.4 = "[...]" || Ini.UHRuneTwo.4 == ""){
MsgErrorHotkeyMissing(Ini.UHRuneTwo.1)
Return 1
}
if(Ini.UHRuneTwo.5 = 0 || Ini.UHRuneTwo.5 == ""){
MsgErrorPercentageMissing(Ini.UHRuneTwo.1)
Return 1
}
if(Cords.Party.1 != 0 && Ini.HealConfig.3 == "Party List"){
MsgErrorPartyListNotOpened(Ini.UHRuneTwo.1)
Return 1
}
if (Ini.UHRune.3 != 1) {
for k, v in HotkeysConfigured {
if (InI.UHRuneTwo.4 = v) {
MsgErrorHotkeyInUse(Ini.UHRuneTwo.1)
Return 1
}
}
HotkeysConfigured.Push(Ini.UHRuneTwo.4)
}
}
}
PotionConfig(){
For index, element in ini {
If (element[2] = "Potions" && element[3] = 1 && element[9]){
Cords.PotCooldown := index
If (PNG.HP[element[9]])
SearchPNG(PNG.HP[element[9]] , Cords.SkillBar.2, Cords.SkillBar.3, Cords.SkillBarEnd.2, Cords.SkillBarEnd.3+80, Tole:=20, Erro, Mode:=1)
else
SearchPNG(PNG.MP[element[9]] , Cords.SkillBar.2, Cords.SkillBar.3, Cords.SkillBarEnd.2, Cords.SkillBarEnd.3+80, Tole:=20, Erro, Mode:=1)
Cords[index]:=Erro
Cords[index][5]:= GetColorHex(Cords[index].2+17, Cords[index].3+2)
Cords[index][4]:= Cords[index].3 - Cords.SkillBar.3
xOcrMini := Round(( Erro.2 - Cords.SkillBar.2 - 18 ) / 36) * 36 + 46
yOcrMini := Round(( Erro.3 - Cords.SkillBar.3 - 13) / 36) * 36 + 25
Cords.Potions[index] := [element[9], xOcrMini, yOcrMini]
If (Erro.1) {
MsgPotionEnded(CheckPotion, index)
}
Data[index] := 1
} Else If (element[2] = "Potions" && element[3] = 0 && element[9])
Cords[index]:="", Data[index] := 0
}
return 0
}
PotionRead(){
CheckCooldown := GetColorHex(Cords.Potions[Cords.PotCooldown].2-12 + Cords.SkillBar.2, Cords.Potions[Cords.PotCooldown].3-6 + Cords.SkillBar.3)
If (CheckCooldown != "#dfdfdf" && CheckCooldown){
Data.CooldownPotion := 0
For index, element in ini {
if (element[2] = "Potions" && element[3] = 1 && element[9]){
CheckPotion := GetColorHex(Cords[index].2+17, Cords.SkillBar.3+2 + Cords[index][4])
If ( CheckPotion != Cords[index].5 ) {
If (CheckPotion != "#363636"){
If (PNG.HP[element[9]])
SearchPNG(PNG.HP[element[9]] , Cords.SkillBar.2, Cords.SkillBar.3, Cords.SkillBarEnd.2, Cords.SkillBarEnd.3+80, Tole:=20, Erro, Mode:=1)
Else
SearchPNG(PNG.MP[element[9]] , Cords.SkillBar.2, Cords.SkillBar.3, Cords.SkillBarEnd.2, Cords.SkillBarEnd.3+80, Tole:=20, Erro, Mode:=1)
If (!Erro.1){
Cords[index]:=Erro
, Cords[index][5]:= GetColorHex(Cords[index].2+17, Cords[index].3+2)
, Cords[index][4]:= Cords[index].3 - Cords.SkillBar.3
, Data[index] := 1
, xOcrMini := Round(( Erro.2 - Cords.SkillBar.2 - 18) / 36) * 36 + 46
, yOcrMini := Round(( Erro.3 - Cords.SkillBar.3 - 13) / 36) * 36 + 25
, Cords.Potions[index] := [element[9], xOcrMini, yOcrMini]
}
} Else {
MsgPotionEnded(CheckPotion, index)
}
} Else If (!Cords[index].5) {
MsgPotionEnded(CheckPotion, index)
}
}
}
} else
Data.CooldownPotion := 1
}
MsgPotionEnded(CheckPotion, index) {
Data[index] := 0, Cords[index].5 := CheckPotion
English     := % "The " . Cords.Potions[index].1 . " has ended. Please buy more."
Portuguese  := % "A " . Cords.Potions[index].1 . " terminou. Por favor compre mais."
ToolTip(%GlobalLanguage%,1000,Cords.Loot.4,Cords.Loot.5)
Data.PotionConfig:=1
}
OCRPotions(){
Data.OCRPotions := []
OCR := "Nulo"
For Key, Value in Cords.Potions {
Foundx := Cords.Potions[Key].2 + Cords.SkillBar.2
Foundy := Cords.Potions[Key].3 + Cords.SkillBar.3
OCR := ""
loop, 4 {
Loop, 10 {
Index := 10-A_Index
SearchPNG(PNG.MiniOCR[Index], Foundx, Foundy, Foundx+4, Foundy+6, Tole:=20, Found, Mode:=1)
if (Found.1 = 0){
OCR := Index OCR
Break 1
}
if else (Found.1 = 1 && Index = 0)
Break 2
}
Foundx -=  6
}
Data.OCRPotions[Value.1] := OCR
}
if(OCR = "Nulo"){
Data.OCRPotions := "Nulo"
}
}
PartyWindow(){
Filtro := GetColorHex(Cords.Party.2+129, Cords.Party.3+2) = "#2C2C2C" ? 26 : 0
if (GetColorHex(Cords.Party.2+20, Cords.Party.3+26+Filtro) != "#000000"){
Data.FriendHP := ""
return
}
lifeColor := GetColorHex(Cords.Party.2+144, Cords.Party.3+28+Filtro), i := 137, Data.FriendHP := 100
loop, 19 {
if (lifeColor = "#00C000" || lifeColor = "#60c060" || lifeColor = "#c0c000" || lifeColor = "#c03030" || lifeColor = "#c00000" || lifeColor = "#600000")
Break
Else if (lifeColor = "#707070"){
lifeColor := GetColorHex(Cords.Party.2+21, Cords.Party.3+28+Filtro)
if (lifeColor = "#707070"){
Data.FriendHP := ""
return
} Else
Data.FriendHP -= 5
}
Else
Data.FriendHP -= 5
lifeColor := GetColorHex(Cords.Party.2+Ceil(i), Cords.Party.3+28+Filtro), i -= 6.5
}
If (Data.FriendHP != "" && (Data.FriendHP <= Ini.ExuraSio.5 && Ini.ExuraSio.3 = 1 || Data.FriendHP <= Ini.ExuraGranSio.5 && Ini.ExuraGranSio.3 = 1 || Data.FriendHP <= Ini.UHRune.5 && Ini.UHRune.3 = 1)){
i:=22
loop, 15 {
NameColor := GetColorHex(Cords.Party.2+i, Cords.Party.3+22+Filtro), i++
switch NameColor {
case "#c0c0c0":
return
case "#808080":
Data.FriendHP := ""
return
case "#f7f7f7":
MouseGetPos, StartX, StartY
MouseMove, StartX, StartY-35
Data.FriendHP := ""
return
}
}
}
return
}
PartyWindow2(){
Filtro := GetColorHex(Cords.Party.2+129, Cords.Party.3+2) = "#2C2C2C" ? 26 : 0
if (GetColorHex(Cords.Party.2+20, Cords.Party.3+26+26+Filtro) != "#000000"){
Data.FriendHPTwo := ""
return
}
lifeColor := GetColorHex(Cords.Party.2+144, Cords.Party.3+28+26+Filtro), i := 137, Data.FriendHPTwo := 100
loop, 19 {
if (lifeColor = "#00C000" || lifeColor = "#60c060" || lifeColor = "#c0c000" || lifeColor = "#c03030" || lifeColor = "#c00000" || lifeColor = "#600000")
Break
Else if (lifeColor = "#707070"){
lifeColor := GetColorHex(Cords.Party.2+21, Cords.Party.3+28+Filtro)
if (lifeColor = "#707070"){
Data.FriendHPTwo := ""
return
} Else
Data.FriendHPTwo -= 5
}
Else
Data.FriendHPTwo -= 5
lifeColor := GetColorHex(Cords.Party.2+Ceil(i), Cords.Party.3+28+26+Filtro), i -= 6.5
}
If (Data.FriendHPTwo != "" && (Data.FriendHPTwo <= Ini.ExuraSioTwo.5 && Ini.ExuraSioTwo.3 = 1 || Data.FriendHPTwo <= Ini.UHRuneTwo.5 && Ini.UHRuneTwo.3 = 1)){
i:=22
loop, 15 {
NameColor := GetColorHex(Cords.Party.2+i, Cords.Party.3+22+26+Filtro), i++
switch NameColor {
case "#c0c0c0":
return
case "#808080":
Data.FriendHPTwo := ""
return
case "#f7f7f7":
MouseGetPos, StartX, StartY
MouseMove, StartX, StartY-35-26
Data.FriendHPTwo := ""
return
}
}
}
return
}
BattleWindow(){
Filtro := GetColorHex(Cords.Battle.2+129, Cords.Battle.3+2) = "#2C2C2C" ? 48 : 0
if (GetColorHex(Cords.Battle.2+20, Cords.Battle.3+26+Filtro) != "#000000"){
Data.FriendHP := ""
return
}
lifeColor := GetColorHex(Cords.Battle.2+144, Cords.Battle.3+28+Filtro), i := 137, Data.FriendHP := 100
loop, 19 {
if (lifeColor = "#00C000" || lifeColor = "#60c060" || lifeColor = "#c0c000" || lifeColor = "#c03030" || lifeColor = "#c00000" || lifeColor = "#600000")
Break
Else if (lifeColor = "#707070"){
lifeColor := GetColorHex(Cords.Battle.2+21, Cords.Battle.3+28+Filtro)
if (lifeColor = "#707070"){
Data.FriendHP := ""
return
} Else
Data.FriendHP -= 5
}
Else
Data.FriendHP -= 5
lifeColor := GetColorHex(Cords.Battle.2+Ceil(i), Cords.Battle.3+28+Filtro), i -= 6.5
}
ToolTip(Data.FriendHP,1000,Cords.Loot.4,Cords.Loot.5)
return
}
BattleWindow2(){
Filtro := GetColorHex(Cords.Battle.2+129, Cords.Battle.3+2) = "#2C2C2C" ? 48 : 0
if (GetColorHex(Cords.Battle.2+20, Cords.Battle.3+26+26+Filtro) != "#000000"){
Data.FriendHP := ""
return
}
lifeColor := GetColorHex(Cords.Battle.2+144, Cords.Battle.3+28+26+Filtro), i := 137, Data.FriendHPTwo := 100
loop, 19 {
if (lifeColor = "#00C000" || lifeColor = "#60c060" || lifeColor = "#c0c000" || lifeColor = "#c03030" || lifeColor = "#c00000" || lifeColor = "#600000")
Break
Else if (lifeColor = "#707070"){
lifeColor := GetColorHex(Cords.Battle.2+21, Cords.Battle.3+28+Filtro)
if (lifeColor = "#707070"){
Data.FriendHPTwo := ""
return
} Else
Data.FriendHPTwo -= 5
}
Else
Data.FriendHPTwo -= 5
lifeColor := GetColorHex(Cords.Battle.2+Ceil(i), Cords.Battle.3+28+26+Filtro), i -= 6.5
}
ToolTip(Data.FriendHPTwo,1000,Cords.Loot.4,Cords.Loot.5)
return
}
BattleList(){
If (GetColorHex(Cords.BattleListExtra.2+9, Cords.BattleListExtra.3+9) != "#80c154")
SearchPNG(PNG.BattleListExtra, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1, 1), Cords.BattleListExtra:=Erro
}
BattlePlayerDetect(){
Filtro := GetColorHex(Cords.BattleListExtra.2+131, Cords.BattleListExtra.3+4) = "#2C2C2C" ? 48 : 0
Data.PlayerOnScreen := GetColorHex(Cords.BattleListExtra.2+23, Cords.BattleListExtra.3+28+Filtro) = "#000000" ? 1 : 0
If (Data.PlayerOnScreen == True && Timer.WaitingPrint != True){
SoundBeep
Gdip_SaveBitmapToFile(NewBitmap , "Hora " A_Hour "-" A_Min ".JPG", 50)
Timer.WaitingPrint := True
SetTimer, WaitingPrint, -60005
}
}
LootCords(){
i:=0
loop, 500 {
Diver := GetColorDiff(Cords.Loot.2-i, Cords.Loot.3, CorRGB:={R:23,G:23,B:23})
i+=6
If (Diver > 10)
Break 1
}
i-=3
Cords.Loot.4:=Cords.Loot.2-i+3+WindowInfo.ClassNN.x
, Cords.Loot.5:=Cords.Loot.3+WindowInfo.ClassNN.y
, xx:=Cords.Loot.2-i
, yy:=Cords.Loot.3
, SQTnRound  := (i+220)/15
, SQTx := Round(SQTnRound*7-SQTnRound/2+xx)
, SQTy := Round(SQTnRound*5-SQTnRound/2+yy)
, SQT  := Round((i+220)/15)
, SQT2x:= Round((i+220)/15*2)
, SQTLoot.AFK := {x:SQTx+SQT+WindowInfo.ClassNN.x , y:SQTy+SQT+WindowInfo.ClassNN.y}
, SQTLoot.1 := {x:SQTx      , y:SQTy}
, SQTLoot.8 := {x:SQTx+SQT  , y:SQTy}
, SQTLoot.7 := {x:SQTx+SQT2x, y:SQTy}
, SQTLoot.2 := {x:SQTx      , y:SQTy+SQT}
, SQTLoot.9 := {x:SQTx+SQT  , y:SQTy+SQT}
, SQTLoot.6 := {x:SQTx+SQT2x, y:SQTy+SQT}
, SQTLoot.3 := {x:SQTx      , y:SQTy+SQT2x}
, SQTLoot.4 := {x:SQTx+SQT  , y:SQTy+SQT2x}
, SQTLoot.5 := {x:SQTx+SQT2x, y:SQTy+SQT2x}
, SQTLoot.SQT := SQT
, SQTLoot.Gui := {x:SQTLoot.9.x-25+WindowInfo.ClassNN.x+WindowInfo.Window.x, y:SQTLoot.9.y-10+WindowInfo.ClassNN.Y+WindowInfo.Window.y+SQTLoot.SQT*5}
return
}
CooldownSkills(){
If (GetColorHex(Cords.SkillBar.2+3 , Cords.CooldownDiv.3+1) = "#EF5406")
Data.Group["Attack"]:=1
Else
Data.Group["Attack"]:=0
If (GetColorHex(Cords.SkillBar.2+28, Cords.CooldownDiv.3+1) = "#97ADC3")
Data.Group["Healing"]:=1
Else
Data.Group["Healing"]:=0
If (GetColorHex(Cords.SkillBar.2+53, Cords.CooldownDiv.3+1) = "#5DE1DE")
Data.Group["Support"]:=1
Else
Data.Group["Support"]:=0
xSkill :=  Cords.CooldownDiv.2+17, CDSkills:=[]
loop, 10 {
Color := GetColorDecimal(xSkill,  Cords.CooldownDiv.3+9)
Temp  := GetColorHex(xSkill,  Cords.CooldownDiv.3+9)
for SkillName, SkillCor in ArColor.Cooldown {
if (CDSkills[A_Index] != A_Index)
if (Color = SkillCor){
Color := GetColorDecimal(xSkill+5,  Cords.CooldownDiv.3+9+5)
if (Color = ArColor.CooldownV[SkillName]){
Data.Skill[SkillName] := 1
CDSkills[A_Index] := A_Index
Break 1
} else
Data.Skill[SkillName] := 0
}   else
Data.Skill[SkillName] := 0
}
xSkill +=  25
}
}
FindClientScreen(){
if(Macro = 1){
English := "Pause the Macro before changing Client"
Portuguese := "Pause o Macro antes de trocar de Client"
MsgBox, 4112, Macro is On, % %GlobalLanguage%
return
}
GuiName:= "FindClient"
Gui %GuiName%:+LastFoundExist
if WinExist(){
Gui, %GuiName%:Show, w490
} else {
Gui, %GuiName%: default
Gui, %GuiName%: -Caption +LastFound +AlwaysOnTop -0x20000
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, cFFFFFF
Gui, %GuiName%:Font, bold, Tahoma
Gui, %GuiName%:Add, Picture, x0 y0 +BackgroundTrans , % "HBITMAP:*" PNG.TopBarra
Gui, %GuiName%:Add, Picture, x144 y0, % "HBITMAP:*" PNG.TopBarra470
Gui, %GuiName%:Add, Picture, x3 y3 +BackgroundTrans , % "HBITMAP:*" PNG.16x16Logo
classButton.Push(New IMG_Button(490-28 , 0 , 28 , 22 , PNG.XClose , PNG.HXClose , GuiName , "FindClientGuiClose"))
English := "Choose the Client"
Portuguese := "Escolha o Client"
Gui, %GuiName%:Add, Text, x0 y4 w490 Center +BackgroundTrans, % %GlobalLanguage%
English := "Click the button to load the processes opened:"
Portuguese := "Clique no bot" Chr(227) "o para listar os processos abertos:"
Gui, %GuiName%:Add, Text, x10 y40 +BackgroundTrans, % %GlobalLanguage%
English := "Refresh List"
Portuguese := "Atualizar Lista"
classButton.Push(New Button_Type_1( 330 , 35 , w := 150 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "FindClient", Roundness:=3 ) )
Gui, %GuiName%:Add, ListView, x10 y+10 w470 h300 -LV0x10 NoSortHdr Count30 NoSort -Multi gActionsListView, Title Name|Process
FindClient()
English := "Select the Client you want and click Configure:"
Portuguese := "Selecione o Client que deseja e click em Configurar:"
Gui, %GuiName%:Add, Text, x10 y+10 +BackgroundTrans, % %GlobalLanguage%
English := "Select"
Portuguese := "Selecionar"
classButton.Push(New Button_Type_1( 330 , 374 , w := 150 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "ActionsListView", Roundness:=3 ) )
Gui, %GuiName%:Show, w490
}
}
FindClient(){
WTSEnumProcesses()
LV_Delete()
ImageListID := IL_Create(arrLIST.MaxIndex())
LV_SetImageList(ImageListID)
loop % arrLIST.MaxIndex(){
i := A_Index
IL_Add(ImageListID, arrLIST[i, "File"])
LV_Add("Icon" . i , arrLIST[i, "Title"], arrLIST[i, "Process"])
}
LV_ModifyCol(1, 235)
LV_ModifyCol(2,"AutoHdr")
}
ActionsListView(){
Gui, FindClient:Submit, NoHide
RowNumber := LV_GetNext("F")
if(RowNumber = 0){
English := "Select the Client you want and click Select."
Portuguese := "Selecione o Client que deseja e click em Selecionar."
MsgBox, 4112, "Error", % %GlobalLanguage%
} else {
LV_GetText(WindowTitle,RowNumber , 1)
English := "Client selected", WindowTitle
Portuguese := "Cliente selecionado", WindowTitle
NewName := StrSplit(WindowTitle, "-")
If (NewName.2)
NewName := Trim(NewName.2)
Else
NewName := WindowTitle
GuiControl, Main:, WindowTitle, %NewName%
WinID := ""
FindProcessesID := arrLIST[RowNumber]["ID"]
FindClientGuiClose()
}
}
FindClientGuiClose(){
Gui, FindClient:Hide
}
WTSEnumProcesses(){
local Index := 0, tPtr := 0, pPtr := 0, nTTL := 0, LIST := ""
if !(DllCall("Wtsapi32\WTSEnumerateProcesses", "Ptr", 0, "Int", 0, "Int", 1, "PtrP", pPtr, "PtrP", nTTL))
return "", DllCall("SetLastError", "Int", -1)
tPtr := pPtr
arrLIST := []
loop % (nTTL){
wPID := NumGet(tPtr + 4, "UInt")
wID := WinExist("ahk_PID " wPID)
If (wID != "0x0"){
WinGetClass, wClass
If (InStr(wClass, "Qt5QWindow") = 1){
Index++
WinGetTitle, Title, ahk_pid %wPID%
arrLIST[Index, "File"] := GetModuleFileNameEx( wPID )
arrLIST[Index, "Process"] := StrGet(NumGet(tPtr + 8))
arrLIST[Index, "PID"] := wPID
arrLIST[Index, "ID"] := wID
arrLIST[Index, "Class"] := wClass
arrLIST[Index, "Title"] := Title
}
}
tPtr += (A_PtrSize = 4 ? 16 : 24)
}
DllCall("Wtsapi32\WTSFreeMemory", "Ptr", pPtr)
return arrLIST, DllCall("SetLastError", "UInt", nTTL)
}
GetModuleFileNameEx( p_pid ){
if A_OSVersion in WIN_95,WIN_98,WIN_ME
{
MsgBox, This Windows version (%A_OSVersion%) is not supported.
return
}
h_process := DllCall( "OpenProcess", "uint", 0x10|0x400, "int", false, "uint", p_pid )
if ( ErrorLevel or h_process = 0 )
return
name_size = 255
VarSetCapacity( name, name_size )
If A_IsUnicode
result := DllCall( "psapi.dll\GetModuleFileNameExW", "uint", h_process, "uint", 0, "str" , name, "uint", name_size )
Else
result := DllCall( "psapi.dll\GetModuleFileNameExA", "uint", h_process, "uint", 0, "str" , name, "uint", name_size )
DllCall( "CloseHandle", h_process )
return, name
}
CreateAutoHuntScreen(){
global
GuiName:= "AutoHuntGui"
classButton.Push(New Button_Type_1( 390  , 72 , w := 90 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := "Auto Hunt" , Font := "Arial" , Font_Size := 13 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , "Main", Label := "ShowAutoHuntScreen", Roundness:=3 ))
Gui, %GuiName%:New, -caption +HwndMHAutoHuntGui -DPIScale
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
Gui, %GuiName%:Add, Picture, x0  y0, % "HBITMAP:*" PNG.32x32Logo
Gui, %GuiName%:Add, Picture, x144  y0, % "HBITMAP:*" PNG.TopBarra470
Gui, %GuiName%:Add, Picture, x344  y0, % "HBITMAP:*" PNG.TopBarra470
classButton.Push(New IMG_Button(790-28 , 0 , 28 , 22 , PNG.XClose    , PNG.HXClose    , GuiName , "AutoHuntGuiClose"))
if(VersionType == "OTServer"){
English    := "Auto Hunt Configuration"
Portuguese := "Configura" Chr(231) Chr(227) "o do Auto Hunt"
Gui, %GuiName%:Add, Text, x0 y4 w790 cWhite Center +BackgroundTrans, % %GlobalLanguage%
} else {
English    := "Auto Hunt Configuration - License Time: "
Portuguese := "Configura" Chr(231) Chr(227) "o do Auto Hunt - Tempo da Licen" Chr(231) "a: "
Gui, %GuiName%:Add, Text, x260 y4 cWhite +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, Text, x+5 +BackgroundTrans vTimeAHRemaining, % " 000d 00h 00m"
}
classButton.AHStart := New Button_Type_1( 40 , 5  , w := 95 , h := 30 , Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "Start" , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "EnableAutoHunt" , Roundness:=2, Name := "AHStart" )
cx:=10, cy:=45,
English    := "Configuring Steps"
Portuguese := "Configurando os Passos"
New Group_Box(cx, cy, 770, 40, GuiName, %GlobalLanguage%)
English    := "Select an action:"
Portuguese := "Selecione uma op" Chr(231) Chr(227) "o:"
Gui, %GuiName%:Add, Text, % "x20 y" cy + 33 " +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+20 y75 w230 vStepAction gConfigureStep choose1, % "Click Map|Change Floor|Drop Vials|Go To Step|Left Click|Logout|Right Click|Rotate Char|Use Hotkey|Validate Ammo|Validate Potions|Walk|Wait X Seconds"
English    := "Step description: "
Portuguese := "Descri" Chr(231) Chr(227) "o do passo:"
Gui, %GuiName%:Add, Text, % "x+20 y" cy + 33 " +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 y75 w140 -E0x200 +Border cE6E6E6 vStepDescription",
classButton.Push(New Button_Type_1( 480 , 35 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := "Save"  , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "SaveFile", Roundness:=3 ) )
classButton.Push(New Button_Type_1( 580 , 35 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := "Load"  , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "LoadFile", Roundness:=3 ) )
classButton.Push(New Button_Type_1( 680 , 35 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := "Reset" , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "ResetFile", Roundness:=3 ) )
classButton.AHAdd := New Button_Type_1( 675 , 75 , w := 90 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "Add"   , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "AddStep", Roundness:=3, Name := "AHAdd"  )
cx:=10, cy:=300
English    := "Steps Configured"
Portuguese := "Passos Configurados"
New Group_Box(cx, cy, 770, 460, GuiName, %GlobalLanguage%)
English     := "Current Step:"
Portuguese  := "Step Atual:"
Gui, %GuiName%:Add, Text, % "x" cx + 540 " yp w100 Right +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 yp w40 h17 -E0x200 +Border cE6E6E6 gChangeStep vChangeStepId", % "1"
classButton.Push(New Button_Type_1( 707 , cy - 2 , w := 70 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "Reset Step"     , Font := "Arial" , Font_Size := 10 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "ResetStep", Roundness:=3 ) )
English    := "Id|Description|Action|Position|Attack|Combo|Wait|Monsters"
Portuguese := "Id|Descri" Chr(231) Chr(227) "o|A" Chr(231) Chr(227) "o|Posi" Chr(231) Chr(227) "o|Ataque|Combo|Espera|Monstros"
Gui, %GuiName%:Add, ListView, % "x20 y" 30 + cy " r24 w700 +Grid -LV0x10 NoSortHdr NoSort Count150 -Multi", % %GlobalLanguage%
LV_ModifyCol(1, 40)
LV_ModifyCol(2, 120)
LV_ModifyCol(3, 180)
LV_ModifyCol(4, 55)
LV_ModifyCol(5, 55)
LV_ModifyCol(6, 100)
LV_ModifyCol(7, 50)
LV_ModifyCol(8, 70)
classButton.Push(New Button_Type_1( 725 , cy + 30  , w := 50 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "Up"     , Font := "Arial" , Font_Size := 10 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "MoveStepUp", Roundness:=3 ) )
classButton.Push(New Button_Type_1( 725 , cy + 60  , w := 50 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "Down"   , Font := "Arial" , Font_Size := 10 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "MoveStepDown", Roundness:=3 ) )
classButton.Push(New Button_Type_1( 725 , cy + 90  , w := 50 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "Edit"   , Font := "Arial" , Font_Size := 10 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "EditStep", Roundness:=3 ) )
classButton.Push(New Button_Type_1( 725 , cy + 120 , w := 50 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "Delete" , Font := "Arial" , Font_Size := 10 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "DeleteStep", Roundness:=3 ) )
classButton.Push(New IMG_Button(790-56 , 0 , 28 , 22 , PNG.ConfigTop , PNG.ConfigHTop , GuiName , "OpenAutoHuntConfigurationScreen"))
GuiName := "ClickMapMark"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
cx:=5, cy:=0
New Group_Box(cx, cy, 475, 85, GuiName, "")
English    := "Choose your Mini Map Mark to walk to (Minimap Zoom Max -1):"
Portuguese := "Escolha a marca do Mini Mapa que voc" Chr(234) " quer andar (Minimap Zoom Max -1):"
Gui, %GuiName%:Add, Text, % "x10 y8 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "x20  y30 +BackgroundTrans", % "HBITMAP:*" PNG.Mark1
Loop, 9 {
Gui, %GuiName%:Add, Picture, % "x+35 y30 +BackgroundTrans", % "HBITMAP:*" PNG["Mark" A_Index + 1]
}
Gui, %GuiName%:Add, Picture, % "x20  y70 +BackgroundTrans", % "HBITMAP:*" PNG.Mark11
Loop, 9 {
Gui, %GuiName%:Add, Picture, % "x+35 y70 +BackgroundTrans", % "HBITMAP:*" PNG["Mark" A_Index + 11]
}
Gui, %GuiName%:Add, Radio, x18 y45 vSelectedMark Checked, 1
Gui, %GuiName%:Add, Radio, x+16 y45, 2
Gui, %GuiName%:Add, Radio, x+16 y45, 3
Gui, %GuiName%:Add, Radio, x+16 y45, 4
Gui, %GuiName%:Add, Radio, x+16 y45, 5
Gui, %GuiName%:Add, Radio, x+16 y45, 6
Gui, %GuiName%:Add, Radio, x+16 y45, 7
Gui, %GuiName%:Add, Radio, x+16 y45, 8
Gui, %GuiName%:Add, Radio, x+16 y45, 9
Gui, %GuiName%:Add, Radio, x+16 y45, 10
Gui, %GuiName%:Add, Radio, x18  y85, 11
Gui, %GuiName%:Add, Radio, x+9  y85, 12
Gui, %GuiName%:Add, Radio, x+9  y85, 13
Gui, %GuiName%:Add, Radio, x+9  y85, 14
Gui, %GuiName%:Add, Radio, x+9  y85, 15
Gui, %GuiName%:Add, Radio, x+9  y85, 16
Gui, %GuiName%:Add, Radio, x+9  y85, 17
Gui, %GuiName%:Add, Radio, x+9  y85, 18
Gui, %GuiName%:Add, Radio, x+9  y85, 19
Gui, %GuiName%:Add, Radio, x+9  y85, 20
English    := "Position:"
Portuguese := "Posi" Chr(231) Chr(227) "o"
Gui, %GuiName%:Add, Text, x500 y20 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w80 vClickPosition choose2, % "Exact|Near"
English    := "Exact = Reach the center of the mark"
Portuguese := "Exact = Chega at" Chr(233) " o centro da marca"
Gui, %GuiName%:Add, Text, xp-50 y+5 +BackgroundTrans cWhite, % %GlobalLanguage%
English    := "Near = Reach around the mark"
Portuguese := "Near = Chega pr" Chr(243) "ximo da marca"
Gui, %GuiName%:Add, Text, xp y+5 +BackgroundTrans cWhite, % %GlobalLanguage%
English    := "After reaching the mark, wait for:"
Portuguese := "Quando chegar na marca, esperar por:"
Gui, %GuiName%:Add, Text, x10 y+30 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w50 vClickWaiting choose1, % "0|1|2|3|4|5"
English    := "seconds before going to next step"
Portuguese := "segundos antes de ir para o pr" Chr(243) "ximo passo"
Gui, %GuiName%:Add, Text, x+5 +BackgroundTrans, % %GlobalLanguage%
English    := "Go to Next step if less than"
Portuguese := "Ir para o pr" Chr(243) "ximo passo se houver menos de"
Gui, %GuiName%:Add, Text, x10 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w50 vClickMonsterQuantity choose1, % "1|2|3|4"
English    := "monsters on battle"
Portuguese := "monstros no battle"
Gui, %GuiName%:Add, Text, x+5 +BackgroundTrans, % %GlobalLanguage%
English    := "Attack Mode (None / Walk / Box)"
Portuguese := "Modo de Ataque (None / Walk / Box)"
Gui, %GuiName%:Add, Text, x10 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w120 gAutoHuntEnableCombo vClickAttack choose3, % "None|Walk|Box"
English    := "Use Combo?"
Portuguese := "Usar Combo?"
Gui, %GuiName%:Add, Text, x+10 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w120 vClickAttackCombo choose2, % "No|FirstCombo|SecondCombo|ThirdCombo"
GuiName := "ChangeFloor"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
cx:=5, cy:=0
New Group_Box(cx, cy, 475, 85, GuiName, "")
English    := "Select the Mini Map Mark that changes the floor (Minimap Zoom Max -1):"
Portuguese := "Selecione a Marca no Mini Mapa que muda o andar (Minimap Zoom Max -1):"
Gui, %GuiName%:Add, Text, % "x10 y8 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "x20  y30 +BackgroundTrans", % "HBITMAP:*" PNG.Mark1
Loop, 9 {
Gui, %GuiName%:Add, Picture, % "x+35 y30 +BackgroundTrans", % "HBITMAP:*" PNG["Mark" A_Index + 1]
}
Gui, %GuiName%:Add, Picture, % "x20  y70 +BackgroundTrans", % "HBITMAP:*" PNG.Mark11
Loop, 9 {
Gui, %GuiName%:Add, Picture, % "x+35 y70 +BackgroundTrans", % "HBITMAP:*" PNG["Mark" A_Index + 11]
}
Gui, %GuiName%:Add, Radio, x18 y45 vFindMark Checked, 1
Gui, %GuiName%:Add, Radio, x+16 y45, 2
Gui, %GuiName%:Add, Radio, x+16 y45, 3
Gui, %GuiName%:Add, Radio, x+16 y45, 4
Gui, %GuiName%:Add, Radio, x+16 y45, 5
Gui, %GuiName%:Add, Radio, x+16 y45, 6
Gui, %GuiName%:Add, Radio, x+16 y45, 7
Gui, %GuiName%:Add, Radio, x+16 y45, 8
Gui, %GuiName%:Add, Radio, x+16 y45, 9
Gui, %GuiName%:Add, Radio, x+16 y45, 10
Gui, %GuiName%:Add, Radio, x18  y85, 11
Gui, %GuiName%:Add, Radio, x+9  y85, 12
Gui, %GuiName%:Add, Radio, x+9  y85, 13
Gui, %GuiName%:Add, Radio, x+9  y85, 14
Gui, %GuiName%:Add, Radio, x+9  y85, 15
Gui, %GuiName%:Add, Radio, x+9  y85, 16
Gui, %GuiName%:Add, Radio, x+9  y85, 17
Gui, %GuiName%:Add, Radio, x+9  y85, 18
Gui, %GuiName%:Add, Radio, x+9  y85, 19
Gui, %GuiName%:Add, Radio, x+9  y85, 20
English    := "Change Floor Type:"
Portuguese := "Tipo da Mudan" Chr(231) "a de Andar:"
Gui, %GuiName%:Add, Text, x540 y20 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x540 y+5 w100 gChangeFloorType vChangeFloorPosition choose1, % "Just Walk|Right Click|Use Shovel|Use Rope|Exani Hur"
English    := "Hotkey Shovel/Rope/Exani Hur:"
Portuguese := "Hotkey Shovel/Rope/Exani Hur:"
Gui, %GuiName%:Add, Text, x540 y+5 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%: Add, Hotkey, x540 y+5 w100 Disabled vChangeFloorHotkeyToUse,
English    := "Which side to rotate:"
Portuguese := "Qual lado para rotacionar:"
Gui, %GuiName%:Add, Text, x540 y+5 +BackgroundTrans, % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x540 y+5 w70 Disabled vChangeFloorRotateDirection choose1, % "Up|Down|Left|Right"
English    := "Just Walk = Will just walk to the Mark (Stairs, Role, etc)"
Portuguese := "Just Walk = Vai apenas andar  at" Chr(233) " a Marca (Escadas, buracos, etc)"
Gui, %GuiName%:Add, Text, x10 y120 +BackgroundTrans cWhite, % %GlobalLanguage%
English    := "Right Click = Will walk to the Mark and Right Click (Wooden Stais, etc)"
Portuguese := "Right Click = Vai andar  at" Chr(233) " a Marca e Clicar com o Bot" Chr(227) "o Direito (Escadas de Madeira, etc)"
Gui, %GuiName%:Add, Text, x10 y135 +BackgroundTrans cWhite, % %GlobalLanguage%
English    := "Use Shovel / Use Rope = Will walk to the Mark, press Hotkey and click your char"
Portuguese := "Use Shovel / Use Rope = Vai andar  at" Chr(233) " a Marca, apertar a Hotkey e clicar no seu char"
Gui, %GuiName%:Add, Text, x10 y150 +BackgroundTrans cWhite, % %GlobalLanguage%
English    := "Exani Hur = Will walk to the Mark, rotate and press Exani Hur Up/Down Hotkey"
Portuguese := "Exani Hur = Vai andar  at" Chr(233) " a Marca, rotacionar o char e apertar a Hotkey do Exani Hur Up/Down"
Gui, %GuiName%:Add, Text, x10 y165 +BackgroundTrans cWhite, % %GlobalLanguage%
GuiName := "DropVials"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Add this step to drop empty vials."
Portuguese := "Adicione este passo para dropar vials vazios."
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
English    := "Only drops Medium/Great/Ultimate and Supreme vials."
Portuguese := "Dropa apenas Medium/Great/Ultimate e Supreme vials."
Gui, %GuiName%:Add, Text, % "x5 y+15 +BackgroundTrans", % %GlobalLanguage%
GuiName := "GoToStep"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Go To Step:"
Portuguese := "Ir para o Passo:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 w140 h17 -E0x200 +Border cE6E6E6 gValidatePotionsLimit vGoToStepId", % "1"
GuiName := "LeftClick"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose the SQM you want to Left Click:"
Portuguese := "Escolha o SQM que voc" Chr(234) " quer clicar com o Bot" Chr(227) "o Esquerdo:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w70 vLeftClickSQM choose1, % "Up|Down|Left|Right|Center"
GuiName := "Logout"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose how you want to Logout:"
Portuguese := "Escolha como voc" Chr(234) " quer Deslogar:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w150 vValidateLogout choose1", % "After Battle|Close Client|Play Beep"
English    := "After Battle: means it will wait the battle dissapear before logout."
Portuguese := "After Battle: significa que vai esperar o battle sumir antes de deslogar."
Gui, %GuiName%:Add, Text, % "x5 y+10 cWhite +BackgroundTrans", % %GlobalLanguage%
English    := "Close Client: means Tibia will be closed (End the process)."
Portuguese := "Close Client: significa que o Tibia ser" Chr(225) " fechado (Encerrar o processo)."
Gui, %GuiName%:Add, Text, % "x5 y+10 cWhite +BackgroundTrans", % %GlobalLanguage%
English    := "Play Beep: Will Beep every second until you Pause Auto Hunt or Macro."
Portuguese := "Play Beep: Vai soar um Beep por segundo at" Chr(233) " que voc" Chr(234) " Pause o Auto Hunt ou o Macro."
Gui, %GuiName%:Add, Text, % "x5 y+10 cWhite +BackgroundTrans", % %GlobalLanguage%
GuiName := "ValidateAmmo"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose the slot to Validate:"
Portuguese := "Escolha o slot para Validar:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w150 vValidateAmmo choose1", % "Quiver|Ammo"
English    := "Quiver: Quiver Slot"
Portuguese := "Quiver: Slot da Quiver"
Gui, %GuiName%:Add, Text, % "x+5 +BackgroundTrans cWhite", % %GlobalLanguage%
English    := " | Ammo: Arrow Slot - For old OTs."
Portuguese := " | Ammo: Slot da Arrow - para OTs antigos."
Gui, %GuiName%:Add, Text, % "x+5 +BackgroundTrans cWhite", % %GlobalLanguage%
English    := "Choose Quantity:"
Portuguese := "Escolha a Quantidade:"
Gui, %GuiName%:Add, Text, % "x5 y+15 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 w140 h17 -E0x200 +Border cE6E6E6 gValidatePotionsLimit vValidateAmmoQuantity", % "10"
English    := "If the ammo quantity is lower, jump to Step:"
Portuguese := "Se a quantidade de muni" Chr(231) Chr(227) "o for menor, pule para o Passo:"
Gui, %GuiName%:Add, Text, % "x5 y+10 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 w140 h17 -E0x200 +Border cE6E6E6 gValidatePotionsLimit vValidateAmmoJumpStep", % "1"
GuiName := "ValidatePotions"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose the potion to Validate:"
Portuguese := "Escolha o potion para Validar:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w150 vValidatePotion choose1", % "All|"
English    := "Choose Quantity:"
Portuguese := "Escolha a Quantidade:"
Gui, %GuiName%:Add, Text, % "x5 y+10 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 w140 h17 -E0x200 +Border cE6E6E6 gValidatePotionsLimit vValidateQuantity", % "10"
English    := "If the potion quantity is lower, jump to Step:"
Portuguese := "Se a quantidade de potions for menor, pule para o Passo:"
Gui, %GuiName%:Add, Text, % "x5 y+10 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 w140 h17 -E0x200 +Border cE6E6E6 gValidatePotionsLimit vValidateJumpStep", % "1"
English    := "Must uncheck 'Action Bars --> Show Graphical Cooldown' inside the game options."
Portuguese := "Deve desmarcar 'Action Bars --> Show Graphical Cooldown' dentro das op" Chr(231) Chr(245) "es do Tibia."
Gui, %GuiName%:Add, Text, % "x5 y+10 cYellow +BackgroundTrans", % %GlobalLanguage%
English    := "Must check 'Action Bars --> Show Cooldown in Seconds' inside the game options."
Portuguese := "Deve marcar 'Action Bars --> Show Cooldown in Seconds' dentro das op" Chr(231) Chr(245) "es do Tibia."
Gui, %GuiName%:Add, Text, % "x5 y+10 cYellow +BackgroundTrans", % %GlobalLanguage%
classButton.Push(New Button_Type_1( 340 , 28  , w := 90 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := "Refresh List"     , Font := "Arial" , Font_Size := 10 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "ClearValidatePotionsList", Roundness:=3 ) )
GuiName := "RightClick"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose the SQM you want to Right Click:"
Portuguese := "Escolha o SQM que voc" Chr(234) " quer clicar com o Bot" Chr(227) "o Direito:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w70 vRightClickSQM choose1, % "Up|Down|Left|Right|Center"
GuiName := "RotateChar"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose the side you want to rotate:"
Portuguese := "Escolha o lado que voc" Chr(234) " quer rotacionar:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w70 vRotateDirection choose1, % "Up|Down|Left|Right"
GuiName := "UseHotkey"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose the hotkey you want to press:"
Portuguese := "Escolha a hotkey que voc" Chr(234) " quer apertar:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%: Add, Hotkey, x+5 w110 vHotkeyToUse,
GuiName := "Walk"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "Choose the direction you want to walk:"
Portuguese := "Escolha a dire" Chr(231) Chr(227) "o que voc" Chr(234) " quer andar:"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+8 w70 vWalkDirection choose1, % "Up|Down|Left|Right"
English    := "Choose how many SQMs you want to walk:"
Portuguese := "Escolha quantos SQMs voc" Chr(234) " quer andar:"
Gui, %GuiName%:Add, Text, % "x5 y+10 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, x+5 w70 vWalkQuantity choose1, % "1|2|3|4|5"
English    := "You can use this option to walk into Stair, Role e etc."
Portuguese := "Voc" Chr(234) " pode usar esta op" Chr(231) Chr(227) " para andar em Escadas, Buracos e etc."
Gui, %GuiName%:Add, Text, % "x5 y+30 +BackgroundTrans", % %GlobalLanguage%
GuiName := "WaitXSeconds"
Gui, %GuiName%:New, +parentAutoHuntGui -caption
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, c569cd6
Gui, %GuiName%:Font, bold, Tahoma
English    := "How much time (in seconds) to wait befoe going to next step?"
Portuguese := "Quanto tempo (em segundos) esperar antes de ir ao pr" Chr(243) "ximo passo?"
Gui, %GuiName%:Add, Text, % "x5 y28 +BackgroundTrans", % %GlobalLanguage%
English    := "Wait "
Portuguese := "Esperar "
Gui, %GuiName%:Add, Text, % "x5 y+5 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%: Add, Edit, % "x+5 w35 h17 vWaitSeconds -E0x200 +Border cE6E6E6", 60
English    := "seconds."
Portuguese := "segundos."
Gui, %GuiName%:Add, Text, % "x+5 +BackgroundTrans", % %GlobalLanguage%
Gui, ClickMapMark:      Show,       x10 y100  w770 h200, Click Map Mark
Gui, ChangeFloor:       Show,Hide   x10 y100  w770 h200, Change Floor
Gui, DropVials:         Show,Hide   x10 y100  w770 h200, Drop Vials
Gui, GoToStep:          Show,Hide   x10 y100  w770 h200, Go To Step
Gui, LeftClick:         Show,Hide   x10 y100  w770 h200, Left Click
Gui, Logout:            Show,Hide   x10 y100  w770 h200, Logout
Gui, RightClick:        Show,Hide   x10 y100  w770 h200, Right Click
Gui, RotateChar:        Show,Hide   x10 y100  w770 h200, Rotate Char
Gui, UseHotkey:         Show,Hide   x10 y100  w770 h200, Use Hotkey
Gui, ValidateAmmo:      Show,Hide   x10 y100  w770 h200, Validate Ammo
Gui, ValidatePotions:   Show,Hide   x10 y100  w770 h200, Validate Potions
Gui, Walk:              Show,Hide   x10 y100  w770 h200, Walk
Gui, WaitXSeconds:      Show,Hide   x10 y100  w770 h200, Wait X Seconds
}
ValidatePotionsLimit(){
global
Gui, submit, nohide
If ValidateQuantity not between 0 and 1000
GuiControl,ValidatePotions:, ValidateQuantity
}
ChangeStep(){
global
Gui, submit, nohide
AutoHunt.LastUsed := ChangeStepId
}
ResetStep(){
global
Gui, submit, nohide
AutoHunt.LastUsed := 1
GuiControl,AutoHuntGui:, ChangeStepId, % "1"
}
ShowAutoHuntScreen(){
global
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
ClearValidatePotionsList()
Gui, AutoHuntGui:Show, h790 w790, MH - Auto Hunt
}
AutoHuntGuiClose(){
Gui, AutoHuntGui: Hide
}
AutoHuntEnableCombo(){
global
Gui, ClickMapMark:Submit, NoHide
If (ClickAttack != "None") {
GuiControl, ClickMapMark:Enable, ClickAttackCombo
If (ClickAttack == "Box") {
GuiControl, ClickMapMark:Enable, ClickWaiting
GuiControl, ClickMapMark:Enable, ClickMonsterQuantity
} else {
GuiControl, ClickMapMark:Disable, ClickWaiting
GuiControl, ClickMapMark:Disable, ClickMonsterQuantity
}
} Else {
GuiControl, ClickMapMark:Disable, ClickWaiting
GuiControl, ClickMapMark:Disable, ClickMonsterQuantity
GuiControl, ClickMapMark:Disable, ClickAttackCombo
GuiControl, ClickMapMark:ChooseString, ClickAttackCombo, % "No"
}
}
ChangeFloorType(){
global
Gui, ChangeFloor:Submit, NoHide
GuiControl, ChangeFloor:Enable, ChangeFloorHotkeyToUse
GuiControl, ChangeFloor:Enable, ChangeFloorRotateDirection
if (ChangeFloorPosition == "Just Walk" || ChangeFloorPosition == "Right Click") {
GuiControl, ChangeFloor:Disable, ChangeFloorHotkeyToUse
GuiControl, ChangeFloor:Disable, ChangeFloorRotateDirection
} else if (ChangeFloorPosition != "Exani Hur") {
GuiControl, ChangeFloor:Disable, ChangeFloorRotateDirection
}
}
CreateAutoHuntConfigurationScreen(){
global
GuiName := "AutoHuntConfiguration"
Gui, %GuiName%: -Caption +LastFound -0x20000
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, cFFFFFF
Gui, %GuiName%:Font, bold, Tahoma
Gui, %GuiName%:Add, Picture, x0  y0 +BackgroundTrans , % "HBITMAP:*" PNG.TopBarra
Gui, %GuiName%:Add, Picture, x330  y0 +BackgroundTrans , % "HBITMAP:*" PNG.TopBarra
Gui, %GuiName%:Add, Picture, x3  y3 +BackgroundTrans , % "HBITMAP:*" PNG.16x16Logo
classButton.Push(New IMG_Button(660-28 , 0 , 28 , 22 , PNG.XClose , PNG.HXClose , GuiName , "AutoHuntConfigurationGuiClose"))
Gui, %GuiName%:Add, Text, x25 y4 +BackgroundTrans, Auto Hunt Configuration
cx:=10, cy:=30, ItemName:= "HkAutoHuntStart"
English    := "Hotkey to Start"
Portuguese := "Hotkey para Iniciar"
New Group_Box(cx, cy, 155, 50, GuiName, %GlobalLanguage%)
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 35 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%: Add, Hotkey,  % "x+10 w80 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
cx:=177, cy:=30, ItemName:= "HkAutoHuntPause"
English    := "Hotkey to Pause"
Portuguese := "Hotkey para Pausar"
New Group_Box(cx, cy, 155, 50, GuiName, %GlobalLanguage%)
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 35 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%: Add, Hotkey,  % "x+10 w80 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
cx:=10, cy:=105, ItemName:= "HkAutoHuntStart"
English    := "General Options"
Portuguese := "Op" Chr(231) Chr(245) "es Gerais"
New Group_Box(cx, cy, 320, 170, GuiName, %GlobalLanguage%)
English    := "Ignore Players, go to Next Step"
Portuguese := "Ignorar jogadores, Pular Passo"
classButton.Push(New Switch_Type1(cx+10 , cy+35, 300, GuiName, InI[ItemName], %GlobalLanguage% , "12 Bold", TColor,,4,, "ConfigHotkeys"))
English    := "Play Sound Player on Screen?"
Portuguese := "Tocar Som com Player na Tela?"
classButton.Push(New Switch_Type1(cx+10 , cy+65, 300, GuiName, InI[ItemName], %GlobalLanguage% , "12 Bold", TColor,,5,, "ConfigHotkeys"))
English    := "Play Sound Private Messages?"
Portuguese := "Tocar Som com Private Messages?"
classButton.Push(New Switch_Type1(cx+10 , cy+95, 300, GuiName, InI[ItemName], %GlobalLanguage% , "12 Bold", TColor,,6,, "ConfigHotkeys"))
English    := "Play Sound Local Chat Messages?"
Portuguese := "Tocar Som com Local Chat Messages?"
classButton.Push(New Switch_Type1(cx+10 , cy+125, 300, GuiName, InI[ItemName], %GlobalLanguage% , "12 Bold", TColor,,8,, "ConfigHotkeys"))
English    := "Hotkey to Stop PM Sound:"
Portuguese := "Hotkey para Parar o Som da PM:"
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 155 " cWhite  +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%: Add, Hotkey,  % "x+10 y" cy + 153 " w80 -E0x200 +Border cE6E6E6 v" ItemName "7", % InI[ItemName][7]
cx:=10, cy:=300, ItemName:= "AutoHuntGlobalLoot"
English    := "Global Loot Options"
Portuguese := "Op" Chr(231) Chr(245) "es Globais do Loot"
New Group_Box(cx, cy, 320, 50, GuiName, %GlobalLanguage%)
English    := "Take Loot?"
Portuguese := "Pegar Loot?"
classButton.Push(New Switch_Type1(cx+10 , cy+35, 300, GuiName, InI[ItemName], %GlobalLanguage% , "12 Bold", TColor,,2,, "ConfigHotkeys"))
cx:=335, cy:=30, ItemName:= "AutoHuntGlobalHaste"
English    := "Global Haste Options"
Portuguese := "Op" Chr(231) Chr(245) "es Globais do Haste"
New Group_Box(cx, cy, 320, 90, GuiName, %GlobalLanguage%)
English    := "Use Haste to walk between Marks?"
Portuguese := "Usar Haste para andar entre as Marcas?"
classButton.Push(New Switch_Type1(cx+10 , cy+35, 300, GuiName, InI[ItemName], %GlobalLanguage% , "12 Bold", TColor,,2,, "ConfigHotkeys"))
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 70 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%: Add, Hotkey,  % "x+10 w80 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
cx:=335, cy:=150, ItemName:= "AutoHuntGlobalCombo"
English    := "Global Combo Options"
Portuguese := "Op" Chr(231) Chr(245) "es Globais do Combo"
New Group_Box(cx, cy, 320, 200, GuiName, %GlobalLanguage%)
English    := "Enable the Global Combo?"
Portuguese := "Ativar o Combo Global?"
classButton.Push(New Switch_Type1(cx+10 , cy+35, 300, GuiName, InI[ItemName], %GlobalLanguage% , "12 Bold", TColor,,2,, "ConfigHotkeys"))
English    := "Change Combo to"
Portuguese := "Mudar para o Combo"
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 70 " +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w120 choose1 v" ItemName "3", % "FirstCombo|SecondCombo|ThirdCombo"
temp := % InI[ItemName][3]
if (temp)
GuiControl, %GuiName%:ChooseString, % ItemName "3", % InI[ItemName][3]
English    := "If more than"
Portuguese := "Se houver mais de"
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 95 " +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w50 choose1 v" ItemName "4", % "1|2|3|4"
temp := % InI[ItemName][4]
if (temp)
GuiControl, %GuiName%:ChooseString, % ItemName "4", % InI[ItemName][4]
English    := "monsters on battle"
Portuguese := "monstros no battle"
Gui, %GuiName%:Add, Text, % "x+5 y" cy + 95 " +BackgroundTrans", % %GlobalLanguage%
English    := "Change Combo to"
Portuguese := "Mudar para o Combo"
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 140 " +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w120 choose1 gShowHiddenText v" ItemName "5", % "Go To Next Step|FirstCombo|SecondCombo|ThirdCombo"
temp := % InI[ItemName][5]
if (temp){
GuiControl, %GuiName%:ChooseString, % ItemName "5", % InI[ItemName][5]
AutoHuntGlobalCombo5 := Ini.AutoHuntGlobalCombo.5
}
English    := "If less than"
Portuguese := "Se houver menos de"
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 165 " +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w50 choose1 v" ItemName "6", % "2|3|4"
temp := % InI[ItemName][6]
if (temp)
GuiControl, %GuiName%:ChooseString, % ItemName "6", % InI[ItemName][6]
English    := "monsters on battle"
Portuguese := "monstros no battle"
Gui, %GuiName%:Add, Text, % "x+5 y" cy + 165 " +BackgroundTrans", % %GlobalLanguage%
English    := "If they have"
Portuguese := "Se eles tiverem"
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y"  cy + 190 " cYellow Hidden vHiddenText1 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+8 w50 choose1 Hidden v" ItemName "7", % "10|15|20|25|30|35|40|45|50"
temp := % InI[ItemName][4]
if (temp)
GuiControl, %GuiName%:ChooseString, % ItemName "7", % InI[ItemName][4]
English    := "% or more HP only"
Portuguese := "% ou mais HP apenas"
Gui, %GuiName%:Add, Text, % "x+5 cYellow Hidden vHiddenText2 +BackgroundTrans", % %GlobalLanguage%
}
ShowHiddenText(){
global
Gui, submit, nohide
if (AutoHuntGlobalCombo5 == "Go To Next Step") {
GuiControl, AutoHuntConfiguration:Show, HiddenText1
GuiControl, AutoHuntConfiguration:Show, HiddenText2
GuiControl, AutoHuntConfiguration:Show, AutoHuntGlobalCombo7
} else {
GuiControl, AutoHuntConfiguration:Hide, HiddenText1
GuiControl, AutoHuntConfiguration:Hide, HiddenText2
GuiControl, AutoHuntConfiguration:Hide, AutoHuntGlobalCombo7
}
}
OpenAutoHuntConfigurationScreen(){
global
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
Gui, AutoHuntConfiguration:Show, w660, MH - Auto Hunt Configuration
ShowHiddenText()
}
AutoHuntConfigurationGuiClose(){
global
Gui, submit, nohide
InI["HkAutoHuntStart"][3] := HkAutoHuntStart3
IniWriteArray(InI.HkAutoHuntStart,"HkAutoHuntStart","ConfigHotkeys")
InI["HkAutoHuntPause"][3] := HkAutoHuntPause3
IniWriteArray(InI.HkAutoHuntPause,"HkAutoHuntPause","ConfigHotkeys")
InI["HkAutoHuntStart"][7] := HkAutoHuntStart7
IniWriteArray(InI.HkAutoHuntStart,"HkAutoHuntStart","ConfigHotkeys")
Ini.AutoHuntGlobalCombo.3 := AutoHuntGlobalCombo3
Ini.AutoHuntGlobalCombo.4 := AutoHuntGlobalCombo4
Ini.AutoHuntGlobalCombo.5 := AutoHuntGlobalCombo5
Ini.AutoHuntGlobalCombo.6 := AutoHuntGlobalCombo6
Ini.AutoHuntGlobalCombo.7 := AutoHuntGlobalCombo7
IniWriteArray(Ini.AutoHuntGlobalCombo,"AutoHuntGlobalCombo","ConfigHotkeys")
if(Ini.AutoHuntGlobalHaste.2 = 1 && AutoHuntGlobalHaste3 != "" && AutoHuntGlobalHaste3 != "[...]"){
Ini.AutoHuntGlobalHaste.3 := AutoHuntGlobalHaste3
IniWriteArray(Ini.AutoHuntGlobalHaste,"AutoHuntGlobalHaste","ConfigHotkeys")
} else if(Ini.AutoHuntGlobalHaste.2 = 1 && AutoHuntGlobalHaste3 == "" && AutoHuntGlobalHaste3 == "[...]"){
English     := "Please, insert the Haste hotkey if you want to use it."
Portuguese  := "Por favor, coloque a hotkey do Haste se quiser usar."
MsgBox, 4144, Haste Hotkey Missing, % %GlobalLanguage%
return
}
PopulateFields()
Gui, AutoHuntConfiguration: Hide
}
SaveFile(){
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
FileSelectFile, OutputVar, S8, %A_WorkingDir%, Select Auto Hunt File
if (OutputVar = "") {
return
} else {
NameExtension := SubStr(OutputVar, -3 , 4)
If (NameExtension != ".ini"){
AutoHunt.File := OutputVar . ".ini"
} Else {
AutoHunt.File := OutputVar
}
if(FileExist(AutoHunt.File)){
FileDelete, % AutoHunt.File
}
FileAppend, , % AutoHunt.File
Loop % LV_GetCount()
{
LV_GetText(OutputVar, A_Index, 1)
AutoHunt.Steps[A_Index] := ">||" . OutputVar
LV_GetText(OutputVar, A_Index, 2)
AutoHunt.Steps[A_Index] := AutoHunt.Steps[A_Index] . "||" . OutputVar
LV_GetText(OutputVar, A_Index, 3)
AutoHunt.Steps[A_Index] := AutoHunt.Steps[A_Index] . "||" . OutputVar
LV_GetText(OutputVar, A_Index, 4)
AutoHunt.Steps[A_Index] := AutoHunt.Steps[A_Index] . "||" . OutputVar
LV_GetText(OutputVar, A_Index, 5)
AutoHunt.Steps[A_Index] := AutoHunt.Steps[A_Index] . "||" . OutputVar
LV_GetText(OutputVar, A_Index, 6)
AutoHunt.Steps[A_Index] := AutoHunt.Steps[A_Index] . "||" . OutputVar
LV_GetText(OutputVar, A_Index, 7)
AutoHunt.Steps[A_Index] := AutoHunt.Steps[A_Index] . "||" . OutputVar
LV_GetText(OutputVar, A_Index, 8)
AutoHunt.Steps[A_Index] := AutoHunt.Steps[A_Index] . "||" . OutputVar
IniWrite, % AutoHunt.Steps[A_Index], % AutoHunt.File, AutoHunt, Step%A_Index%
}
classButton["AHAdd"].Editor("Add","dddddd")
MsgBox, 4160, Auto Hunt, % "Settings Saved."
}
}
LoadFile(){
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
FileSelectFile, OutputVar, 1, %A_WorkingDir%, Select Auto Hunt File
if (OutputVar = "") {
return
} else {
GuiControl,AutoHuntGui:, ChangeStepId, % "1"
AutoHunt.LastUsed := 1
Autohunt.WaitingGoNext := 0
SetTimer, AutoHuntWaiting, Off
AutoHunt.File := OutputVar
LV_Delete()
IniRead, HotkeysArray, % AutoHunt.File, AutoHunt
AutoHunt.LineArray := StrSplit(HotkeysArray, "`n")
Loop % AutoHunt.LineArray.Length(){
AutoHunt.SubArray := StrSplit(AutoHunt.LineArray[A_Index], "=>||")
pos := StrSplit(AutoHunt.SubArray.2, "||")
LV_Add("", pos.1, pos.2, pos.3, pos.4, pos.5, pos.6, pos.7, pos.8)
}
classButton["AHAdd"].Editor("Add","dddddd")
HkAutoHuntPause()
MsgBox, 4160, Auto Hunt, % "Settings Loaded."
}
}
ResetFile(){
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
GuiControl,AutoHuntGui:, ChangeStepId, % "1"
AutoHunt.LastUsed := 1
Autohunt.WaitingGoNext := 0
SetTimer, AutoHuntWaiting, Off
MsgBox, 4132, Reset Steps, Do you want to reset the steps?
IfMsgBox Yes
{
classButton["AHAdd"].Editor("Add","dddddd")
LV_Delete()
HkAutoHuntPause()
}
}
AddStep(){
global
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
Gui, AutoHuntGui:       Submit, NoHide
Gui, ClickMapMark:      Submit, NoHide
Gui, ChangeFloor:       Submit, NoHide
Gui, DropVials:         Submit, NoHide
Gui, GoToStep:          Submit, NoHide
Gui, LeftClick:         Submit, NoHide
Gui, Logout:            Submit, NoHide
Gui, RightClick:        Submit, NoHide
Gui, UseHotkey:         Submit, NoHide
Gui, RotateChar:        Submit, NoHide
Gui, ValidateAmmo:      Submit, NoHide
Gui, ValidatePotions:   Submit, NoHide
Gui, Walk:              Submit, NoHide
Gui, WaitXSeconds:      Submit, NoHide
AutoHunt.RowNumber := LV_GetCount() + 1
AutoHunt.Steps.2 := StepDescription
Switch (StepAction){
case "Click Map":
AutoHunt.Steps.3 := StepAction . " " . SelectedMark
AutoHunt.Steps.4 := ClickPosition
AutoHunt.Steps.5 := ClickAttack
if (ClickAttack == "Box" && ClickAttackCombo == "No"){
MsgBox, 4112, Combo Missing, % "For a Box step you must select a Combo." "`n`nPara um passo de Box voc" Chr(234) " precisa escolher o Combo."
return
}
AutoHunt.Steps.6 := ClickAttackCombo
AutoHunt.Steps.7 := ClickWaiting
AutoHunt.Steps.8 := ClickMonsterQuantity
case "Change Floor":
AutoHunt.Steps.2 := ChangeFloorPosition
if (ChangeFloorPosition == "Just Walk" || ChangeFloorPosition == "Right Click"){
AutoHunt.Steps.3 := StepAction . " " . FindMark
} else {
if (ChangeFloorHotkeyToUse == ""){
MsgBox, 4112, Hotkey Missing, % "Hotkey to change floor is missing." "`n`nHotkey para mudar o andar est" Chr(225) " faltando."
return
}
AutoHunt.Steps.3 := StepAction . " " . FindMark . " | " . ChangeFloorHotkeyToUse
}
if (ChangeFloorPosition == "Exani Hur"){
AutoHunt.Steps.4 := ChangeFloorRotateDirection
} else {
AutoHunt.Steps.4 := "-"
}
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Drop Vials":
AutoHunt.Steps.3 := StepAction
AutoHunt.Steps.4 := "-"
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Go To Step":
if(GoToStepId < 1){
MsgBox, 4112, Wrong Step Id, % "Step id should be higher than 0." "`n`nColoque o Step Id maior que 0."
return
}
AutoHunt.Steps.3 := StepAction " " GoToStepId
AutoHunt.Steps.4 := "-"
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Left Click":
AutoHunt.Steps.3 := StepAction
AutoHunt.Steps.4 := LeftClickSQM
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Logout":
AutoHunt.Steps.3 := StepAction " " ValidateLogout
AutoHunt.Steps.4 := "-"
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Validate Ammo":
if(ValidateAmmoJumpStep < 1){
MsgBox, 4112, Wrong Step Id, % "Step id should be higher than 0." "`n`nColoque o Step Id maior que 0."
return
}
if(ValidateAmmoQuantity < 1){
MsgBox, 4112, Wrong Ammo Quantity, % "Ammo quantity should be higher than 0." "`n`nQuantidade de muni" Chr(231) Chr(227) "o precisa ser maior que 0."
return
}
AutoHunt.Steps.2 := "Qty: " ValidateAmmoQuantity
AutoHunt.Steps.3 := StepAction . " " . ValidateAmmo
AutoHunt.Steps.4 := "Id: " ValidateAmmoJumpStep
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Validate Potions":
if(ValidateJumpStep < 1){
MsgBox, 4112, Wrong Step Id, % "Step id should be higher than 0." "`n`nColoque o Step Id maior que 0."
return
}
if(ValidateQuantity < 1){
MsgBox, 4112, Wrong Potion Quantity, % "Potion quantity should be higher than 0." "`n`nQuantidade de potions precisa ser maior que 0."
return
}
AutoHunt.Steps.2 := "Qty: " ValidateQuantity
AutoHunt.Steps.3 := StepAction . " " . ValidatePotion
AutoHunt.Steps.4 := "Id: " ValidateJumpStep
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Right Click":
AutoHunt.Steps.3 := StepAction
AutoHunt.Steps.4 := RightClickSQM
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Use Hotkey":
AutoHunt.Steps.3 := StepAction
AutoHunt.Steps.4 := HotkeyToUse
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Rotate Char":
AutoHunt.Steps.3 := StepAction
AutoHunt.Steps.4 := RotateDirection
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Walk":
AutoHunt.Steps.3 := StepAction . " " . WalkQuantity " SQMs"
AutoHunt.Steps.4 := WalkDirection
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
case "Wait X Seconds":
AutoHunt.Steps.3 := StepAction
AutoHunt.Steps.4 := WaitSeconds
AutoHunt.Steps.5 := "-"
AutoHunt.Steps.6 := "-"
AutoHunt.Steps.7 := "-"
AutoHunt.Steps.8 := "-"
}
If (classButton[A_GuiControl].Text == "Add"){
LV_Add("", AutoHunt.RowNumber, AutoHunt.Steps.2, AutoHunt.Steps.3, AutoHunt.Steps.4, AutoHunt.Steps.5, AutoHunt.Steps.6, AutoHunt.Steps.7, AutoHunt.Steps.8)
} Else {
classButton["AHAdd"].Editor("Add","dddddd")
AutoHunt.RowNumber := LV_GetNext("F")
LV_Modify(AutoHunt.RowNumber , "", AutoHunt.RowNumber, AutoHunt.Steps.2, AutoHunt.Steps.3, AutoHunt.Steps.4, AutoHunt.Steps.5, AutoHunt.Steps.6, AutoHunt.Steps.7, AutoHunt.Steps.8)
}
GuiControl,AutoHuntGui:, StepDescription, % ""
}
MoveStepUp(){
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
LVMoveRow(True)
}
MoveStepDown(){
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
LVMoveRow(False)
}
LVMoveRow(Up := True) {
classButton["AHAdd"].Editor("Add","dddddd")
CO := [], TO := [], F := LV_GetNext("F"), N := F + (Up ? -1 : 1)
If (!N) || (N > LV_GetCount()) || (!F) {
return
}
Loop, % LV_GetCount("Col") {
LV_GetText(CT, F, A_Index), LV_GetText(TT, N, A_Index), CO.Push(CT), TO.Push(TT)
}
Loop, % CO.MaxIndex() {
LV_Modify(F, "Col" A_Index, TO[A_Index]), LV_Modify(N, "Col" A_Index, CO[A_Index])
}
LV_Modify(F, "-Select", F), LV_Modify(N, "Select", N)
}
EditStep(){
Gui, AutoHuntGui:   Submit, NoHide
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
AutoHunt.RowNumber := LV_GetNext("F")
If (AutoHunt.RowNumber > 0) {
LV_GetText(OutputVar, AutoHunt.RowNumber , 2)
GuiControl,AutoHuntGui:, StepDescription, % OutputVar
LV_GetText(OutputVar, AutoHunt.RowNumber , 3)
pos := StrSplit(OutputVar, " ")
If InStr(OutputVar, "Click Map"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
GuiControl,ClickMapMark:, % pos.3, 1
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
GuiControl,ClickMapMark:ChooseString, ClickPosition, % OutputVar
LV_GetText(OutputVar, AutoHunt.RowNumber , 5)
GuiControl,ClickMapMark:ChooseString, ClickAttack, % OutputVar
If (OutputVar != "None") {
GuiControl, ClickMapMark:Enable, ClickAttackCombo
LV_GetText(OutputVar, AutoHunt.RowNumber , 6)
GuiControl,ClickMapMark:ChooseString, ClickAttackCombo, % OutputVar
If (ClickAttack == "Box") {
GuiControl, ClickMapMark:Enable, ClickWaiting
LV_GetText(OutputVar, AutoHunt.RowNumber , 7)
GuiControl,ClickMapMark:ChooseString, ClickWaiting, % OutputVar
GuiControl, ClickMapMark:Enable, ClickMonsterQuantity
LV_GetText(OutputVar, AutoHunt.RowNumber , 8)
GuiControl,ClickMapMark:ChooseString, ClickMonsterQuantity, % OutputVar
} else {
GuiControl, ClickMapMark:Disable, ClickWaiting
GuiControl, ClickMapMark:Disable, ClickMonsterQuantity
}
} Else {
GuiControl, ClickMapMark:Disable, ClickAttackCombo
GuiControl, ClickMapMark:ChooseString, ClickAttackCombo, % "No"
}
} Else If InStr(OutputVar, "Change Floor"){
GuiControl,AutoHuntGui:, StepDescription, % ""
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
GuiControl,ChangeFloor:, % pos.3, 1
LV_GetText(OutputVar, AutoHunt.RowNumber , 2)
GuiControl,ChangeFloor:ChooseString, ChangeFloorPosition, % OutputVar
ChangeFloorPosition := OutputVar
if (ChangeFloorPosition != "Just Walk" || ChangeFloorPosition != "Right Click"){
GuiControl,ChangeFloor:, ChangeFloorHotkeyToUse, % pos.5
if (ChangeFloorPosition == "Exani Hur"){
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
GuiControl,ChangeFloor:ChooseString, ChangeFloorRotateDirection, % OutputVar
}
} else {
GuiControl,ChangeFloor:, ChangeFloorHotkeyToUse,
}
ChangeFloorType()
} else if InStr(OutputVar, "Drop Vials"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
} else if InStr(OutputVar, "Go To Step"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2 . " " . pos.3
GuiControl,GoToStep:, GoToStepId, % pos.4
} else if InStr(OutputVar, "Left Click"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
GuiControl,LeftClick:ChooseString, LeftClickSQM, % OutputVar
} else if InStr(OutputVar, "Logout"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1
GuiControl,Logout:ChooseString, ValidateLogout, % pos.2 . " " . pos.3
} else if InStr(OutputVar, "Validate Ammo"){
GuiControl,AutoHuntGui:, StepDescription, % ""
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
GuiControl,ValidateAmmo:ChooseString, ValidateAmmo, % pos.3
LV_GetText(OutputVar, AutoHunt.RowNumber , 2)
pos := StrSplit(OutputVar, " ")
GuiControl,ValidateAmmo:, ValidateAmmoQuantity, % pos.2
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
pos := StrSplit(OutputVar, " ")
GuiControl,ValidateAmmo:, ValidateAmmoJumpStep, % pos.2
} else if InStr(OutputVar, "Validate Potions"){
GuiControl,AutoHuntGui:, StepDescription, % ""
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
GuiControl,ValidatePotions:ChooseString, ValidatePotion, % pos.3
LV_GetText(OutputVar, AutoHunt.RowNumber , 2)
pos := StrSplit(OutputVar, " ")
GuiControl,ValidatePotions:, ValidateQuantity, % pos.2
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
pos := StrSplit(OutputVar, " ")
GuiControl,ValidatePotions:, ValidateJumpStep, % pos.2
} else if InStr(OutputVar, "Right Click"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
GuiControl,RightClick:ChooseString, RightClickSQM, % OutputVar
} else if InStr(OutputVar, "Use Hotkey"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
GuiControl,UseHotkey:ChooseString, HotkeyToUse, % pos.3
} else if InStr(OutputVar, "Rotate Char"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
GuiControl,RotateChar:ChooseString, RotateDirection,  % OutputVar
} else If InStr(OutputVar, "Walk"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
GuiControl,Walk:ChooseString, WalkDirection, % OutputVar
GuiControl,Walk:ChooseString, WalkQuantity, % pos.4
} else If InStr(OutputVar, "Wait X Seconds"){
classButton["AHAdd"].Editor("Done","dddddd")
GuiControl,AutoHuntGui:ChooseString, StepAction, % pos.1 . " " . pos.2 . " " . pos.3
LV_GetText(OutputVar, AutoHunt.RowNumber , 4)
GuiControl,WaitXSeconds:, WaitSeconds, % OutputVar
}
ConfigureStep()
}
}
DeleteStep(){
Gui, AutoHuntGui:   Submit, NoHide
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
classButton["AHAdd"].Editor("Add","dddddd")
if (AutoHunt.Active == 1) {
MsgBox, 4112, Auto Hunt started, % "Stop the Auto Hunt and try again." "`n`nPare o Auto Hunt e tente novamente."
return
}
AutoHunt.RowNumber := LV_GetNext("F")
LV_Delete(AutoHunt.RowNumber)
}
ConfigureStep(){
global
Gui, AutoHuntGui:   Submit, NoHide
Gui, ClickMapMark:Hide
Gui, ChangeFloor:Hide
Gui, DropVials:Hide
Gui, GoToStep:Hide
Gui, LeftClick:Hide
Gui, Logout:Hide
Gui, RightClick:Hide
Gui, UseHotkey:Hide
Gui, RotateChar:Hide
Gui, ValidateAmmo:Hide
Gui, ValidatePotions:Hide
Gui, Walk:Hide
Gui, WaitXSeconds:Hide
Switch (StepAction){
case "Click Map":
Gui, ClickMapMark:Show
case "Change Floor":
Gui, ChangeFloor:Show
case "Drop Vials":
Gui, DropVials:Show
case "Go To Step":
Gui, GoToStep:Show
case "Left Click":
Gui, LeftClick:Show
case "Logout":
Gui, Logout:Show
case "Right Click":
Gui, RightClick:Show
case "Use Hotkey":
Gui, UseHotkey:Show
case "Rotate Char":
Gui, RotateChar:Show
case "Validate Ammo":
Gui, ValidateAmmo:Show
case "Validate Potions":
Gui, ValidatePotions:Show
case "Walk":
Gui, Walk:Show
case "Wait X Seconds":
Gui, WaitXSeconds:Show
}
}
ClearValidatePotionsList(){
global
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
if( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
Gui, ValidatePotions: Submit, NoHide
potionsInUse := []
if(ini.FirstHealthPotion.3)
potionsInUse.Push(ini.FirstHealthPotion.9)
if(ini.SecondHealthPotion.3)
potionsInUse.Push(ini.SecondHealthPotion.9)
if(ini.ThirdHealthPotion.3)
potionsInUse.Push(ini.ThirdHealthPotion.9)
if(ini.FourthHealthPotion.3)
potionsInUse.Push(ini.FourthHealthPotion.9)
if(ini.FirstManaPotion.3)
potionsInUse.Push(ini.FirstManaPotion.9)
if(ini.SecondManaPotion.3)
potionsInUse.Push(ini.SecondManaPotion.9)
if(ini.ThirdManaPotion.3)
potionsInUse.Push(ini.ThirdManaPotion.9)
if(ini.FourthManaPotion.3)
potionsInUse.Push(ini.FourthManaPotion.9)
newArr := [], testArr := []
for k, v in potionsInUse
if !testArr.HasKey(v)
testArr[v] := true, newArr.Push(v)
potionsInUse := "All|"
for k, v in newArr
potionsInUse := potionsInUse . v . "|"
GuiControl, ValidatePotions:, ValidatePotion, |
GuiControl, ValidatePotions:, ValidatePotion, % potionsInUse
GuiControl, ValidatePotions:ChooseString, ValidatePotion, % "All"
}
HkAutoHuntStart(){
If (AutoHunt.Active == 0)
EnableAutoHunt()
}
HkAutoHuntPause(){
If (AutoHunt.Active == 1)
EnableAutoHunt()
}
HkAutoHuntStopSound(){
SetTimer, MessagesSound, Off
Timer.MessagesSound := False
}
MessagesSound(){
SoundBeep
}
global AutoHunt := []
AutoHunt.Active := False
AutoHunt.ConfigPath := A_WorkingDir
AutoHunt.Steps := []
AutoHunt.LastUsed := 1
AutoHunt.Waiting := False
AutoHunt.WaitingSound := False
Autohunt.WaitingGoNext := 0
AutoHunt.ComboExecute := False
AutoHunt.ValidaTentativas := 0
global ChangeStepId := 1
ValidateAutoHunt(){
If (InI.HkAutoHuntStart.3 != "[...]" && InI.HkAutoHuntStart.3 != "") {
Hotkey,% InI.HkAutoHuntStart.3,HkAutoHuntStart
Hotkey,% InI.HkAutoHuntStart.3,On
}
If (InI.HkAutoHuntPause.3 != "[...]" && InI.HkAutoHuntPause.3 != "") {
Hotkey,% InI.HkAutoHuntPause.3,HkAutoHuntPause
Hotkey,% InI.HkAutoHuntPause.3,On
}
If (InI.HkAutoHuntStart.7 != "[...]" && InI.HkAutoHuntStart.7 != "") {
Hotkey,% InI.HkAutoHuntStart.7,HkAutoHuntStopSound
Hotkey,% InI.HkAutoHuntStart.7,On
}
}
EnableAutoHunt(){
global
Gui, AutoHuntGui: Default
Gui, AutoHuntGui: ListView, StepAction
MouseGetPos,,,, ctrl , 2
classButton["AHStart"].Draw_Pressed()
AutoHunt.LastMonster := False
If (Macro = 1 || AutoHunt.Active == 1){
If (Ini.Targeting.3) {
MsgBox, 4112, Targeting Active, % "You can't have Auto Hunt and Targeting (Extras Tab) active together." "`n`nVoc" Chr(234) " nao pode ter o Auto Hunt e Targeting (Aba Extras) ativos ao mesmo tempo."
Return 1
}
If (Ini.ComboConfig.3) {
MsgBox, 4112, Auto Start Combo Active, % "You can't have Auto Start Combo and Auto Hunt active together." "`n`nVoc" Chr(234) " nao pode ter o Auto Hunt e o Auto Iniciar Combo ativos ao mesmo tempo."
Return 1
}
AutoHunt.Active := !AutoHunt.Active
If (AutoHunt.Active == 1) {
AutoHunt.TotalSteps := LV_GetCount()
If (AutoHunt.TotalSteps == 0){
AutoHunt.Active := !AutoHunt.Active
MsgBox, 4112, Auto Hunt can't start, % "No steps to be performed. Please configure it again." "`n`nNenhuma a" Chr(231) Chr(227) "o configurada. Por favor ajuste novamente."
} else {
AutoHunt.Steps := []
Loop, % AutoHunt.TotalSteps {
AutoHunt.Steps[A_Index] := []
LV_GetText(OutputVar, A_Index, 1)
AutoHunt.Steps[A_Index].1 := OutputVar
LV_GetText(OutputVar, A_Index, 2)
AutoHunt.Steps[A_Index].2 := OutputVar
LV_GetText(OutputVar, A_Index, 3)
AutoHunt.Steps[A_Index].3 := OutputVar
LV_GetText(OutputVar, A_Index, 4)
AutoHunt.Steps[A_Index].4 := OutputVar
LV_GetText(OutputVar, A_Index, 5)
AutoHunt.Steps[A_Index].5 := OutputVar
LV_GetText(OutputVar, A_Index, 6)
AutoHunt.Steps[A_Index].6 := OutputVar
LV_GetText(OutputVar, A_Index, 7)
AutoHunt.Steps[A_Index].7 := OutputVar
LV_GetText(OutputVar, A_Index, 8)
AutoHunt.Steps[A_Index].8 := OutputVar
}
ComboOriginal := InI.ComboConfig.3
InI.ComboConfig.3 := 0
SetTimer, enableSecondaryBattleListRead, 500
classButton["AHStart"].Editor("Pause","dddddd")
Gui, RunningSteps: Destroy
Gui, RunningSteps: +E0x20 -SysMenu +AlwaysOnTop +ToolWindow +HwndRunningStepsID -caption +LastFound +E0x08000000
Gui, RunningSteps:Color, 111111
WinSet, Transparent, 200
Gui, RunningSteps: Font, c00c000
Gui, RunningSteps: Font, bold, Tahoma
Gui, RunningSteps: Add, Text,  x0 y3 w250 h110 left vStepsGui,
if(SQTLoot.Gui.x && SQTLoot.Gui.y)
Gui, RunningSteps: Show, % "NA w250 h110 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y-120, RunningSteps
}
} else {
InI.ComboConfig.3 := ComboOriginal
SetTimer, enableSecondaryBattleListRead, Off
Timer.MessagesSound := False
SetTimer, MessagesSound, Off
Data.Combo := False
Data.ComboSave := 0
AutoHunt.ComboExecute := False
AutoHunt.Waiting := False
SetTimer, AutoHuntWaiting, Off
classButton["AHStart"].Editor("Start","dddddd")
Gui, RunningSteps: Destroy
}
} else
MsgBox, 4112, Auto Hunt can't start, % "Tibia Helper is not started!" "`n`Tibia Helper n" Chr(227) "o esta iniciado."
}
enableSecondaryBattleListRead(){
Timer.SecondaryBattleList := True
}
AutoHuntWaiting(){
AutoHunt.Waiting := False
}
ReadSecondaryBattle(){
if ((InI.HkAutoHuntStart.4 == True || InI.HkAutoHuntStart.5 == True) && AutoHunt.Active == 1){
if (GetColorHex(Cords.BattleListExtra.2+9, Cords.BattleListExtra.3+9) != "#80c154")
SearchPNG(PNG.BattleListExtra, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.BattleListExtra:=Erro
if (Cords.BattleListExtra.1 != 0){
English     := "Secondary Battle List Closed! Please open it."
Portuguese  := "Secondary Battle List fechado! Por favor abra-o."
ToolTip(%GlobalLanguage%,1000,Cords.Loot.4,Cords.Loot.5)
}
Filtro := GetColorHex(Cords.BattleListExtra.2+131, Cords.BattleListExtra.3+4) = "#2C2C2C" ? 48 : 0
AutoHunt.PlayerOnScreen := GetColorHex(Cords.BattleListExtra.2+23, Cords.BattleListExtra.3+28+Filtro) = "#000000" ? 1 : 0
if (AutoHunt.PlayerOnScreen == True && InI.HkAutoHuntStart.5 == True)
SoundBeep
}
}
AutoHunt(){
If (AutoHunt.LastUsed > AutoHunt.TotalSteps){
AutoHunt.LastUsed := 1
Autohunt.WaitingGoNext := 0
}
If (Autohunt.WaitingGoNext > 30){
AutoHunt.LastUsed++
Autohunt.WaitingGoNext := 0
}
GuiControl, Running:, TimerAH, % "Id: " AutoHunt.LastUsed " - Next: " AutoHunt.WaitingGoNext "/3"
if(ChangeStepId != AutoHunt.LastUsed)
GuiControl,AutoHuntGui:, ChangeStepId, % AutoHunt.LastUsed
If (AutoHunt.Waiting == False && AutoHunt.Active == 1) {
AH_ID           := AutoHunt.Steps[AutoHunt.LastUsed].1
AH_Description  := AutoHunt.Steps[AutoHunt.LastUsed].2
AH_Action       := AutoHunt.Steps[AutoHunt.LastUsed].3
AH_Position     := AutoHunt.Steps[AutoHunt.LastUsed].4
AH_Attack       := AutoHunt.Steps[AutoHunt.LastUsed].5
AH_Combo        := AutoHunt.Steps[AutoHunt.LastUsed].6
AH_Wait         := AutoHunt.Steps[AutoHunt.LastUsed].7
AH_Monsters     := AutoHunt.Steps[AutoHunt.LastUsed].8
if (AutoHunt.ComboExecute == True){
AH_ID           := AutoHunt.Steps[AutoHunt.BeforeLast].1
AH_Description  := AutoHunt.Steps[AutoHunt.BeforeLast].2
AH_Action       := "Start Combo " + AutoHunt.Steps[AutoHunt.BeforeLast].6
AH_Position     := AutoHunt.Steps[AutoHunt.BeforeLast].4
AH_Attack       := AutoHunt.Steps[AutoHunt.BeforeLast].5
AH_Combo        := AutoHunt.Steps[AutoHunt.BeforeLast].6
AH_Wait         := AutoHunt.Steps[AutoHunt.BeforeLast].7
AH_Monsters     := AutoHunt.Steps[AutoHunt.BeforeLast].8
}
if(AutoHunt.Trapped == True){
if(emptyBattle == False){
Combo := Ini.FirstCombo
Data.ComboName := InI.HkCombo1.3
Data.ComboRetarget := InI.HkCombo1.5
Data.ComboLoot := InI.HkCombo1.6
AutoHunt.ComboExecute := True
} else {
if(Ini.AutoHuntGlobalLoot.2 == 1 || Data.ComboLoot == 1){
Data.Loot := 1
}
Skills.LastUsed := 1
Data.Combo := False
AutoHunt.ComboExecute := False
AutoHunt.Trapped := False
}
}
If(SQTLoot.9.x != ""){
English := "Id: " . AH_ID . "`nDescription: " . AH_Description . "`nAction: " . AH_Action . "`nPosition: " . AH_Position . "`nWaiting Go Next: " . Autohunt.WaitingGoNext . "/3"
Portuguese := "Id: " . AH_ID . "`nDescri" Chr(231) Chr(227) "o: " . AH_Description . "`nA" Chr(231) Chr(227) "o: " . AH_Action . "`nPosi" Chr(231) Chr(227) "o: " . AH_Position . "`nEspera Pr" Chr(243) "ximo Passo: " . Autohunt.WaitingGoNext . "/30"
GuiControl, RunningSteps:, StepsGui, % %GlobalLanguage%
}
if InStr(AH_Action, "Click Map"){
pos := StrSplit(AH_Action, " ")
if (AH_Attack != "None"){
if (AH_Attack == "Walk"){
if (GetColorHex(Cords.Con.2+151,Cords.Con.3-114) != "#2fff2f"){
ControlClick % "x" Cords.Con.2+151+WindowInfo.ClassNN.x " y" Cords.Con.3-114+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
}
}
If (emptyBattle == False && isAttacking == False && AutoHunt.LastMonster == True && AH_Combo == "No") {
If (Ini.AutoHuntGlobalLoot.2 == 1)
Data.Loot := 1
}
If ((InI.HkAutoHuntStart.4 == False || AutoHunt.PlayerOnScreen == False || isAttacking == True) && AH_Attack == "Walk") {
If (AH_Combo != "No") {
If (Data.Combo == False && emptyBattle == False){
Data.Combo := True
Data.ComboSave := 1
Data.ComboRetarget := 1
Skills.LastUsed := 1
}
ComboGlobal()
Switch (AH_Combo) {
Case "FirstCombo":
Combo := Ini.FirstCombo
Data.ComboName := InI.HkCombo1.3
Data.ComboRetarget := InI.HkCombo1.5
Data.ComboLoot := InI.HkCombo1.6
Case "SecondCombo":
Combo := Ini.SecondCombo
Data.ComboName := InI.HkCombo2.3
Data.ComboRetarget := InI.HkCombo2.5
Data.ComboLoot := InI.HkCombo2.6
Case "ThirdCombo":
Combo := Ini.ThirdCombo
Data.ComboName := InI.HkCombo3.3
Data.ComboRetarget := InI.HkCombo3.5
Data.ComboLoot := InI.HkCombo3.6
}
Combo()
} Else {
If (isAttacking == False && emptyBattle == False) {
ControlClick % "x" Data.InfoMobs.1.X+WindowInfo.ClassNN.x " y"Data.InfoMobs.1.Y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
isAttacking := True
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
AutoHunt.LastMonster := True
}
}
}
If (emptyBattle == True && AutoHunt.LastMonster == True && AH_Combo == "No") {
If (Ini.AutoHuntGlobalLoot.2 == 1) {
Data.Loot := 1
AutoHunt.LastMonster := False
}
}
}
if (Data.Combo != True && Data.Loot != 1 && isAttacking == False){
WalkToMark := Trim(pos.3)
if (AH_Position == "Exact"){
SearchPNG(PNG.Mark[WalkToMark],AutoHunt.MapX, AutoHunt.MapY, AutoHunt.OffSetX, AutoHunt.OffSetY, Tole:=0, Erro, Mode:=1), AutoHunt.MarkCenter := Erro
} else {
SearchPNG(PNG.Mark[WalkToMark],AutoHunt.MapX-3, AutoHunt.MapY-3, AutoHunt.OffSetX+3, AutoHunt.OffSetY+3, Tole:=0, Erro, Mode:=1), AutoHunt.MarkCenter := Erro
}
if ((AH_Attack == "Walk" && emptyBattle == True) || AH_Attack != "Walk" || (InI.HkAutoHuntStart.4 == True && AutoHunt.PlayerOnScreen == True)){
if (AutoHunt.MarkCenter.1 != 0){
SearchPNG(PNG.Mark[WalkToMark],AutoHunt.1MapX, AutoHunt.1MapY, AutoHunt.2MapX, AutoHunt.2MapY, Tole:=0, Mark, Mode:=1)
if (Mark.1 = 0){
if (AutoHunt.ValidaX == Mark.2+WindowInfo.ClassNN.x && AutoHunt.ValidaY == Mark.3+WindowInfo.ClassNN.y){
if(AutoHunt.ValidaTentativas > 2){
if(emptyBattle == True && VersionType == "OTServer"){
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
Sleep, 10
ControlClick % "x" SQTLoot.8.x+WindowInfo.ClassNN.x " y" SQTLoot.8.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
Sleep, 10
ControlClick % "x" SQTLoot.4.x+WindowInfo.ClassNN.x " y" SQTLoot.4.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
Sleep, 10
ControlClick % "x" SQTLoot.2.x+WindowInfo.ClassNN.x " y" SQTLoot.2.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
Sleep, 10
ControlClick % "x" SQTLoot.6.x+WindowInfo.ClassNN.x " y" SQTLoot.6.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
Sleep, 10
} else {
AutoHunt.Trapped := True
}
AutoHunt.ValidaTentativas := 0
} else {
ControlClick % "x" Mark.2+WindowInfo.ClassNN.x " y" Mark.3+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
If (Ini.AutoHuntGlobalHaste.2 = 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1 && Data.Conditions.Haste != 1 && Data.Conditions.ProtectionZone != 1 && Timer.UtitoTempoSan != 1){
PressKey(Ini.AutoHuntGlobalHaste.3)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -400
}
Autohunt.WaitingGoNext++
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -1000
AutoHunt.ValidaTentativas += 1
}
} else {
AutoHunt.ValidaX := Mark.2+WindowInfo.ClassNN.x
AutoHunt.ValidaY := Mark.3+WindowInfo.ClassNN.y
if(AutoHunt.ValidaTentativas == 0){
ControlClick % "x" Mark.2+WindowInfo.ClassNN.x " y" Mark.3+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
If (Ini.AutoHuntGlobalHaste.2 = 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1 && Data.Conditions.Haste != 1 && Data.Conditions.ProtectionZone != 1 && Timer.UtitoTempoSan != 1){
PressKey(Ini.AutoHuntGlobalHaste.3)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -400
}
Autohunt.WaitingGoNext++
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -1000
}
AutoHunt.ValidaTentativas := 0
}
} else {
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed += 1
AutoHunt.ValidaTentativas := 0
}
} else {
if (AH_Wait != 0){
if ((InI.HkAutoHuntStart.4 == False && emptyBattle == False) || (InI.HkAutoHuntStart.4 == True && AutoHunt.PlayerOnScreen == False && emptyBattle == False)){
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, % "-" AH_Wait * 1000
}
} else {
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
}
if (AH_Attack == "Box"){
AutoHunt.BeforeLast   := AutoHunt.LastUsed
AutoHunt.ComboExecute := True
}
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed += 1
}
}
}
} Else If InStr(AH_Action, "Change Floor"){
pos := StrSplit(AH_Action, " ")
FindMark := Trim(pos.3)
SearchPNG(PNG.Mark[FindMark],AutoHunt.1MapX, AutoHunt.1MapY, AutoHunt.2MapX, AutoHunt.2MapY, Tole:=0, Mark, Mode:=1)
if (Mark.1 == 0){
SearchPNG(PNG.Mark[FindMark],AutoHunt.MapX, AutoHunt.MapY, AutoHunt.OffSetX, AutoHunt.OffSetY, Tole:=0, Erro, Mode:=1), AutoHunt.MarkCenter := Erro
if (AutoHunt.MarkCenter.1 == 0 && AH_Description != "Just Walk"){
switch (AH_Description){
case "Right Click":
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
case "Use Shovel":
PressKey(pos.5)
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
case "Use Rope":
PressKey(pos.5)
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
case "Exani Hur":
FocusClient()
Switch (AH_Position){
case "Up":
SendInput {Ctrl down}
Sleep, 10
SendInput {Up down}
Sleep, 10
SendInput {Up up}
Sleep, 10
SendInput {Ctrl up}
case "Down":
SendInput {Ctrl down}
Sleep, 10
SendInput {Down down}
Sleep, 10
SendInput {Down up}
Sleep, 10
SendInput {Ctrl up}
case "Left":
SendInput {Ctrl down}
Sleep, 10
SendInput {Left down}
Sleep, 10
SendInput {Left up}
Sleep, 10
SendInput {Ctrl up}
case "Right":
SendInput {Ctrl down}
Sleep, 10
SendInput {Right down}
Sleep, 10
SendInput {Right up}
Sleep, 10
SendInput {Ctrl up}
}
Sleep, 250
PressKey(pos.5)
}
} else {
ControlClick % "x" Mark.2+WindowInfo.ClassNN.x " y" Mark.3+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
if(Ini.AutoHuntGlobalHaste.2 = 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1 && Data.Conditions.Haste != 1 && Data.Conditions.ProtectionZone != 1 && Timer.UtitoTempoSan != 1){
PressKey(Ini.AutoHuntGlobalHaste.3)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -400
}
Autohunt.WaitingGoNext++
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -1000
}
} else {
NextStep()
}
} Else If InStr(AH_Action, "Walk"){
WalkDirection := StrSplit(AH_Action, " ")
Loop, % WalkDirection.2 {
Switch (AH_Position){
case "Up":
PressKey("Up")
case "Down":
PressKey("Down")
case "Left":
PressKey("Left")
case "Right":
PressKey("Right")
}
Sleep, 250
}
NextStep()
} Else If InStr(AH_Action, "Start Combo") {
ComboGlobal()
Switch (AH_Combo){
case "FirstCombo":
Combo := Ini.FirstCombo
Data.ComboName := InI.HkCombo1.3
Data.ComboRetarget := InI.HkCombo1.5
Data.ComboLoot := InI.HkCombo1.6
case "SecondCombo":
Combo := Ini.SecondCombo
Data.ComboName := InI.HkCombo2.3
Data.ComboRetarget := InI.HkCombo2.5
Data.ComboLoot := InI.HkCombo2.6
case "ThirdCombo":
Combo := Ini.ThirdCombo
Data.ComboName := InI.HkCombo3.3
Data.ComboRetarget := InI.HkCombo3.5
Data.ComboLoot := InI.HkCombo3.6
}
If ((InI.HkAutoHuntStart.4 == False && AutoHunt.MonsterQuantity >= AH_Monsters) || (Data.Combo == True && emptyBattle == False) || (InI.HkAutoHuntStart.4 == True && AutoHunt.PlayerOnScreen == False && AutoHunt.MonsterQuantity >= AH_Monsters)){
if(Data.Combo == False){
Data.Combo := True
Data.ComboSave := 1
Skills.LastUsed := 1
}
Combo()
} Else {
if(Ini.AutoHuntGlobalLoot.2 == 1){
Data.Loot := 1
}
Skills.LastUsed := 1
Data.Combo := False
AutoHunt.ComboExecute := False
}
} Else If InStr(AH_Action, "Right Click"){
switch (AH_Position){
case "Center":
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
case "Up":
ControlClick % "x" SQTLoot.8.x+WindowInfo.ClassNN.x " y" SQTLoot.8.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
case "Down":
ControlClick % "x" SQTLoot.4.x+WindowInfo.ClassNN.x " y" SQTLoot.4.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
case "Left":
ControlClick % "x" SQTLoot.2.x+WindowInfo.ClassNN.x " y" SQTLoot.2.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
case "Right":
ControlClick % "x" SQTLoot.6.x+WindowInfo.ClassNN.x " y" SQTLoot.6.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Right
}
NextStep()
} Else If InStr(AH_Action, "Go To Step"){
GoStepId := StrSplit(AH_Action, " ")
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed := GoStepId.4
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
} else if InStr(AH_Action, "Logout"){
if InStr(AH_Action, "After Battle"){
if(Data.Conditions.LogoutBlock == 0 && Macro == 1){
FileCreateDir, Screenshots
if(ErrorLevel == 0) {
PrintScreenData()
Gdip_SaveBitmapToFile(NewBitmap , A_WorkingDir . "\Screenshots\" . A_Now . "AutoHuntLogout.png")
}
FocusClient()
SendInput, {Ctrl Down}l{Ctrl Up}
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -2000
}
} else if InStr(AH_Action, "Close Client"){
FileCreateDir, Screenshots
if(ErrorLevel == 0) {
PrintScreenData()
Gdip_SaveBitmapToFile(NewBitmap , A_WorkingDir . "\Screenshots\" . A_Now . "AutoHuntLogout.png")
}
Process, Close, % WindowInfo.pID
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -2000
} else if InStr(AH_Action, "Play Beep"){
SoundBeep
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -1000
}
} else if InStr(AH_Action, "Wait"){
tempoEspera := AH_Position * 1000
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed += 1
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, % "-" tempoEspera
} Else If InStr(AH_Action, "Validate Ammo"){
ammoType := StrSplit(AH_Action, " ")
ammoQuantity := StrSplit(AH_Description, " ")
ammoStepId := StrSplit(AH_Position, " ")
if(ammoType.3 == "Quiver"){
ammoLeft := TibiaOCR(Cords.Con.2 + 100, Cords.Con.3 - 71)
} else if(ammoType.3 == "Ammo"){
ammoLeft := TibiaOCR(Cords.Con.2 + 100, Cords.Con.3 - 35)
}
if(ammoLeft <= ammoQuantity.2){
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed := ammoStepId.2
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
} else {
NextStep()
}
} Else If InStr(AH_Action, "Validate Potions"){
potionName := StrSplit(AH_Action, " ")
potionQuantity := StrSplit(AH_Description, " ")
potionStepId := StrSplit(AH_Position, " ")
OCRPotions()
if(Data.OCRPotions = "Nulo"){
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed := potionStepId.2
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
} else {
if(potionName.3 == "All"){
for k, v in Data.OCRPotions
if(v <= potionQuantity.2){
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed := potionStepId.2
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
return 1
}
if(AutoHunt.Waiting != True)
NextStep()
} else {
if(Data.OCRPotions[potionName.3] <= potionQuantity.2){
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed := potionStepId.2
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
} else {
NextStep()
}
}
}
} Else If InStr(AH_Action, "Left Click"){
switch (AH_Position){
case "Center":
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
case "Up":
ControlClick % "x" SQTLoot.8.x+WindowInfo.ClassNN.x " y" SQTLoot.8.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
case "Down":
ControlClick % "x" SQTLoot.4.x+WindowInfo.ClassNN.x " y" SQTLoot.4.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
case "Left":
ControlClick % "x" SQTLoot.2.x+WindowInfo.ClassNN.x " y" SQTLoot.2.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
case "Right":
ControlClick % "x" SQTLoot.6.x+WindowInfo.ClassNN.x " y" SQTLoot.6.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,Left
}
NextStep()
} Else If InStr(AH_Action, "Use Hotkey"){
PressKey(AH_Position)
NextStep()
} Else If InStr(AH_Action, "Rotate Char"){
FocusClient()
Switch (AH_Position){
case "Up":
SendInput {Ctrl down}
Sleep, 10
SendInput {Up down}
Sleep, 10
SendInput {Up up}
Sleep, 10
SendInput {Ctrl up}
case "Down":
SendInput {Ctrl down}
Sleep, 10
SendInput {Down down}
Sleep, 10
SendInput {Down up}
Sleep, 10
SendInput {Ctrl up}
case "Left":
SendInput {Ctrl down}
Sleep, 10
SendInput {Left down}
Sleep, 10
SendInput {Left up}
Sleep, 10
SendInput {Ctrl up}
case "Right":
SendInput {Ctrl down}
Sleep, 10
SendInput {Right down}
Sleep, 10
SendInput {Right up}
Sleep, 10
SendInput {Ctrl up}
}
NextStep()
} Else If InStr(AH_Action, "Drop Vials"){
DropVials()
NextStep()
}
}
}
NextStep(){
Autohunt.WaitingGoNext := 0
AutoHunt.LastUsed += 1
AutoHunt.Waiting := True
SetTimer, AutoHuntWaiting, -400
}
DropVials(){
PrintScreenData()
SearchPNG(PNG.FlaskMedium, Cords.SkillBarEnd.2, 0,WindowInfo.Client.w, WindowInfo.Client.h, Tole:=5 , Erro, Mode:=1)
if(Erro.1 == 0){
ControlClick % "x" Erro.2+WindowInfo.ClassNN.x " y" Erro.3+WindowInfo.ClassNN.y, ahk_id %WinID%,,,, D NA
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,,, U NA
Sleep, 300
PrintScreenData()
}
SearchPNG(PNG.FlaskLarge, Cords.SkillBarEnd.2, 0,WindowInfo.Client.w, WindowInfo.Client.h, Tole:=5 , Erro, Mode:=1)
if(Erro.1 == 0){
ControlClick % "x" Erro.2+WindowInfo.ClassNN.x " y" Erro.3+WindowInfo.ClassNN.y, ahk_id %WinID%,,,, D NA
ControlClick % "x" SQTLoot.9.x+WindowInfo.ClassNN.x " y" SQTLoot.9.y+WindowInfo.ClassNN.y, ahk_id %WinID%,,,, U NA
Sleep, 300
}
}
GetCoordenatesAutoHunt(){
SearchPNG(PNG.MapHunt, WindowInfo.Client.w-80, 0, WindowInfo.Client.w, WindowInfo.Client.h, Tole:=20, Erro, Mode:=1,1)
SP.MapHuntX := Erro.2, SP.MapHuntY := Erro.3
AutoHunt.1MapX := Erro.2-120
AutoHunt.1MapY := Erro.3-92
AutoHunt.2MapX := Erro.2-14
AutoHunt.2MapY := Erro.3+17
CrossCor := GetColorHex(SP.MapHuntX-67, SP.MapHuntY-39)
Cor1 := GetColorHex(SP.MapHuntX-64, SP.MapHuntY-38)
Cor2 := GetColorHex(SP.MapHuntX-67, SP.MapHuntY-35)
Cor3 := GetColorHex(SP.MapHuntX-68, SP.MapHuntY-38)
if(CrossCor == "#ffffff" || CrossCor == "#000000"){
if (CrossCor == Cor1 && CrossCor == Cor2 &&  CrossCor == Cor3){
AutoHunt.MapX := SP.MapHuntX-68
AutoHunt.MapY := SP.MapHuntY-39
} else if (CrossCor == Cor2 && CrossCor == Cor3){
AutoHunt.MapX := SP.MapHuntX-69
AutoHunt.MapY := SP.MapHuntY-39
} else if (CrossCor == Cor1 && CrossCor == Cor3){
AutoHunt.MapX := SP.MapHuntX-68
AutoHunt.MapY := SP.MapHuntY-40
}
}
AutoHunt.OffSetX := AutoHunt.MapX+3
AutoHunt.OffSetY := AutoHunt.MapY+3
AutoHunt.ZoomInX := Erro.2+7+WindowInfo.ClassNN.x
AutoHunt.ZoomInY := Erro.3-15+WindowInfo.ClassNN.y
AutoHunt.ZoomOutX := Erro.2+7+WindowInfo.ClassNN.x
AutoHunt.ZoomOutY := Erro.3-35+WindowInfo.ClassNN.y
}
ComboGlobal() {
If (Ini.AutoHuntGlobalCombo.2 == 1) {
If (AutoHunt.MonsterQuantity > Ini.AutoHuntGlobalCombo.4) {
AH_Monsters := Ini.AutoHuntGlobalCombo.4
AH_Combo := Ini.AutoHuntGlobalCombo.3
Data.ComboSave := 1
} Else If (AutoHunt.MonsterQuantity > 0 && AutoHunt.MonsterQuantity < Ini.AutoHuntGlobalCombo.6) {
If (Ini.AutoHuntGlobalCombo.5 == "Go To Next Step") {
Loop, % Data.InfoMobs.Length(){
If (Data.InfoMobs[A_Index].HP > Ini.AutoHuntGlobalCombo.7) {
AutoHunt.MonsterQuantity := 0
Skills.LastUsed := 1
Data.Combo := False
AutoHunt.ComboExecute := False
PressKey("Esc")
Break
}
}
} Else {
AH_Monsters := Ini.AutoHuntGlobalCombo.6
AH_Combo := Ini.AutoHuntGlobalCombo.5
Data.ComboSave := 1
}
}
}
}
LoadGDIplus()
InitialSettings()
VersionType := "OTServer"
global OBJGet
OBJGet := new classOBJ("SettingsOBJ.json")
FieldEmail := OBJGet.Config.Edit01
FieldPassword := OBJGet.Config.Edit02
If (OBJGet.Ling = "por")
GlobalLanguage := "Portuguese"
Else
GlobalLanguage := "Portuguese"
OBJGet.UID := CreateUIDKey()
GetUserDetail("Start")
PNG.XClose          := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABvSURBVEhLYzCmARg1lPqA7oZ29fTZ2jtBOUgAKAiUgnKwAXyGAjUvW7EazVysgmiAgPfRjCDGRCAgHKZwg4g0EQiIiiiIcUSaCAQDZCjERCAJZ0AlcAO6RxRWI4gxF5+hNEn8ZINRQ6kPaGCosTEAeNmPBGY4+RgAAAAASUVORK5CYII=")
PNG.HXClose         := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAB1SURBVEhL7dJBCoAgFIThbvfu4kG9i7ugXRA0IEiMokOmbYQfiWd9ULbtZp+3UB71Nx09vT+coyHCEFs0fFZD8fAVArnFIdV4fSIUEbW/aYJEEUkHFTlRRD+hUcSaLuiGvOkHVSQUt4YO+flft1Ae9TcANbsB3Xa5ri4MuhIAAAAASUVORK5CYII=")
PNG.Config          := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABoAAAAaCAIAAAAmKNuZAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEeSURBVEhL7ZNNagJBEIW9TXRnmAOEqORgykBygEFRiAkR4iKLoCQQAp7NT2soqqt7bAfiKj7eort+XlfV1HSKP8VVLkD/tri7H0IOWeTlqtni53cHOdSmZqTlKERquen23tcfIvf88sbVemMk5Aj93HzBcfkoQpYYxZtUbJDbfjsVRwLOlQOT8skmMzWdoJCAOjREQo4BadrydSXzEjtXdandIpCj/mo619nHOfYlvgzBruVAbjB60GiY3AzXNSm144hLyh2anS1ODMg2SxjBp5oVuAGpIgeu6nIvCRJywC/KdA6tpcWiUD9Lb5Njtv4roKtRiFG858oBQiWaAemX0ZVWb4y0nIVuRnJvHPJyFMJywaaKLPJyrfCP5IpiD0xMaL/B/C4ZAAAAAElFTkSuQmCC")
PNG.ConfigH         := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABoAAAAaCAIAAAAmKNuZAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGSSURBVEhLtZXfSgJBFMZ9ogi2q/5poVgPEP2DTJGkjCC86cWiROoNJNzNLiTcpQsv9C4l2oKmz5nTYTjuypJ6+IFz5jvft7ODsClH19LyyoyYnHEcmtWN7IyYxBR+1tLZuYAoE5ebCxS3nslNoVCqVK9qAAshCTguP4Vm8+lbFxZCElDcZiYvKJbPARZ7hye9Xu9HV6fzitZWBX9xWzs2xfLF+3AIbu/u1URh06gYE8bYuNHog9wxhYGkcaBeb5BPV6vlAmp0YUBYQHTc/lGBTEp1uz5a3kdLglK8z1BcenvXUDqrum673x+QQ3tYBfaTfN/HMCysyrjr2g3N6vK8NksMNknWBQtLC44rVy4x7fsBzSp1cHzKKkBLwvhlAwzDwqqMM9ieIHjjRCzQkjDxJBAdBxoPj2TS5XkvgBpdGBAWEB2H83+GIfliCgP2axpi48LwC4gzmsKmUZPGAYyaafu++B5ZFcTG2Ty36dawEJIgURwOgj8XiDyRTaK45CwgznwYhfAPEELfWZM4I+MUx/kF6Y80tOmMDPcAAAAASUVORK5CYII=")
PNG.Switch_Type1On  := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAACMAAAAUCAIAAACIxBMbAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAALiIAAC4iAari3ZIAAASISURBVEhLtZRdTFtlGMcP2EJLP+gXlHacdi3l0JZ+l55+f58CLbRQCnPMKTEjjLlN9MZwwRa9MfHCeDUvTLwxS0z0wsQQL3ahicnARXHAXIZ2FNhQIHwMVt3mDHt9Sut0ULor//nl5KQn5/n1ed/3PJj1QHQ6HS6V8hkMDp3OodFKwwXoNDaLxaxiMRhMDocjkUi1Wm2h1n/yjAkc7PJyLB8mCxOJMWENJiiKKIdYWqZSY7gCo9GYFfRqLpfNhgJl8DaNRt/n+9fU0KDMK8QvD3k+He++Ntc3s9j743zqIFO34ffjcyt96Q3yw0+0XT2hYCDZGetN9fSmkvHOmMNO8nk8KIXjeKH6U5NSoYAHFarm4LfTIwhdeIwurj8eW3kwtvqwKO/soLEsSr5/KWCz9Pjdx1LJVCrZ3Z1IdifA19//Yl9vSqNRQ836+vq8ImeCRYMlYxLNiZU/3kborczW2fTG2dtbh7D5+lJ2ZAsF3/3AeEScCAe6uhPRaFss2h6L7ZG7bwNl//Fj2j2ZRqPJmSxWq4DJLK+oCE2kxxA6l948ndkePpwzCzugSX51tVlNRN1kR2dHe1ukvb11H21tkUS8A7qsra2pqqqyWCwYNMTEsKNDb5xG6Pxi9tTC9uDCTgmGf300tIksr54h5dJ4ojMSCbe2UkWBR11dcbudZDAY0BamlMuZ5eW+8YlzCA1k7g8sZEszuIF6vs80O5xBix5qUVSoBO3R1lAoKBAIYLcwXMDjyZWJW+sjO+gU9FSSwTu/v5ZF0c+vaAiC8rmCwUAoVAqQhamQVCqtq6vD5Fy21GxzpLPU8m7g5+3nkL5PbSLtR581yfGIz+P3+wN+XwngrwAFk6pWpNA241Nr4oUnkpl7z+HGjuQuYn883iDDKZfd5/P4vKUIBP1ej7u2tlYmk2FqVUMDj6P8YkK+jRSzW4ob90qjXNwVfz1Xp9Z6NSqv3+v2uA7F7QqFg2aLqbqaRxAEptfrm2iY6s0LRx6h+ukNxezm0dmNEijmsrIlxO7s07MrwhHK4XQ4Xc4i5OKA4wBjAk4EWDCz2ayV1xNHJLqr89AW79oyfn2tFDPr8qUn/MtXeIxKj7oR9ookSTjK+4CABj4hFotFEI1g2ZsRRoOez9Z7fKHf/mzZRtWTS8yJJe53d6uLwZ28w5ta5c3/hQ2PMjDMqdP6/H5bLi17V0gLmAKBgNForKyslMtwo9FQmEYQvQFkLKM/GJ+8mXyIqFVkv7XZ8tO67SawcYB1MvPAtrwrPz8qfKFMLRG7HA6Px+PKxQ030BAcATqdLpPVm02mvKJggmlhMpssEmGTqsE3ejH15TcnfkifnF08OZ0pwvXcdeCXtRNLWcN7lyo0Bq5AKJFIcJkMdkUsFnO4XA6HpVY37hWGeZdLwZSPwWQiNYRFzFc3KrVery7SpqciuqKEKcAQjZEvvWKMd+FKRY1IKBTyRSJQipuIRpvN+rSbfJ4xQUwmEyyrxaAj1QRJKEhCWRq7WuXUN7vsNqeDdNhtdhK2yWo2m+AIFCr+k/2m/ytW69/AS9pOI8UeHgAAAABJRU5ErkJggg==")
PNG.Switch_Type1Off := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAACMAAAAUCAIAAACIxBMbAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAALiIAAC4iAari3ZIAAANvSURBVEhLtVXZctpAEMQPDhgZ22DKUIDEGYwEAqH7QugCAXYMhpBU8v8fkl5BKoljRF7S1bWlgtX0zkzvKCX9hX6/X61Wb25urq6uslkql8vhGev1P+Du7q5WqyGCKIrHcD/xhxJ2pDOZFHCRoqgsgqfTH/AMZDKZ62sqm4U65E8xi20XF+QFPHAcd4wb45dSo9HADpxckaWn1WK33XzevW7Wn2ZhIAijVquFc2DbmECI1/fB83yz2Uyn04hWr9cPwYGjEn7CH512a7d9/f7t6/7zdvu6ft28QO/LfgdJyzQYhu52u6PRCLESgA1yjHK5jJgMwxwkiBIOS2Q6ra9f9tvtZrWMlstotVoQLhd4fvn0tN/vbMtgaBqbBUEYJgJ6SE7TtEqlgmIeyphC69DtQqGwfnler5+jaLZczN9wEc1XqwhZjkbDRqMJpbNAZoisqupdPn97e4vnFM6I7kmSuNm8zGfhfH6Cs/DpeeX7HnrAD3iccSyKZzge65rGsixFUVhJ02BN152iSkHgh2ECgyia93q9x8dHRVFI7c+BbJOlYrHYaNRTKGWpVPJ9F4F8z02g57mLaDbo9zvtjqaqiKLI8hkqCrpF0zQuKFGCSdypg1hYEzidOqghy7FwvGEYEDsLyGBns9UkSqgesjNN3fOmzsROZhB4HWTU6ViWpWvowhnoum6aZrvdJpcVRYc3YBU0ybJMyz7JycS2JxZONxjwE3tiGsZZ2rYNMZgIFzEF+xfvi7Va1fNdw9BPUdc1GI/rcygAEnIga1nJBNAQWLDZbAwGA3KfIIiJxnEsfKGp6CHq+4aKjbQsEy597HZ9z4NSMpC+67pIPbZqF44nMwKlq9cZTCp+yHueh/oSX/2G+E0bRYZLA6Tmuo7jxBZ5lwTxNg/DgmV7PD+AynHuYWhirF1eXtI0A88gLnJHMw8PLMthTj88PODleTjzXVT6JEM/mAWhM5liTgx5bhjLAEel+HMy7vU+4tOQu8mVSmWaYWDLSqWazxeyFIUhFAbBQSa+Wu+Q/DX1HHuCgo+F0VgYYkDGkQmOSgegmoqCtrXL5Yf7+8J9IY+1VquIogCLGzq5r6oqx+u7lFVcV5kcWpJISse4Mf5QAiAGt2CIwBq6piC6aeCIuPCH95MoYxXJpwsDFusx4k+8VfpfkKQfXOiTNA+PrmoAAAAASUVORK5CYII=")
PNG.Switch_Type2On  := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAACMAAAAUCAYAAAAHpoRMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAUYSURBVEhLlZZZbFRVGMdvtQu0naXbdOjs+7Rzb2df2pnO0mU6XegUWYWAIFERNGrQNx/VGI2SgEZQNIFAFdwVl4AxMaBiBANljdBtmrYiYKEVCT7w9zvXaGyCcPvwe7k593y/+y33HM5qtYrY7XautraWq6ur43ier6Bnq9Vq9Z4ypfKYQiYbIXJSUTLk8pxCoRCRyxUjStqH9nuH7cv2d7lcYjyHw/EvM2TYApvNtk5BG93FceCIvKIi3C2TS0euQIGyHPnKMhTMmYO5RElJMYqL5yI/Px95eXmQyeQ5ivMQi3dLGafTWWgwGLYX0uICeqmqrQvuF19D6oMDaP/8kDS+/A6tn34D//Nb4MwuRGNTFOnWFnR2ZNCRaUcqmQDPuyCXy1BQUAC9Xr+dslM4Q4ZlRU8iRZQJmUYHz9Y+rBqYxBOj09g4PImNQ5fvyJPDV/DYzxewcNtOJNLt6E63YkF2PrKMnm6R3mwPFvRm0dbWAoNBLwpRAl6nRIgOohEJ3VdaVAilyYLEF4fx6MQNPD5wGY+cvyQNWrv+3CX0bNuFcDSKThLp7u5EV2fmlvTM7xIzZTQaqHzFoPgrxcyQlUxdrRqW0UP/W+9jw8Wb2DA4iYcpM1JZPzyFe78+ikA6g3QyTmVpp2Dp29LV1YHmVBKVlRVQqVRDVK5S1rArlHOKoO9dhuVjf2Ld8FU8MHRFMg+OTGEtCSWefg4Nfi8yFChNmZFCB0n/3UNyUJmWc0ajcW95aQkCb7yLtRduYs3gFNYMSef+3DUsPTIIT3cWqViD2A+trc2SYEKNjQ2oqChnvbOH02s0p6qNJrR8exarx25g5dD0rFg1eh2d+w5BCIbQkoqjuTkpmZaWFOLxJsybNw8ajeYkydRMaN0+tB4fx9KR37Fo8OqsWJz7A4ld++ASBBrdOJI0vlJJUc8wGRKBVqsd50w67bjR64ftxzHYz0zBfnJydpyZhubNj2Gvq0MyEUM80SSZRCKOWLRRzIxOpx/nLCbTCbPdDvOBEzCevQbjicnZcXoa6vcOQs/Xo6kxglgsKpl4PIZgMABVlQom8uDsNlufVaOG5ZXdMAzcgLH/8uw4dQXag+dRlWhDqJ5HlII00tdKoakpBqfTwUYbNNV9bLSXOgw62HqX0MZXoT1+CfpjF6XTT+vpnfKnnoFFU4MoBYlEwkTktjQ0RBAOh1FdrWLHAhvtJZzZbC4lu/O1ZiOELTvhGriO6qMTqCG0P0mEpNSfHYHCF0a9zUqBGhAKhW4LW0PjTFmpAv19z5FHCUe14qw262Kh1oE6N9V9736khq7BdHQMqsMjqPxeAodzqPxhFKWbd2NujQ48CbGvDgaDCAQCM/hHhonQ9YRE7KxEi5gHRw85ShM7ozZ5XE64fD5EX9qKe47nkD33GzKnf0X7qV/uDK1Ln5xAZFsfNNTMBhpXN30cE2BSDL/fD/rt0xFQifLyMrFfKO7LLD7z4HQ6nQh7QAu3+NwCPJQlPtOFyLObkHn7E8z/8ACx/8589BU6aW34hVdREU2iWKFEWVkZ9UW12KR00RKvD3qdFoLgYmKbWVz6x4jMkKG6sQwtc9cLZ0MkFeBr4aGvc/t9kvEE/PCGgvBRk/ICTyeymU5nPY2uAU4qiYf2pYydcdjty1g8Fvt/ZcxmC2exWOQktULgXTtIpt/nqR/1edw5yXjdOb/Xk/P7vCI+n3fU43H3CwK/g24JK+jKIDdbxDj/kdFyfwHhHDOzNuzWKwAAAABJRU5ErkJggg==")
PNG.Switch_Type2Off := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAACMAAAAUCAYAAAAHpoRMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAQFSURBVEhLnZbbbhpXFIbHtuxgF7AB2/jEcWCYgTkyg7EBAwZig43tWOohqlW1d+3TtFJ7V+UmN1HTp4mSVq3USm0cyX2M1X/tyFRpnGSGi18zwN7r//baa6+NlM/nhWRZlorFoqSqqqRpWgKfv9rY2Hgai8WeLS8vv4SuV1ZWhPg9iDDnZSwWf4Z4P3Fcjs8+7Me+twxvwJRKJalQKHwTjUavZ2ZmaG5ujhYXQ7S0tESh0D2an5+nhYUFvC/iu0X8drdCodBb4nmzs7NCDAifr9nvThhQLqRSqUdsGI1EqFLWqNM5oOHxEY2Gx3R/0KfG/h5VKhql02nKZrOEeVDOl3K5nJi3vr4OuHsCDp8fse8EhslAKaXwA4OkUylhfHl5QZcPzunBxdlElxfndHoyIs9zETwrDDAfZgz1fvE4FrzEvHg8DiD4pdM/sj/GSLf79iVvRTaTpuHwiM7PxnR6OoLx8C2Nxyd0Nj6lGoBujdhgGq2trVE4HOb3LxRFkbhOIkjd34lEgg4PuzQGxAhA79PJaCielUpZrPL/Jn6EJIhMobgJhf0XCjrMW3SFgiJdr9BodEzHRwNf4rHNZmOSGawssJAI2traEkCA+1zKZDI/JxJxajT26QgmA9SLL93vU7/fE0F5hRx4GslygVZXV/lAPJW2t7d/3dzcpE67TQME7/cOfakHDQY9KuPU8VZpqkZqSQ0mVRVAYCCc5F8Y5h/+0GkfUA81c9jt+Fa/1xUwyC6eZUIzC6yyVhZtAqf4RgLRDWeG95/7Srvd8q1ut00lbBMHY5hpxXWHGDcSUvyCG1Gt5gmDVqvpSwesg6YA4ZrRdR2nqxJIekWfwCDGC+4zTxhG01QEb4lC9qNmqyGaH58G3nvTNMk0jGDCHK4dXpCiFJ9wn/mM23QyuU579V3aR8vf26t/ULytObT5nZ2d1yBTyIJkZEVBzymVlE85M2EA/cndMJvNCJg6oHZ3a+8UjzEMneJoCZwV27bJsqxAchxHbFFBziNG6Q/0qo/EvQSYT0Ammg+nrF6vw3QX21CDvIlqtRqywiCmGMt77dhOYFUBYugGmqUsage96mPmEBclGg/+w6jfqapCsXhM3BlM7bquAGAxDGeAj/EtCAf1qlVyHR/COK/qijk6APhYm6bOz29fM8hv/p/BXfODYVRQB9sUiYSFaTKZ5LtD3LJ8qXGxM6hj2VTlVfJq8f4h2VwnyIaBwnVsE1AWx/leRkbuhEG6pLKmPbQs83fbMtBDCqKOMukUjl4eKdXIcx1kChnDSfI8rDagapBtW78hIw+VoiLK5J0wqB9+RkF9hWp/7Dj2c9d1Xnlu9dqtOtPqlWNbz03TeKyVtSt4RNmL9R+MLP0LF7i9KkcSADwAAAAASUVORK5CYII=")
PNG.ConfigTop       := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEdSURBVEhLxZPbSsNAEIb7NtY7JQ9QPOCDtRTqA4SEBDyg0F54IYqCCD6bn0wchtnduCuk/ZmL7By+7M7OzqoJdDjoyWm1OLvA+MhRFrRu+4/PL4yPwTWqJJRNyb6O5sfb3ZNAb+4eWNpoVHEoBc8vb9hyvRGcNZwSTXHT0Nd3x3JGQhkUrdbXFkE3tbNiJAypgeJQGqfFt/eP0kfxs9SQ+p08lBPVTac3E1ba/3FvJIdN8NDzyyutwaIz5PpAyRD41V6gP8dv+5HG2eOTRvLfxxe5ximXD5Yacv9TxaHIj1TTYdZTPFKciAdjEaH980Vhbr9iOCVaBkUUSA2N03vTh6DRqJJQK52h6ISFyoKyKYYRG9mdVRa0VBNAq+obpHVE48t3/HoAAAAASUVORK5CYII=")
PNG.ConfigHTop      := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFhSURBVEhLvZJbT8JAEIX9fSgJFvFCNUYf/E9GUeM7BloxGtpqvMUHA0FuveFv8didTJZtt2kT9Mt52Jkzc9huWDP/gN/Q2kopHFrfbR4cQzhQR0/R0PZNZzKdQThQS09eqNHYg3CobNSeX15ncx+6f+ijlN002lCj0fwcDKHTs9bcDxShKVyM0YJEXuhgOPKDMEcYKBcKzluXQRixOl0bkjsYoNFltKGV6iYv9x0PJfdRssV9mYzQ+rbZtXpv7x9hFAspmyjZclwPw1ghLyEj9PDoJIoXLMvukSGBpjyDFTIS/it0a2cfO477yDvrVYO8BJRsYQzDWCEvISNUgM148S3kek+ciwNKtpTfE2hDwcXVNS9Dln0HyR0M0Ogy2lB80Wg8kSPSwoDy4YK80K/xFFLuK4SmcMuFAiyIHfkd+X3ZTZMXKmPf0mviQC09RUNxKfwZId3tZIqGloJCV4xp/gDaICkFSkrvawAAAABJRU5ErkJggg==")
PNG.Config20x20     := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEJSURBVDhPpZJNCsJADIU9TPfqUsS1RfRSSkEPUCoW/EFBFy5EURDBs/nVlDSdduiij7eYSd6bSSbTCVrAax4MR+NwClnkoQq85nidvj9fyCIPVVAyc4nc0+31z5ermLf7I1ubVRRmErf7E86jpdgsCUrW+svmx8vxOERQbwaLaGWldKudCxHk0j8KM42paHc4SZ8SZ6spjYPMTCVxstEXchTAnsv7IZbiM3M4mWkO1s7GqR8LwdbmrOx16msM2LKRIS7KFjiNqZ8FW03ZcwszcEeVbKCNeEdFJXwgK62y4YdB534hQcnWmwEJydGYvp9+GM0qSmYLnU3t5AReM5cwTOjcZuE1NyMIfv5dpAYwA3u0AAAAAElFTkSuQmCC")
PNG.ConfigH20x20    := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGHSURBVDhPpZTZSkJhFEbPw1gQUlSWhmnXjWCWDVZEXfROUVZ0X6RWFKlFE12EYs5Tz9I6btn+nQaCZIH/3t+3POcgarnaL3f/4Igv+Ecoi2XLDEMjfvB4x5XQwkp0Yxs4yEY6gvhWn3tgeNQveLwB5eT0rFgqAwfZaE1AtOw78QaEcGQVOEzOhO4fHsuVKlxd3zCaaQdfsC23CUeir9kc7O7FKtWaA5aSUlPFGh2bUDmby1dr9V+goDJiV4b92GGt3lDO4kkwNxS0/Ememp3X0k0qw6h7Ro1035EXltbiiYun55d6oynQYK8wapRKZyijsLflza2dRrOlJJIXqikszQ4Ky3/Li8vrZKn0rWbTc2HVgFEjapRR2NuyNpqtdyGduVOfA6NG5ud2ZTg4OtYSJJKXYG4omP2uzJ3kC0Wz+hUKcsPCJ/mtUALH9QWWkn4vA4Fk5nPq82uqWPwyzVlJnneeloMjEhCtnp5e/kQcAXARvkxwXE1AQbT/SXj76frfQhnF5XJ9AOCkE/7Lgx6fAAAAAElFTkSuQmCC")
PNG.DiscordLogo     := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAH8AAAAbCAYAAABV2FBfAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMRSURBVGhD7ZrdT5JxFMf5U0oByRB9QFRQBNRSecvIAGloLFjYkNRetLQXX1dra23ddFWrq+qirXXT69ZqXbVet7bWP3N6zs945JGf+jyG8Ns8F58B5xzOj53vj+f3agAAQmD6j16A7OwbKCz/gInFr//H0jf2mio8kVODgdsgIQaevjGYvvlnV8DOxG2UEIP0uRdc4SoFt1FCDNLnqyB+nbEBrE02kOx2cDgcxC6DdcZ6Y93r6k1gNBq5jE0944pWKZjwkkSi1wLsBFj/+voaiY89kPfDiOqA9d+/yb9/K/HPrvyE5JlHkJl5xd7nFz5Dbv4jm83jZC418RgSufvc7xYx2OlRX1Ow/vvq9ImPS7X2riFotndDW2cYWhw+MDccYN9psFjB6QqCvf0w87u8x+Wl4ltuHgPvBxHVRY/4k6u/ZIEPMr/JtPl8AWm02tlrqytQlgch8QVAj/j4KOfFbkf20ruyXCS+AOgRv6M7yo3djvDIUlkuEl8AtIo/deO3PLY3qmKCsWvg7c+U2EwQiF2RbadKbEaQnL2qXAiJLwBaxU9PP1f5I8lVxYfjOtoGh+cUW4vDWxJvYnv7RR9C4guAVvHDI8sq/1DqluJzukPMFoovKDap1a+KxwOiog8h8QVAq/jrj/L1+GD8OvSG8spns9kCkROr4BsoHQrWGMk9UOUj8QVAq/huf+KfzwQdnqj8Oa6K34inb1QZDpBj6buqfCS+AGgV//Tce9U47vLFIDn+EEKJRXD74mzjBztEJLkC0bHb0NZ1RIlFe2HpuyofiS8AWsVHcMY/OHwZbFIX28TZ6C+C4zvu+uEsP3ryDjeGtndrzE62dysFHezUmJ0e7FSCtSNd+vfXhO2OdHFdzxOtUqguc9AQUB2wzlhvrPtWlzkyF19yRdNDfvEL146org0RYjEQneWKpgcU/1BkEsavfirzcRslxCGWvVcmml78gXG2MsBLHqV2boOEWEjOHrZ9i5c0dNMZlpd7PWwYaWp2QW7+A4m/F8EOYGm0QWbmNYm/F8EOgPv/o4Wn8BeatZjoES/4dQAAAABJRU5ErkJggg==")
PNG.16x16Logo       := BitmapFromBase64(0,1,"")
PNG.32x32Logo   := BitmapFromBase64(0,1,"")
PNG.LoggingIn       := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAGQAAAAPCAYAAAAS0WrNAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAOwwAADsMBx2+oZAAAAb1JREFUWEftlIttwlAQBFOM66IgCqIRGqEDoksy0mh1z9jYCCNlpFXEed/nbu18Xa/Xe1F/p2k6pOB8PrfPX6XL5fJz7u12a5+/Qv+BzOg/kIPpIwLBD91lT6fT39Nf6s0enVProZ6VF/CAvxDw3lDn4ysxWMj19lpdIHk/s0dwqwKZA0+Gkfgch9GBD7pARuDLMJItgXQsmeOcFgfixvwGAuvZr8DjJvC5Nhp01h75uj3B/fmO3jP1KJDRntSe0eJAeJvrkq47qDlfntM1W3LD1MDDgzwHyuuvNf+NwZZAvGd372e0OBDIBvIikL48Z3Ru1xh4T8hzoOrdXp0vn6FHgdg7d9YaffwXkgOFqr/6C7F3VF+rxYHgK9wcsN4+PL4sPtc8FJO1zudaVwf35zvmeuutgYzwZebA47fS8OV4MNSMa/jAw4McKFD3Fww+I9dbWwLxHDijq5U8m1WBlNLvAaMMpX6zLv0eTg2gaxjcBLg2qjsU+oFcb70lEIp7yYHVBahDNVm/3QA1r88X4VnBaKi+4xG0eyButqMLqcMhbZFfkGSv0PfU7oGURqF0b2PHXmGgLpQjhjFN0/0bgUpCQqn9jFYAAAAASUVORK5CYII=")
PNG.TibiaCoins      := BitmapFromBase64(0,1,"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")
PNG.Logo30x30       := BitmapFromBase64(0,1,"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")
PNG.CharMoldura     := BitmapFromBase64(0,1,"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")
PNG.BarHP := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAAGYAAAAJCAIAAABPH866AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABVSURBVEhLY1BQUh1FJCFQkE3Q0xtFRCJokC03Nh5FRCJokB1wcBhFRCJokN329x9FRCJokH1MTBxFRCJokP0vLBxFRCJYkNXWjiIiETTIRhEJSEkVALfeWI8l+tb6AAAAAElFTkSuQmCC")
PNG.BarMP := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAAGYAAAAJCAIAAABPH866AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABWSURBVEhLY1BQUh1FJCFQkOnrThxFRCJokJkZLx9FRCJokDk7HBhFRCJokAUH3BpFRCJokKUmfRhFRCJokJUU/h9FRCJokDXU/h9FRCJokI0iEpCSKgACWWDDFfY5XwAAAABJRU5ErkJggg==")
Base64 := ""
Base64 .= ""
Base64 .= ""
Base64 .= ""
Base64 .= "+NiotNMW9CEN3gHQtBEeygLu9Ik45UnzerzPACvl6Tv9QRfBT39wT5EPL5MX4KYu6mByGlCmdfOi6f+ZXSv6dLK5uWF8uHhoJ/I5z86GJ9cO2n7ag2tbfPUeEndwdDCnjeiNfMCcMgCiA/KBFR+AGuVJC2JTEvAMXkCaPpr+tG7yorwvKL4PQTnqg4IPHlskNaQfEOnRLgdzP5cOaMcRRuqlPnzq9AV5xHlFf3ecP9OU2z84CfmpcviNAfOBZgdyLGZ+MAEg8xehr27kyO5MjlrgKTvNwmYowI/1auBc435rPoAFGE/2pOTjsyk79z3cmaOWfK69LYp7g68h4u4wH/lGv22S8h1xs55zecFH61crPL/AQ+KZs+JaB1Rcli+dje4Sov38bxPZWN28kQpxTRp/JmJTkx9b8GQQPnHcQ4A76fSF37XtjpXb6/XQymCpAm2Rli1VgK3XPnXIZHeHTCgZmLekP57VUqiyimSo+XEgB8T5M9BkV4GMdvAdcydexuKJiH+A4k5JfkKXRYk/OPGtcvrFd8uxxONpALcMp1iGlSZ0IVzsKZfNoUo5NdFjH9A6r2B+cnRC/k/Ppd6tbF7VOgAAAABJRU5ErkJggg=="
PNG.SplitLootInfo := BitmapFromBase64(0,1,Base64), Base64:=""
PNG.Tibia         := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAEoAAABGCAIAAADkcJVdAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAxHSURBVGhD7ZpNqFvHFYAvBmMZg7kYg68phovxRrvelv7IO/Vno6WgG1FaojRuEbQ0aFftqk1Bm1BEW2MF2lp2XVd1gqM8N3FkJzFKvHnQJNXKQd0UtRAQ/pV/urj9zpzR6D5J7z3p+b2XOvhwEHNnzsycb86ZmXuf7Z34QstzvCXFWyu29nOS7ZxeecqFXK+dr+ajbiNqVjNaiVij3ZXtmVUB4IkHRdFeFPdzcVyL43o8qox6WZo+F8JtmBK/y9kIhjguxXFTfi1bW/B4HOXQ4apE0vbZLXna+fCYPMR1omTYavEgFw8LBszgDfPxkBp+s3E72GXCbcAbdiOJj/AAU4gHkcEjeiaSwmbwqG8HjfyuEj7VTDjaKBs2G7q6pCUbTx7HtMKWFbZeAF6/6j8DeLiIFHO5QZe4seU0ViYzUcXjVzNT2VbDUTMY1i2ejoDogDskS4+uPpWLxXwmw7mfyEOzzSCxyUn0aiZ6+bgfjjrhsJaGDUICzgiDwaDf71eqVR1wVux8TyfLjcKsRAyfGo06l5shyU8yExip0egpm8nMvmGrZIdViV67VlY2BpGhms1Wu4W2Ox2UAvWlUmlbCJcYgvlqlUqn211d7a12O6PV2mi1bAIFG6qnCI/cBKRlwWRjmrgJXjXoFyIg28U0AODV6sJGmdF4HA6HsREKvd4q9RpYO/dWZdH+zERCdjod5mb5+636oF2XG1wyU9JS02/Uzsgl0ZctB9uwFA1K6WEzICfjahaDRikLD+MUy2XixmIRRpBURvEIhZYwamyfknAJPFYUHQ4H3UZ1ODBskn6FYTfNeQgGAHE9RxJSHlTSwPBI5agoj6NyphSlWCPw8LtYKsGAJPFUqGm2SNlmuVLZPTzcMnmFNwMCGA8baL9RWi1Go1IkJK1S3K6INosKFtfzcbMghKWISIZm60JVKBbBM3QdDWCfkA36pAaPmpngYbx7eExMwrDrcAJ/IBRtNnq1wgSs47QqSg1NQFazg3KGtzLOW3Iym8vlCwUwoNMTBeURJM1J+DErhUFb7pGtEy6BZw+6Rl29gVa1xSlaK4xaFdQQCpU8NoqDah4VvHpO8bLpNIOAh3K6wKB5qGDUkJCwQY9ZyfcGoVcNUlsmXAJPFr5RZ24mRnFFTz9cJBS8VZOl7Xx61JRIQqWPw7qJbT3PhgQv4/scKrBFmQz5CYxT6hmHpnQUUeZuKHI9hl4v7ZX8Lb7rLNGHCbgY4MmZ1IJTl1l/A99vFbNETPEkgM2SlDtSAA9UwfM8uiuDxtApwFSqso4SZ/B8b5T2ViV+ItaVhWW5DkzA0ScwYRim06p4g8fU4JBJTpOiqlqW6OXYSMIGIZbGno4gJalQ6lkvvokxBg8wAjhIeWzCVrR0li6NR4q6FHKE+kgC8XGkASQ5KSikPOq5YjyGUJGUcEoZnAQhh7EnOVue1/O9nid43dzSXxvLh9vzON8JFC5qRqmvQJKf+FQOvNUKd3rJJmqnwmPBF7aacbebSVGGTVXjr8pQkgi+zxSsgi4HXaRjlCK9dxwPYQ7WlYn5zaVSuELc1CdqVrOpuufV06lqFKLkpDqqbG2+D6ty3GsYta8q4sbRNGY0VCFZFF4Y2N5LEW4FD2EOzmtyBhL8wBt8QmEYlHzSqWtIaKVGaMdsNPULKck3Xx5pBUC7w8Yv6yWZaRKBkRWyFUhmkue8RewGHsI0vdAnDnzBgUqgckGAu93AG1Z8OQ/MnoFTVQ6Jkg8bBnLcmyXQxHOE/HLXWTzfJ6VJdRLB3jcmz3cPDyTODO43ubvbFb4GSCSc5qaCRL/uVOVTqOIDZk/CUMyI3iweX/P8Mo6GkSXjU0NeDMxr0C4lpwoztcoFvox4yWRddW72CZGR+KQlkoqkAbT149SFjaTFHhhNTkLn8JRQ8YieHMVtbJdz+KnwEObjfQWloHPzy0sGroMhPClJUVWFBCzJ5kJHHrLHeNT9poTkJ4Q6OKKTLi5Pi4fMTswjPrEnFUNVDxiUbEQBUzYA+FDqFLx+TrYxbK4JPJiJ4dT4i8s24M0VHGqXg35T/hQ/6mVV+dKdlLsROmjxohPEtdQwP2HTJaDwf41HTISQL92qJ1pOqNZUPVqJG2cjuw4YkDTUikcAweOAYbStEe4UHoJD+OccVdUd5VQrMcAMKpJZN6cGkCawgUul0n6w3JmpsuN47jjRsEwp9U4xc8cPeDCj7EwR3mSCyA+Xu/SQHcRD8AYGnOb8FA29UZRQrkdz+0+drqAqHpnJiSpXhsHzwqUDuON4GkAhNF9uU3iWcC0eK0JmcgHa0AE21iAqLEW4s3gI3uCo3IEuhuZyt5oIHWC8AMh3nXkRg03oNGiK54fL5ueipteuXbt58+aHH3zQ7XZv3Ljx/nvvv/fuu9evX+90Ou9cfefq22+/9be3Ll26ZK3XCg5xivJFo8q7P18V/GoB1Xr5yAjkCOUmsDkZZlOZsuAZ5YBJ+cv9M+iiprD9dzNZefNNaz0j4q0cEDkNBV4GfmjU91NG1UJkvNOiYipXE+VNll5U+iGEWNhBF5BFTYkbAA8fPvzHp//57ssXMz85l9TRaERr+403rPU6gmdBvhEWWvziNwBKK65LJopKiOCBLVNWvAmbhE7NFnV7UTtyUvGQTz7993d+fuGbP/6jU/CePHly+fJla72O4FY6nQuzJVUbFrLOj0xYxG8iSVS1XlTh3RIsGcBF7dhvSbxv/+zcN176vdMHDx6A9/prr1vr9QXPokyGLA3Cgir3dSIskqjYICyEtIY5VOElsONVsMNtJovacZYo3ie3Bt/66dmv/+jVib746v379x8/fvzaOkfLlKj3YZBRMKc2PmPXrY3iTcKrut14nJOK99KvLn/txTNrtHjm3r174P211bLWmwn+ERzfz6omvBexRsYs5WWsTvDW2Gwsi9pxB4D32fDOV184bfR3aKvzMUrh7t27jx49al28aK03E/wL/QKaCcv8+qkcALORUbN0UHQ2O5Wc3G/g9f/12Vd++FvVVucjcpK4Xbz69zt37oB38cKfrfVmon7nM7VSrjEhnHGdMjbozCpsNx53tyZn7uU/RD+of+8X55WNuMF2+/Zt8C6c/5O13kzwj5goHgUXGUM4B09tVKdsNpZF7XgvAQ+G7kf9L3//1y/88i+clo4Qgfz8uXPWejMRPA7GVAG1Tq+Dh4HGLWm2/Xi8c4GHcAF8+PE/K7+5wlkCrQpsSPPsWWu9gOAiJ2fyaJnFQ8QseQLZQ2i78a5cucI7F+8l3N3cb9wBnJOcJew3cpK4wXbm9GlrvZjg5azYtoTYhoTYhgVkCdNnUZ7jPcvyHO9Zlmm848ePh2F47NixL60vtGKDZdI+WTlXNhh5bt8FR97YbA7eqRX9310TubWyciu+9cpJzmQapYBPjKX23slXtHVjJ5jeWI5Fx5sZ0AmPG7Q62dhsfvSOHj3q+hw6dOjIkSP05NdVUsZdZ2/Wbt01TrBJ38OHD9P91MrKqQSeG9CJdFm/1cnGZvPxsHN9Dhw44Ps+Ph08eNBVUqaGscBmLbBHKPColfw6WgqegQOIjrpeCMO6ASlTo321O4+z0zGUipslacbIVCqIynw8xnJ99u7d68q2cMrmGFWM6FrpRcnKyilomT4ROgnXvn37dL3wmLLrK+VE6upCzE6nK5icZWJmVgEDS2JkGk8FozUTj8umMN4242RzraBCmFwaxmGxcEiMje3+/fvHFGv66shQSUjXjDw9HeMTseQsrrAVvDnRO+nt2bOHeh7MBrKVuC5FK1KDE4RORhPnxFZDNztg0gCZGjk5Ha1TszizreAx9BxvRMYeuUpXISWpgYTQSfTGNiyB+Dc74LgvGLMLZ2RsMTOLM9sWvPGEk2nGrc5KmqSk8xFAwih1Y4C1A7qCNEvrmpFt86RyZhZXtSje1HonhpSC3IJGrDdrJxQRE6nRo4ztx6ySkxiOhebkwkl53FuJ3J5PTmcqp2dxg2x+cqrogYtDSYFThUVSodLsFBHblhBa9azXw5My0yNmMBHbMyG2wfcxY3yt1LkQ6rUGsXMkhFadzjIYmY+nxx3WSVHnEDJNhUpbOnzYtiWEVg0dAyohMXRdkn2dLNiK2DkSQqubzsl8PL39cCgpdJ4S22DEViWESgZhqKkxXetcmW3VGsQ+G7FVCaEyOZ3KfLwvjHyh8U6c+B/nFx0yARBBdAAAAABJRU5ErkJggg==")
PNG.TibiaH        := BitmapFromBase64(0,1,"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")
PNG.on            := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHhSURBVChTNdFPSBRRHAfwb2hdAr3UUbqJIK126LKgV9FD4JIHN1mioJYi/2FRh7aC7FInDdpDQmm5Y4dc7LK4dGhzGBlnZndm3mz/7I9IEuS6rUKMufLr93Tk8YHHfL/vzXszMAwDmqbBtEz4Ff9yZaXy1n0vSkIVGzx/55f9fpntdUwTWFzU4BW9o9VydWH6RYq6+7spHA9T+EqYIsMRUmZmaLe8a3med1zjLsy8iZ31HWMoMUQ4DcJt9pJNszusDTTyYISqpepnwzIOYev31oXk4yThFIfPmcmW2VeWZ5OMFz2dmKDNX5vXsVpY1ZsiTYQbHNhsnfmBEhPsFqj1fCutibVPmJua+1vbWbu/07egeDDk/AfjrK6vjrKvs9tIJVN+TVfN/oLvQelgbLMVNgWqj9XT7OTsP+TSOauhs4FwlwOHyWPIRbK8wTx2D9QYbST1jboMsSSuxi/FCV0cyC8j7yGPIXd2g2c9oIHhAcov5BMofihi/tX8x/Yz7YSzHD4MStIjFgV19HVQRsn8dIV7BAW7IH/cMb683Xuul5p7munktRC1DLZQKBqi2MUYpZ+lv9i2fcJxHUDXdTiOs/cmNaveVJ4oS2P3x/6Mj45XlKRi5TK5hPDEYdd1uavjP1AjPMoX19vbAAAAAElFTkSuQmCC")
PNG.off           := BitmapFromBase64(0,0,"iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAH6SURBVChTbZHdS1NxGMeftKygorqs/oHAKy9CWiQrKISQCFaES7sxLOhtE5kXDqUx6KroDY2wdHfdWENMmLg5z846L2077uUc0WMRWjO1xekVnH17zvSyiw/nx8Pn+z3POT9SVbWCkBBobnbu4LpV7lp9v/p62VweW/u6dm9poXgsISZIUeSKtyGLAlkrVruZM/8Ggr3obGuBr7UZAV8HpuIiyt/KIUmRSJZlIjEpUmmp1DwVFXHk0F64qwn3txEeM7e2EhqqCE/7H4HfFk5KSSJDN3YbGRMnqrfAx0J8OyHLFHYQJH72c/Aol4y8GkXxY7GJrM/WVa/nBpp4KLCwwOL3nYSfzBc+azzzclHraQdKZmmC5t/ND7qc9ejiod1ssbi+yW/mA4ee1xDa9u3B5MTbRdJiWqjRWQf/fwJ/NgMvOHCFA6PDkU80k5q5eb7FBTfvaq+0yMIPFn8xK3y2S7q5zF1Xi1QkFSe9oO8fejCE2gNVCHJIZMFgcZZJ8dle5xx/X7e/Bxkpc4GyuSxpstbuvd6BU7tq0MltfRx8xtxh7N98+aILsZHJWC6fI75BhfJ6nlRB9QX8QZxtPIlrjnp4nA24dNyB2x4vxofHw3ZxOp3euGk7VDAKNJ2ZPhwNR+8OPglF+h4OxN68HBuQE/IZ3dArsqIo9A83mkEpwvLgFgAAAABJRU5ErkJggg==")
PNG.A1            := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAbCAIAAADK2onUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADxSURBVDhPhZJbDsFAFIbtQ0SlqnQGY9AoIWIfRIhIXJbi8oS1tIlaQ5OmT92L086gmGm/x/NlMufy59pyDISlutkk+YIi1pTSoqJKdVnTN9udphsCjRAejSdBEAg0IQSqd9cNw/BXU9oultTL9QZOoLVKdbFcMQd8aYzrVn/o+z6XSU1IS9V023a4iflopVQ+HM+8/ILril6bzua8liDSuN7omD3P83gtQaRhee9JfuCvu6YlfZ3xd9x41PnxJOkcYHM7jmRuAMHWBiPx1hiw8+VqzeW/zrgYwO7tug+xBtLSwoiztpfqjKQCaTlnGAg/AfZQOq2MSQGYAAAAAElFTkSuQmCC")
PNG.A2            := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAbCAIAAADK2onUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADgSURBVDhPY9DS1jHGDRikZRX09Q2gPAwAkpZXUDYyMoIKoAIGVXWtrOwcFVV1qAAqAElfv37dzsFJG5sjQNJ3797dt38/kGFggO4IqDQQTJs+Q14R6AioBAQgpIEgKTlVVU0DKgMGKNJXr161tLLV1tGFSqJJA8GuXbuVVdUNDAyxSwNBb98EBUUVnNJAEBuXoKauiVP60qVLxqYWOrp62KWBAORPBWWcuk3McOsG2w0KACzSff24Xb57N25/Ewi15JQ0nGGOL8bwxTcktWBNsiBpfGmNQEolkM7x5RJjYwDKwzqf7EromgAAAABJRU5ErkJggg==")
PNG.AH1           := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAbCAIAAADK2onUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADoSURBVDhPjdJLDsFAGMBx9xAhEURnMMaF0BCjcQevpFgQd6mFx6ZOwoIztN3Up/NplWn5L+eXpvP4Mq3kNEITudFg2VxBzZzzfKGYyEIYtn0uVTQFE0LXm63v+wpmjAlj5LqugjlvtTv67X4HU7AYGvv9QRoUY0prprlECYqYsWZ/IBzHQQmKuKv3LpcrLr9CLleqlrXDtbeeTGv18XSGC/GeDJcXnuQj/HoyneNCvD/+HWw8deeQPLe86rCIIQK3tlihBMUYgjs/HE+I3/zjxSD53p7nqRlKmxZZ2qxBPyYVSptzmUboA1tMdLhnalFPAAAAAElFTkSuQmCC")
PNG.AH2           := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAbCAIAAADK2onUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADTSURBVDhPY9DS1jHGDRikZRX09Q2gPAwAkpZXUDYyMoIKoAIGVXWtgwcPZWZmQwVQAUj6////ff0TtbE5Air98+fPzOxcAwN0R0ClgeDps2cJiclobkBIA8HOnbsys1AcgSINBO3tndo6ulBJTOkfP36kZWQaGBhilwaCBw8eJiWn4pQGgi1btqqpa+KUBoK6+kYdXT2c0kB/AgMbp3RDUzNO3WC7NbDbjc/lwMDH5298obZr9x6cYY4vxgjENzC1YE2yIGl8aY1ASiWQzvHlEmNjADE8dKdcFZ+DAAAAAElFTkSuQmCC")
PNG.DBug          := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFqSURBVEhLYzCmARg1FDtobWtLSEqGsyEMoAicjQfgcync3OKSUrgIhIEf4DPUIsbJrMPVbIGn6SovsyWepjM9HCcFmGc6QaVxA5yGmlW7mK/zs90U5rg1ymlbjNO2aPstEdZN3hDZnNy8CRMmAkkIFw1gN9Q82cl8XaD91mjnHQmuO5PddiW77kyy6w4ODY+cMGECmJwIVYoNYDfUZKKn9eZIh+0JjjsSIchuW5xVuEtjU9P06dOBJFQdDoDdUP1p7ibzA80WBsOR4Tw/GxfHqVOnAg2dPHkyOS7VnetlvDzIZEUwHOkv9rFxdpwyhQJDDfrcjdYGGq0LgiPdld5mYfYUed80zlFnpbfeal840l7uodVoGxpBQUQBgWGxo9YyN+0V7hCkucxVZYGtVqmFpYc9UJacJAUBCXXpJu1uWrOdNJc4a8110ppk7zQlQD/REiqNG+AzlPrZFG4ihA1hUKFAIRuMaEONjQG5Z8KdSLjInAAAAABJRU5ErkJggg==")
PNG.DBugH         := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAIAAABc9GulAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFwSURBVEhLY4imAQAZGkBVMDwMbW1rS0hKhrMhDKAInI0LEHAp3NziklK4CISBBxAw1CLGyazD1WyBp+kqL7MlnqYzPRwnBZhnOkGlcQB8hppVu5iv87PdFOa4NcppW4zTtmj7LRHWTd4Q2ZzcvAkTJgJJCBcZ4DTUPNnJfF2g/dZo5x0JrjuT3XYlu+5MsusODg2PnDBhApicCFWKAXAaajLR03pzpMP2BMcdiRBkty3OKtylsalp+vTpQBKqDhvAaaj+NHeT+YFmC4PhyHCen42L49SpU4GGTp48mRyX6s71Ml4eZLIiGI70F/vYODtOmUKBoQZ97kZrA43WBcGR7kpvszB7irxvGueos9Jbb7UvHGkv99BqtA2NoCCigMCw2FFrmZv2CncI0lzmqrLAVqvUwtLDHihLTpKCgIS6dJN2N63ZTppLnLXmOmlNsneaEqCfaAmVxgEIGEr9bAo3EcKGMKhQoJAHhpyhVAbR0QDuEHU7V+jIygAAAABJRU5ErkJggg==")
PNG.LockClosed    := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABIAAAAYCAIAAAB4NzpmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFpSURBVDhPvZI/S8NQFMWzuYk6KAoOQkKaFkOpDYLRRmvr30EjiFSLiHWyQ0E/hLuDIhYHwUFw6pBBFPUzKCJ+Bf0Igp54X+vr9dVABy9nePec80sgeZrePIZhjExMuYsr2dVNCAesMEVcnyYsbie9pUJ+fYcJJiJR+p4fzIxZeDwDGkKEgqjKmDu3TI3pta3UWMa04hAOWMlHQVQbGBqU5QulRDJFJg1WmJSiRqbA7PQoBe6CT448MClFjRyBpTNZCpzJGXLkgUkpauQIzPFyAvNy5MjzO/1/bK/Y/3zR8/nQESnUUA6xcWfo447HfwhlINpBuY8FkQKiHe73Mhe6PzPLFX+34t9WYyyCgCiw96BrvrhN32B2o/QWdLOCGqsdDxNDwsoKauz1akDGsLKCGoOCkwQxtSObRVBL7KX+wqfLQRZBLbGbqkXY9anFIigaw4FFUIi1+bvbvFx0lR/PO1msFGrhVdb1L1WaAsWr8vyMAAAAAElFTkSuQmCC")
PNG.LockOpened    := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABIAAAAYCAIAAAB4NzpmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF7SURBVDhPY1DBADoGhib2LtaeAZbuvgZWdlBRVICiTU1Dw8rN1yUi0TUqBY4cQxLUNTShKmAAoQ0o5xAYBVHqFBZv6xtq7RXoHBYP5Nr5hEAVwQBUm4aWto1XkGtkMlCRfWCEjqExVFxb1wUsqKWrDxGBAKg2PWMziD1AnVr6hhBBCLBw8QKKm9g6QvlgANVm5eYD0WYfGKmqqgoRhABTO2eguKm9C5QPBlBtJnZOEG2mDm4QEfwAqg1oGFQbqqm4AP21FcVIXlsq9P8gO0EEVAZUDNJmY6r4Zz+6NB4EVAzUwtCeLY4mQRABtTBMKhZDEwWiA/PUs/MDs/ID987RQJMCIqAWLNrebBPwjEmChJB7dPLrbYJoCrBr2zRdF6IHgoBcNAXYtd1aI4WsDchFU4BdGxBtm6kN0bNpmh6aFBDh1HYDZuGVlbJoUkCEU9ueOZoQbbtma6JJARFhbUAGmhQQgbSRGd1kJi5IUr68iA9NGisCKgMlZRUVANm59nMZonjbAAAAAElFTkSuQmCC")
PNG.Targeting     := BitmapFromBase64(0,1,"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")
PNG.AntiAfk       := BitmapFromBase64(0,1,"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")
PNG.HealingSpells := BitmapFromBase64(0,1,"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")
PNG.Invite        := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAYAAADTlvzyAAAB5klEQVRIid2WzWsTQRiHn81mPxJTU5M0VCHpaoWiBT8IHjyoF289iVdPHhT/gl7FUxH7LwiKCN7Eg6AiimeDIJZCqoRSQ5o0H67dbrK7s4mkh3rRDWZNBd/bOzO/eZiZ3zszUqFQ6LOPEdlPGP8CGP0bk1y91yI2KbP6rkPx4fR4gdcfdckl5lEiGqmFKmmjyss7qfEALyw2mdJPo0pJ6ENWP07TsAI1oYB+VKbvx3Ej6l6bEPqg57eaUKaxzR7l1iaOp+AKlYZlU9ncCdQMrcOF23XyJ3U8t8frByblVzP0DpfIndKpvMjvjrm4pKDICq2myYclZXTgleUmc0fzpPUsou+xvv2FlaLF07t10tKJIev/dQRuaXLqIEklh/A16CXIqLOoB/ojwxhmmq4zOBttL3eFR9cNd1cEqstli41vbRxPY8eRWduq4HZ6NMSnkYFDTTN30yZjJBCez8dnNTrvp1GOrZHKq9TeznD+RpUzlxNEkGk3HR7fOhQOGBSXFhvMn01hTMwiSRLfXZNS9TNPAqChCj8al0irBsLXd/NYJEssXg/WhAFum2C7MjI/jWV1g00VynJv7rdZrX2lZQusgakaVUorwXdp6Bffzqxz7toRtIkoG0WTreeT4wX+afznXwzgB0nNq6n9G9gQAAAAAElFTkSuQmCC")
PNG.InviteH       := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAWCAYAAADTlvzyAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAHpSURBVEhL1dTdS1NxHMfx7oJAu7EbRc5ZK3UYs50oRlkQgsYQN3EG7cjEnNZG+VAwUtArsTBSRER6UBn2tM3V2ibWJOuii5A0imTgdpCTGvZXfNpv4oHkp7/FGZMuXjc7n/GGw5dzQBRFZFMqaLFYsuL/DfZ/0GDo6zG0DhdQn2/LSHA0VorQWjVmN+rgSZxF1xsNdUeoDnb4ePhWzXi7bk+ZTRr8pqduCdXBm6+08CauICQ7FAOLZ6hbQnWweVKDewsX4U84MS25MLFsQ/tMKXVLpBXsDRfiiXQcYzEtrHfyUr8ZqnNQ031E2XTOGeGePw+Hf/fXSTCDfR95+OULmP9tRXTTjMfxE+h4yYMXDlH3LMzgyLIe0V+i4rVshjvMUbfpYAbvL51C5OdVhVe6jLbA7mfPwgy6AsUY+16LgOSEN96Cvs/ncP0pB67sIHXPwgwStkc6tEVPwzUjoPza1pfEWJ8L0+2tA7rxMD95VEWYkHR4sHD0r//ulFZwL7d8HMbjBrzftCYPqx7BtUoM7BFVHXRHeATlWrzbaFCM/DhJ3RKqg85nPJ7HrQjLzYq7XwTqllAdLKk4jJ5PRnhijXix0orBRROaPEXULaE6SOiq8mCf0qMlKOBSj5a62ZaR4L/Yv2D2iPgDzXftyP7Mh5EAAAAASUVORK5CYII=")
PNG.TxtArea       := BitmapFromBase64(0,1,"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")
PNG.ConnectionFailed := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAG8AAAAICAYAAAD3NKGCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAALuSURBVEhL7ZZbduJADETZTwA/wE/MI0DI9tixR7cd2dUN85+PzDk6g1pqqVRSy1kdDofx+XxGchiG0f6t/uR3y8obttvtxqZpxrZrg546/snvk7l5NI4GVnUdfm82m7Hv+7EoivlFqi+2tp0ancrxeBz3+2kY3tnDkNhd5PF4vNg5Jz5+9ZsY+2r/coaQV39XVTV2XRf5IMQtijzyVyF+ShTyzre1+O94KMpyrI1LOPWzLM8jPr3Od/eVf42hMgPCkWKzLJ/Jza1At3N2PA6z3tkL1ZV7v98jMrAB3vXz+RxyuI5v0y6NwaZEc/cwLPEpAkwIOAdb7W5rmtr8qyj+5+fneLvfZp14nLke8stgtIblcrnMeto4REl2jshJrNowUPN+vwwWpCsn/L7dBBNDZE123fl3Hf41J/x3/aJHa5PEyHqztmKbEMztFK/F4q/NA7wCvVzO4Y7rXd9F5BD7fxOFNAZapzRgszv8n9sEV9Yst/WHaXq12TRUiQKrNq8si/F6XXRqUzxp4xDFczqdgvD3gdatwnn80rooBxzowKWCvRP79ICWXMvatMnDuSx3oXG5JdVmMdlRs6wxOhWAgDDX8VVg+OswfD2+IiC8OnRi4nezl7zdbmc764kYFN8nE369Xu1e8/KSB9kU+CtxdRPXw5rPsiVf2jiEbeN2sMIPDfQzhvN4WmpiyJQD/FUPHAmGd/wz9OqvmKOXh5Q/zziQKNPNJW0mIDQQuq499PjJx2uKidLmMaE0x2OChVXs9t0P+X0/4UhJgEQdDojW1dobCZV8K8m3Xq/F3lv+5X7aOETrIx816BBRr24bcihH4KOhrsO1Ynb+2TDB3/Bw5nbq1pe80uQuWZYFsph2JcmFDzqgNPEEfNGJG5P3WijN08l1OZ2m7yNTyPpM7TQQjCk2XZvEp9idvSj1QVif4ZXI8PA90VeTNg7RelnVfMeHgW/3K0YkfXlg+v7+nvWPj4/AieJwUf5LaeAiz/EfW5NJrF2znm0AAAAASUVORK5CYII=")
PNG.ConnectionLost := BitmapFromBase64(1,0,"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")
PNG.SelectCharacter := BitmapFromBase64(1,0,"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")
PNG.Reconnect := BitmapFromBase64(0,1,"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")
Base64 := ""
Base64 .= "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"
PNG.LoginDetails := BitmapFromBase64(1,0,Base64)
PNG.SorryError := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAMCAYAAAAH4W+EAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAJXSURBVDhPbZRXluJADEW1GjAGmuQcSY35mt4aO/boyshTfYYPHZfie6WSLHXTyOv1GkOp61qyLJeyLGW320lRFHI6ndSWSZIkdj6fz1JVlRwOB8nzXPIil7ZtZRgeMuVnZj8ej5aTql6WlcWkaWq5R61DbeJmEhREIIDedZ0lGZCCEGxEtAiF7/e7tF2r9kx2eyVbFtKfeyGv7zsjg1CD3ErPDnx4k3OyxMxE/HbTzSfGFCXQY1w2m411CiC3hXHX6/Wj/fF4zOdMLwCG6/MhlIllI2VVzH5AAXedWzyfz4/5fd9/tIfEeXYu7rpstpuPSd4y1ylC+133lrtOm7kh9rIqZzs5zASdxs/TuM8lV5vNxJ450KJhAYDDG1CAgq4zG8yO606COEi5Hf378W0+FiOs4XLTeTOjgehcwNqdEAtbBynAXae1YUeowZMQF3ayUfDyTRIZhuFXXfLA/fXuLm3bzSubpMl/fnwMNF+3AWirnUxP4HZ/Dkj4Jv75+Zn9XddbvHztvsy5Xq81YZoLyHkByCDYbf/rygDpCDEA0xls6LSfM7PBykIQwYfgcxIn4hQDu7WJQNiylgDQXsABAJz9Z6D4iUGIVvOUxFGobmqL4zyRSk33fAfj6cLluN2uhplpnAUBxIBddP/jeK1J0ztDslBi3MLO2rFaO4LP/zEQBozOUKvRtSeWHOzE7g97sxEPeXKbppXL5WJNwAfwqM8yLhaLMYqiUZ9ljNfxbOOLjk/Zm221Wpngi95fZLvdTvnxSiW2+Ck2UvlXk1pee7lcqm81/gVyGgdVIbPEvwAAAABJRU5ErkJggg==")
Base64 := "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"
Base64 .= "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"
PNG.WrongAccPass := BitmapFromBase64(1,0,Base64)
PNG.Ok := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAACsAAAAUCAYAAAAUccS4AAABNElEQVRIidVXW47DIAwcG0gTbU/SY/RI20v0mv3JEdqQ8FiN03T3b39hJIQDY2MF5Id83241eI+UErz32FEBiEk5Z9Raoar7Tq3G45xyhop81gnaITcMw65bym5XxCzGNUKg8N4h5QQVhYjacU4VpVRSP3ZoN4SAx+MBT8L9fhc0jsvlUrWU0rqfBrvF43pbxzSO0OOttQ7nXD/OLssC/Y0AbcOiA8NLD3BO0U00cM73Ew0yE0jq5Bkws+l4OjXgyv84n7+gMa6t+2l4Pl9QNF8V7BiGAO3EV6SU+8lgI2uDXjJYjJG1cx9xlujmGQg7jev1Wud5thKMqZfjaCUqqrUdPjhsa7I2hTwqkkMuvw+ZM/fIoz7lbdveLZFYfud1cn2aJryWhf2Q6R58jr+2jp8pIvgBbVan1+JZSfsAAAAASUVORK5CYII=")
PNG.EnergyRing      := BitmapFromBase64(0,1,"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")
PNG.UtamoVita       := BitmapFromBase64(0,1,"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")
PNG.OldUtamoVita    := PNG.UtamoVita
PNG.CancelUtamoVita := BitmapFromBase64(0,1,"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")
PNG.HealthFood      := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAYqSURBVFhHxZjLTlxHEIZ5hDjOIsZcZoZhbjDDcIu8IDbm6ljIwhbCXG0cm1hgYWxhG4MilEWUJ8gbZBcpD5BNdllkmVUep9NfFf+hOYyzzaLU5/Sl6uu/uvv0TFcIweyza9fC/2GKfwliuNkMtVo9FEslM57rjXpWlkoDYbBSCc1Wy+oKhYKNqTca530a1l4ul63ENKZWq4ZKpWp+1U5M6gwkgxgetgCjY2MWFKc9vb0ZHEYfnNCPADz39PSEaq0W24ZsDH3a7VHrQzvjVAqUcqAcxw9WwtTUVLh9+7argaOh6IhOOBppt40UB5QMdICmqQDExMREFqyvr/88UN18VOPsBcW7VMAX75T4YNxArJ+ennYQBikFgmmNtO0dp5oNM61FaBzguB2BNebLGzd8lrGeOm9DqeHzNNesX7k8aH6YEIavmZkZB6EDM2QQtJQ4QyVXZjDU6w2bxdj4eHTgIB7Q08B43ulDugCnntRKEQUvFIqh0Riy1Hd3d4e5uTkHoZGOrdZIFgDDEYGAkTNJPtvo72iS/ebNm9aXgJRMdrAyaD6kKJMDamFhwUFwTFBMg3BIuigFxGAF/OfPPzqa2lFR4IzHJ+oQCxDeUYQJ3rt3z0GYAQ3smP6oDvLjQOuDWeUB/vrtl/Dz+t0rlgeqVuM6Od/iGIF9kqhRsLjf3L9/sUagH2mPZM8sNgF+CuBopnXFqP/9x8NLQBdHQNUmWyyWsvUI2NLSkoNQQUBWPR2QzHdIPYMAgAApwFBr9IqlMIwRjNYFkyMevhX3wYMHDsLstR7oLMlIkUBSCAJu7eyanf7wU2a80/b59S8uKYMPfHFmkBJ8s0iJA9Dy8rKDIE87pgU1tINYbIJQOlKIfPDv45hf79y5ApOqAgSB8U8JELEfPXrkIOx7KpUOthlAeRBBUKYGECB/v3hxBSYFwWehVDQgjMkSd2VlxUEgZN+TGmDIYwqhtOBYAQis9xQG0zvt6Vqp37huvkkLMYmHIqurqw7CN4STESUg5DkPglOZ0iAYngmOEuoDiKBTENLP5wAgngFaW1tzEIJDN/nVpMHwXegEIscEJg0CEViaklSVFISNwXZmZxKTpbCxseEgvlv8JGR18zXOg6QzFkiqCmWqQto/BUkXKSlCla2trYs1AkhvX69tMcA+BUIpBVJVsBREMHkQIFCD7wynOO9Pnjy5UMRXsR84lJ1AFEgw/wWRmkBY8MAQi8NT59XOzo6D6GDhUBMMynwKBucCQqUUQmoJUhCMF8itW7eyiVN++/y5g5hUsQJTDvPnSCdVUiNop3R1AuGI4BbIsd9stsKLOMZAUIAtzG4hTSwggOjYCSbdHTLe8+lKIVIQJspd1ddmOXz38qWDcEsCgosRJcYdIr9oBUMQyS+wPJz659Xo7evLJstWJube3p6DIBUduH+gDB0dyI97waTKCChvKUAKkaqB0iwDnomz/+qVg0xM+EUImbgE+fXOL0QaAEweqJN1AuBjCcRQVAElOEMGBvzDx+45ODhwEBQYHbv4LUJHrRkgOGNYvDaT6BBTwLwpsGypHu+usT9+dcsnA2wQQFi0h4eHDqL1QL4w5Q8QZsEAngGijRNRQKkRNDXVM16KY/39hTAxOWkTY9Jv3r51EP2m0dqg5Jjn2cDit4E6vtA4og4nPNPmuY7BEihsauprW3v6fNiXN14DeMcfENQdHR05CLP0M8RTQSkwHNA2HtcRDjxV8Vdf3P928MVcs5aoo437KOMsaEwnwfhpibL0oZ3+4/ELj+qAvX///gIEJwR0dWrmgHpyiAObcfw+UFqKohL0oY530qW+5B8QfDpQ0U5qpR01gQUEH8fHxw7iMP7bVzOGml96QOEIAJzgTGqpvyvn8tOHnxBpPc+MAQZYQPHJl/7s7CycnJz4fxMM4KTTVpUDYLj+4wSZqWdhA0df2r2tmIFREpB6+rgv/6IDQKkxQJyD+P8jsbFLfw9M370bZmZnw/z8fFhcXLQfP/zu4Mq//PChXXS5Y64+fhzW19fD5uZm2N7eDk+fPg3Pnj2zD9ju7q4d23v7+3ZYHbx+HQ7fvLHdcfTuXfjw4UM4/vgxnJ6e2n8jJycnXf8CQHC/0CHvkysAAAAASUVORK5CYII=")
PNG.ManaFood        := BitmapFromBase64(0,1,"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")
PNG.FirstHealthPotion  := BitmapFromBase64(0,1,"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")
PNG.SecondHealthPotion := BitmapFromBase64(0,1,"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")
PNG.ThirdHealthPotion  := BitmapFromBase64(0,1,"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")
PNG.FirstManaPotion    := BitmapFromBase64(0,1,"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")
PNG.SecondManaPotion   := BitmapFromBase64(0,1,"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")
PNG.ThirdManaPotion    := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAgfSURBVFhHxZhZbJzVFYCvQBDCEhIkwLvHy3jG42Wc2IEImeAYxwkQG2OixI4dZ7FdN46SOHIWJkQGtSBKS2UwLSgs6UMhEBYpkSI2KSytQEiViqDlBdqHSu1r+oL60JfT+53j83sS8d6Hq/v/dznnO9v970wQEW0rV62S/0dz/ZdBNLe0SDbbKDW1tdp4bsw1Jn1tbZ2kGxqkpbVVx1KplO5pzOUW1+R0vr6+Xnua78lmM9LQkFG5Po9OxhQkgWhuVgWr16xRpQitqKxM4GisQQjrUMBzRUWFZLLZONeke1jT1rZa1zDPPu8dlL6uPu5PN0hnZ6esX7/evIGgpiiIRQjKt7UpKQLo2WgALeoFIDo6OhJlVVXVi4oaVUYmWu9QvLsXkMU7PTLYVxfHu7q6DIRNHgKHac236TtC3RoszUZoBCC4LQL7npLSUrMyjjNmc3iqeTHMWV1XX59WORhEQ1Z3d7eBsAAL2QQtPcLwknkmLY2NObViTXt7FGAgptDCwH7eWUO4AGec0LpHXHkqVSO5XJOGvqysTHp6egyESRa2tuYTBTQEoQgYF1bscpSq4iiQOV/LWHl5ua5FIT3r0w1pXecexTigent7DQTBKKX5JgQSLnoHYnOIheYNcCzGY4Azj2eQwZgqi8/sRyZr0QUI7xiAgZs3bzYQLGCCiqmO3sH9CPD8wCrWoPydx1fLmemMjC4zGJSZtQaPYKCbmpqltKxUMpmYJ4slTmPejMQbKd133/33L+UIAvNt+eSZZHNAYFD67zNdIn98QORct1wqZGTyGoNBMK3YM8AzhmFLR0BGja2pqU3yEbAtW7YYCAMoJOtZgMuwis2M48r20utFXsjLD6fXy6X5DvlqpEQK1wUpjA8qzJUNBS0trVIeE7eyqirJC4xDH7Jdb39/v4FgvecDi91lhMhdmb3hRnn1xiDfj66Ubx5eKefTQZ65OycvvXZWFd9683L59U2H5dHQI9VlJQkQBmEcsjgzCAmySVL0ADQwMGAgFteYeHGDV5C5Oasbsea2FbdL+dVXycLyIG+23iSn2svl948dlu1jeyX0DcvQ1b3yh3BenggPyNFwjzzWPaogDoUOZHno3NuMDw5GrwJC3TO4FI60ArlVxHbZ9ctlfHRI/vThezI72CMn9g7Jwgu/lRuWXSfPh/0yc9WwgnwffpCnw1YZDTmFeHZ+Xj795GN9RmaqtkaBaBiL3q1btxoIhNQ9IQDGK+TixX+oEAe6paRcFRe3X4ZhORd+ox55P7wUYS7IL8KDCcjJk0/LihWlCsQ7sgkLOtGHR7Zt22YgfEOofzwBIc8onpyYkIWF52MFtCQw34Z/yQfhtLwSjmgrhjgXnpKL4ZyCzIS7pD9zpyoHZHRkRPcTfj4HAPEM0NDQkIGgHLq1d6xVGHKDTa3xIMpFF/b19SnMwSgcpVc2IF4Ps/LpojdeDCOx74/r1yWeAQaZFAblTGVqEcRU2LFjh4Ew4Cch2W2f9WbdmM/n46GUUZCfhjvkTHhcLacB8HY4KW9Ez1wI8woxH/MDkHfj+1zoVRBaVVVKrr02e1mSEiL0jI7GxPYcAaSyqlJLDDCOZTYB096+QcLNExGkQ14LP5PPw1n5W7gk34S/ypfhI/lL+Doq3ZSA4A1aMUhJSZXs379f5eENvjMcdkCNjY0tecSy2A4c7xl3kJJVFTIR2qKCwZgbk3I2/DzmyqmoePgyiLmwWQEAWQhTCQhyvKGLw9PPq927dxuIHywcag6BZxjDhWzGGmAAeTmCfBE98c+ptxTkd2EihmNI3gxPJJ6YDw/rczEIssmPdevWJYbT7x0fNxB1VRygeQy15heJi615O4zF3JiL1fMf+Xv4r/w5vCGnwu6oeFCeCwOqHIgfA/Fq4YjgFshByWdgIlangjBJCVMthIMEAsi+D1bSeEbHbiuR86EvnhdPyncxNz6L5Xo6TMuvYmhQ/HpMZoeghItB/CuMPO6qeIT2k6kpA+GWBAT3C3oayQoUAGxkzL2D4C/CuLwTPXEhPBNBppK8AILn4kRlD16gSvgAurGUMjr37dtnICxiAfcPPMNCA/LjvkbHrMTTCYw3LKc5wJUQbgQeocfT7hnmpqkmQDo67CKEm7hH2PXOLkS+gTk2ccY4zJVAxc3nzQCT2xS9gCfwcl2dFQPVc+DAAQNh8eo1S79FWOg5YxD2EcQSPIcA8soPvR9rJCbrAcATyPVbPhGgQJBD0h46dMhAPB+Il95DF+MHCFawgWeAmCNUAKqS+I7X3HvsRx49MEtHg3mcVl2dko61axUUo2cOHzYQ/03juUFPCHhWsGgRY3yhEcSYVZSdCxZrK3sPHQo6O+9WD/LOWrzINYB35LGGsdnZWQNxqzwU9A6GAObaYx4hwEIVf/XF+kcIscYbjDHHfZR9qjR6A2X8tMSzrGGe9e3xC4/XATt69OgSCEJQaN7JqgDGiSEC1L3x+0CvIYqeYA1jvBMuX0v8AUGmAdXoSe1hx5vAAoKM48ePG4jB2G9ftxhqfukBhSAAEIIw95avN8+Z+1nDT4jicZ7ZAwywgCKTL/3c3JwUCgX7b4INnHR4pFgAMFz/EYKbGbevst1lmbc5O2d8r3+nWGOy7IsOAL3vAWIRJNaZgQT/e6Brwwbpvvde2bhxo2zatEl//PC7gyv/wEMP6UWXO+a27dtleHhYRuLNa+fOnbJr1y7Zs2ePfsAmJyf12N43Pa2H1YGDB+XQzIxWx+yRI3Ls2DE5/sgjcuLECf1vpFAohP8B/5sFf4alr1cAAAAASUVORK5CYII=")
PNG.UHRune             := BitmapFromBase64(0,1,"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")
PNG.ExuraGranSio  := BitmapFromBase64(0,1,"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")
PNG.ExuraSio      := BitmapFromBase64(0,1,"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")
PNG.ExuraMaxVita  := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAiqSURBVFhHxZhbUNVVFMZ9a6Ynm2l66DJN02RaZpNOaQ0ZKoI4juENFAUkIEQ7oCLgUUGz8k4FZkqFaeON1LIAk9IIUhGV8QKdFLwMF0lEQQ4Xkdvq/Na/fQ6I7z2s2f/b2evb3/rW2mufASKiNvCxx+T/MOO/D4jjjlpZm5WvlrrvnOTmiqTtLtdrRu653nDwuN7v3SuyakuZJO/+U5Zv/72fpXxT+FCzb8lXw+egQS8qGA8Ts9ar4eSpiHR5JjlfhgYUSkGByDCvUh25fykyR16MuiRD/Jokp0R0fDn6hoz65LIMsTtkkO28PGv7Q4YEbpNhYTvU3ojMkjdtB9XMs6AV2fqNl5eXjB492mLjwMnLuqpBcZl6vbPANaHremjiCRnhd0na2kVHHL2+sUqmrRAF0XrfGrmfvqtWfHfWyCsflet3jMOTL6hz7yU5OgIoPatEduX9rfcf7zgj76/JE29vbwvI/kKHhiUq81cFVFbdJNlFVW5Ghs+oU4fjUm/KzL13JXqPU0YGtegzxpW5rbLf0SW7yttkY3GjLP61zg0M80l1iF9Crs7J3FtyyvT+WGmNMjN27FgLCHEfPC1LaV+cVa4fVtV1yJ68TqX9pWWVOrLymB/vSGFtp6w/cl/vNx/tkGqnqJXf7ZH86nYFA5C3M67KxK031Ww/18jpmnvqC+cmRITHx8fHAoII0cG8eaLok386Jx8evSXXGnqUBSYCQHpBu2Qcb5fMMx16vepYu6zLb5HM0hYFd7a+R87f7JEzN7rk5D+dsrnEqYD4LSDsfzTI1IwrGirChAHE19fXArL121q3KGFlXlGjJBW3yA+VnfJnZbeunHDgNOjrVr0nROFHGyTo55sSm39Xtpe7QlPRpaAOuEIEMzCEAaq+tUdBIGqjHcPIhAkT+jMCECjFCSs8eq1Hci50qR7eimjWcczKOxKa26RgsQ0XOiSvukuBm2cXGi0QbZ2WqBvvWYJGxLAOGwaI/8SJfTUyIjZfRqaVqsAQnlnViaoeGbOgWScEDGzgHBYyyyz7q6FbgR+vswxWcN7kyjjeZZc3y+enGnVuMo80B8Rz07bJpEmTLCCmdvhsKVSqWRkTQSl6IBzKhAvMb0UiC75oU30AMLu8RzMGsaIpwOCUUGBkEGyxqH2OZtl50alACA9AnvH/TCZPnuwBQt0YvOqkxhstrD7plF+u31M60UTIp62aKUkZ9zWEZNTu0m4FQfgAcadNVKgA4JpnzINImQvxAob7p8PPyhMzihRIQEBAX0YIS9Khdrc415xqctcNGGC1xY4OOXTM0gqMFNVYOiIEtc2WwQ4jISKVYZm5YANgMEZoDJCpU6daQBK/ylWEDxYqQoIo+TGaQAuskhUz4pB0ZTR64B3XMMI7wDAHLAAKgx3KAz4H+mfL9OnTPUBACBOA6F26Abeh5J4aDPx1yxMGvsM5jrkmQ8w92kk74ZT0ix1uEDBCeqMbChw+ARIYGOgBwr5CWg6b5HQzQpjQCyCYlBVihAPqcdzVbY0YAAAJYPSzqeC2srj8x1u6DWCEmlqCsXkCZObMmRYQtmyAUD+opDBBWChQUGsKG04wWAEILADEGGwQJgQLI1+etqowQELircUx96uxlaoPDCDBwcEWkIRtebp1U2xILUo6dJJ2pjoCwGQDIBgNI8YAxjeAASzsIWSyzXt2vTJNHWKxmr6uXZoCOmfOHA+QzDN3NI6wAm2kMfElLIxQzUqNOAFmwmMAAaR3eEhtABFiGKEOkf7R2+vUH9kTsumEhIaGeoAMXpyvbIASgxX0gbBgB42wOozJWTlADCgYMkLlGd8RGvRE6uMcfaALQkLGhKVWS7Rr0XPnzu0fGkAQQ2IZuLbKlTUVqnDqgAEBAKMHEwKuTVh4zzOEir5IVdoL6ompH2iDEabei4jwAGE3JCT0HSZzRvnXK2rbvhqdlMkN/QAwBkBYwcpqurWX4fem/PN7BEuV9t962V0/sCdHfieRkZEWkCWbj+hO+HrilX61BMTQCiOI1miALMIJhkNAYqkH26WsQrT6oo2Iz1p0DiNQDCAGzCOvLZX3o6M9QNiA6B8fbIwJD6uhvAMO2o1oAcOIFky5J0NSPnVKRZW1H5lNEiDMTWgwnxXnlA2AxMTEWEAWf35Et2OaWagzbSFaYdsmxmQGIA5cdXVnriyixiBgihYGEECxHcAgGUImbT/Q6u7ymPP5wGvKvO8Hlbp5Pjp0ncxfsMDDCEBIJfpVtEIGMVKWTe2AFXZPxAsQsslkFe9oF8kQUhQmqB0ww0aJcyo3TPOcjvCFkT8pEJvN1pcRBMvBh0yhnpDrf9ff18aGPYKVk/s8hxkAmaziGwogzTSaeDepWumHXTSTfvi2MkxB43hCRwgIQhMXF2cBid90WIFgaAVgAMApPYTpTSfvuC4rDjm0EaZpIiVD0yoUDI0UjGSfa9FnMIAmjH1b6FTNHCl2MTLB0YeRhYsWeYDQFxgjPJw/DpY2aAcOANROqLiGAVYYbG/Q1TMCgO/RGGJEC0YT1CZ2cYCQTbSlnJmMRuLj4/sD4RTGwYdDF4AwVo4Dml5qAgwY8RFzRjY3QLJ6df5f5lGTtDAmF+s5mYMcSeEXY9UQgCQkJPQFwkkMA0xg4nd6ECKl+SHhmpZWojqh/ySTyAxAMLId0Byz1RuAaIEQsHJY8IrI0LnxwdGTTh4gSUlJFhAMhxwDcWqaWjM+/s5qHZmIDIMh2OmtA6omoSNV34657D64M7Jy5kCYjGbhAElJSRG73W79N8FfA5zKednbMeLlurcFr/xeDVBMbCZ/0HAOE6ZoPcwA8R8Q6/8RF5AB5u8B7zFjZOy4cTJ+/Hjx8/PTww/nDlr+gClTtNGlxwwMCpJZs2bJ7NmzJSQkRMLCwiQ8PFw3sKioKC3bMfPna7GyxcZK3MKFmh3xS5ZIYmKiJC1dKsuWLdP/Rux2+4B/Addy2/knBSCiAAAAAElFTkSuQmCC")
PNG.ExuraGranIco  := BitmapFromBase64(0,1,"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")
PNG.FirstHealing  := BitmapFromBase64(0,1,"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")
PNG.SecondHealing := BitmapFromBase64(0,1,"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")
PNG.ThirdHealing  := BitmapFromBase64(0,1,"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")
PNG.UturaGran     := BitmapFromBase64(0,1,"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")
PNG.Utura         := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAA5CSURBVFhHxZjnV1bXtoczxj0f7j1n3HFMMR49akw06jUm5iTBkqABFJASY0GUIopSBEFUBKRqpPsignRQFAXpIr0LinQB6dKkqBQBG0qsPHex35w7Rv6C+2GN9ZY99nr2LL855/4AkNaMDz/k/2P9+/w/QYRkN+N6Pg/fK+UEpNRzJrkOWVINARmNnLpaJy2fNPny/mOXpdZxOqWOkKxWAjOb8cu4I/3nlVLzp+Wf1YwsvQHv1Nt4JlfjdumGdObixUskmP+DWKXrwPc69qiYuPPLwQDUzGRoWgWx1S4KXecYtjlHs/1EDPoeVzD0TWSHR5y07/ZOxNgrEVPZVenz9O8a9mGoHj4r7dNL/WgwW49fkpaGfQSaR0NQsfRD9YAMRUVF1q1bJ7eGpbiBgq4zCjtdUN7rhfoBf9StgtE6Esk2l8vouydhdOoaBqdS0JeloHcqmX3BOViEFyDL7iC19TWRN4dwja9F3zcZw9NpaDpGscMzQdp3eiWj6yEgPZPYaB/FzwcC+NniNFq2IcxT3oeSkpIc5EhgFqsNfmOl3nHWGLqjankGTdtINrvEou+Txt6AXExC8tkTnItBYCZ6Z9I5eKmMY4m15D2A/WdzCL4+QHTtY/aH5bNNWGVvUC4aTtEC/Cq7/DMwkGWw3SsFVXFfJatANh4JRdftIos1DqCioiIHORFTxhZxwfr9Aawx8kDV+izaDufZ9lsCRmey2R9RJA4ux/piGVbiWivh3+MZzURWjxBR9pB1Zr4E5HWS3v2eYwlV4voCDl+6hWVUCeZhhZiGFkhgOp6JqNlFou18Ad2TcezySeTrzUfYsGGDHCQwo5UjIUUYe6ayQdAqHziDhogNDYdzGPml45x0m1OF3bilNXIivVnsDcgK7xJeMcDV9ufEVN6noP89Ob1vOZXXwkkRlKZhOTgk1GBz8QYHzhdhEZGHnk8Cup5xGAdc48C561iG5rNCxw41NTU5yNn0Ro5fqsDtchUHw4vQE8Gn7XweLcdoHK5U4Zt3F5/cdkLL+jlXPYR/YQd++a1E3OoV8TFGWusj4m8PkNQ4wun8Znxzm/HMbsIlpRqnxEppPxJTImBy2B+ejU309T+BbNy4UQ7iHJ6LmXeSAKkQqdeIS6J4kuhSzEJycYyrkr4HXO8kvukJVxpHCS/r4ULtANm9LynofUF2xziFvc/J7nxKbv8rwm914V/Uik9Oo7Q8sho4nlaDa2qVBOZwpQLz0DzMAjJZ/osNGpqachCnsCzULH0xPZ2Kc9wtvLNaOJXfhaygmxNCJ/zz24gs7yO5ZZzU9nEye55ReP8VZSPvyGwfpqB7jJrRt+R0jnFj8DUZnU+IrrpHQssYkRX3CCrt5ExxG6eL70qWmo4jEwFh7HuVxeqWaGtry0EcwjJZaegkUkrGTu94ybeBpSIL6sa51DDO+er7XLkzSFx9H9ldYzT+DjcHfyc4p4KslgEqHz7j7iSk1HYSmlfFnRdQNPCSy7V9pLSMENfwUIIJKO0Sbm7DKqpQnJPIVpeLfKV1iE2bNslBjgSnsWqvSF9TbzYci2Kv0Ifp1Dx7o5/Etudkdr+k8MEkOT2jtLyCmrHfCc2+xemkfPJb++iYeMfd528pbOunoH2InLZBGp9D7RPI6X7ChUq5dabdNO2aXf7XJG3Rto9koZolmzdvloNYBqayzvoMq0TG/GgbgbbI98Ox5RJ9TP2wcMWEcMMbGsVT330tlrBIUecQzY/fcWf4OV0Tb2gZm6BxZILK+0/Ja31AWf9T6brKkbdcrr6HZ1oVfrktUsDuFiAbjoazyek8sxX3sHXrVjnIdGwomMpYa3sOdfcUdIV2WMfcEGlbRXDpXZKbhyVzd76B8vujdLyc4u4E9AqoaYjeF29pHBqXYJrHf6fqwRPK7o1R0j1O9fBbkusfIMuoxelyKUdjStnhdQWVw0GsNvFm5mpDdHR05CC2kSWs3h/E2sPnBUw0RmfzOSSEyy25UghWh0jPQW6Lp68eek7jo0k6BdQ94aKel+/pfz3Fw/cwKCpXy9gzYZVnlPeOUNL5iIicGrKahsm9+4SgvCbsLxSzzz9VyEM8Wk7n0LKL4H+0D6Grq/tHsJ67gaJQ1VWm/uh5p2AZlotbbCmyaxUk1ffQJlxS+XCcxtEXdAnft469pqpvWLLGgLDSvckpeoUbRObS/eIdrY9f0Tj2juymQZwj0rhY2k70zR48UmuwFkI3fX89nyS2iEK6TNOGnTt3ykEOn81Aw8qfLXbBHA66iplHJPGl9VT3j4g1REl7FxfyCrlceIPM2mYpFqYtMu2G+Bs1eF9MIjQtHxHT9L8VMfTsPbeHXlM/OkWbsF5e54SkvFfbX4gy8BZHoSM6Jy6zxfE889buRV9fXw5yTBy+1zWU0k5h1q5HdI1OMvj0BR0DAzT13KN7ZJTBl69peTjK/cn3NA4+Ee6Zoqi1n5NR8Vh5BuIcfJGG4Rf0COt1iMNvi+BuFtareQRlwm8eSRXoe8ayap8HUZWPMA3MRvtoBF+KrDE0NJSDxBWKRic8kbquEWb883M+mjWTTz/6b+b/4xO+WPAZM2f9g49nz2PmZ0u49+gF9X1j9AqLdAoLRGaXEZF1k6yGblqfTUnrzuO31I1PUTH0TkC8J6/nJRHCNe6iBk3Xm9TuKQ6fv4mpqGM/bHfCyMhIDnI5v5aI5ALKW3qYMXsOyiprUVdZza9qSvyyUZ2VCj+yZq0qf/nbLAEyyZCIiz6RMd1ivz0yKQlap4iRmuGXND99T8XgS9Kb73OpvIOg/HpiqnqFFfoJr3yIX3EPkbXjore5KpqtSyxcb8mePXvkIH4J1/GKySQ4OZeG/kFmzJ3DnDmfMkdYZO68z/lk9kL+PvtLRIzS+OApbeNv6BYWuT32hiZh/kJhyRbhjunPVUOT3Bx4SnyVKJTJJVyq6iGj+7mo1H1S4dM7fRWTsAJ03OPZcCCIxWoH2btvnxzEK7kcM99LmHtFUftggkWr1tEm4uPB+GMqm9rxCY5m6UplWocmSK9qljSkpHuU7JaH4ul/52rdPQHwinYRHzUiNop6xjmbW8HZvGqKH7zmaudz7OJK2e4bz1aRLRouF9A8dl70PcF89rM5JiYmchBXEcVbnCMxPBlD6cBbVuvsJ6awktbRCQLiUrCTBfLF6nUifZ9zU2RSQnUTcbdaKembILmuF7cLGUQW1gu9GKXrndATETuFvY8pH39PTN19XNOq2S5LRuO3ODaIpuinQyFCKvxYucuTmQqGmJmby0HcUxv4ab9MaH84+m5RlN1/w9w1mvjEpuEYFMlHX/+L+uFxbvUNUTHylLiaNrwSC0lrGCK9aQRZ8k2uNQ6T0fyIfJF5JQOT1D6DrN6nHI0rZF9YNlonr6DuFsdqmxBWip51qa4rK3Td+PgHAywsLOQghh6xrLPw4WdTd1RMXbE6dZGK/mcs+mkj8xTWSuKV39RN1eAz8rpHyOocJaTwDs7ROZwXJSCz7THFInovl98jrqpPtAJTlA6/J7bxgSieN9ghS0TzeCxqIjhXiclAQYjnsp0n+GqrI39bvg3LAwfkICanEvlup4PoV4+hauJIg/D3nBWK1HYNYnPCh9MXEmkWaRtXdofYqg5ib/cTWtxOeEkXKc1PKByYIrq8nwDRmSXeGaV4CC5U9+OZXo1fUTt7gzNRd7qAok0YChZBLDfyESAnWaR1hL8u24q1tbUcxMI/geWbLFDYdoA9jr4s/UmdVlEvHoqYqG/rxj0gjIUKyjQ8eoN3QjEhRS2cLWzDLVF0dBkNeKTdxjWhXNoDBZxtTLForu7gldkoVXCnhFqpk1cUI8oKYz+W6HlI5eQzNRsJxMbGRg6y3+cSX6gYskLDiPbR18xf+j35eSW0NbZyXch6WORFlgmQu0+msPG/zOHQa8hyWqXuzUt08yaB6Rh4J0idl3lojmgxs7GKLsFNxJ5Lci2uYmp0uFLDZtd4vjPx5ytDX5bonOALDVsJ5NDhw3IQU/covtEyZoW6AZ2PXvLhrLksmvNPvl+4iO8WL2Xup3P4+yfzqesZw9Behr5rOHrucRwR48WZ4j6OxddIamkalscO3yQM/MQwdjqTg9E3pf9cEm9zPPkO+0OLWWsVwTxtJxb84shsJQtmfLsDW1tbOYiVzwXJGm1jU3zwnx+jpvkraj8qsnH1SjR/VmLtj2tRUv2VGQtW0DwKyvtOsEdMfV7ZnbgkNbBwq4P02SmhDkUxnCmY+vLriVg2i3Q9GnMLs6AcrCOL+S21GeMzeXxr5M3CTfbMUbbgL19qY2dn9weIdxRrtphwvWmAWV9+Kywyn/mitixdsJD58xfw6dyFfPDXmfzHnK+k+rJaz5HNxyLxy+viSPQNktvfcKV5Uqqo083Oj+Y+rDHzYqNdCAae8dhEFLJbWMpYliqNpdPl/wtNa/5ruWgR56ng4OAgB5leerY+lHU9pmX4FVWt9+nqe0RH9wNa7g3SOy5UU3TpXQKiQJTyZVrWrNvnxXahkMa+KdgIydY+GoaS+Sm+03dhuRjml/xqw9fb7VA08ZA6wF1isFLa78M+AeQqxtX15l4sUDbBzc0NR0dH+buJ6VcD01P59zrWfKNtwvdae1iksJHFK9VZpqjJ6k1GLFy3mcUbDPlcaTdfaR+UOqtvttiJedmVpVo2rNJ344cdzizaaMWctcZ8pmIifrdmiaYV/9puz3ozH+n79ByjZu6NmqmHBPEHiPz9iAD54N+vB5SUlVFZvx5VVVXU1dWl4Wd67phu+Tdv2SI1utM9pu6OHejp6WFgYMCuXbvYvXs3xsbGUgEzNTWVZNvC0lISK+uDB7E5dEjKDtujR7G3t8fh2DGcnJykdyOOjo4f/C+42By4KH/DRwAAAABJRU5ErkJggg==")
PNG.None              := BitmapFromBase64(0,1,"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")
PNG.ExanaAmpRes       := BitmapFromBase64(0,1,"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")
PNG.ExanaAmpRes6s     := PNG.ExanaAmpRes
PNG.ExetaAmpRes       := BitmapFromBase64(0,1,"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")
PNG.ExetaAmpRes8s     := PNG.ExetaAmpRes
PNG.ExetaRes          := BitmapFromBase64(0,1,"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")
PNG.ExetaRes4s        := PNG.ExetaRes
PNG.ExevoMasSan       := BitmapFromBase64(0,1,"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")
PNG.Exori             := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAieSURBVFhHxZjpb5RVFManLG2HYjsjS7cA7ai1KEV2EQbSdSh1rG0ppe20QOmCLZaWDFCmxpqA4L4CsaAmflBqNGo0UE3q8kFEoo2IGlQWlw8mxGCMxESjH473d97et8Nf4IcnM++8d3nOc55z7m09IqLw+f3yf8Dufw2JN2+ZdA1Ggl75NjhVPinxytmyJLkc9usnvx/Nv076cxIV+wMTZLBgoowsT5XT5dlyvmGOXG7Nlz9iQRd/b18lf3WsUFxtXiy/Vc/VPfPyblYyLgkWjwebs6CLtcnyQfFMiWQkydykZFnr90mNzyN3Xu+VxqwERWXWJLltaqIUzkyWA8v88v2m+XLliVXy5+B6ufpis+KffQ0iu6pE+ptF9q2TYDAoq1evdtQYWpAqJ0JpuhFRfR3Klh9acpXAl6F0jb7Y55WiZI8snzxFFs1I0mcAEYtoYJKLLXkTVK3Wm1Kla+FsGb3rFvnxgaVKDHWUEGQeaZfCwkKHyPCiFFUAIufrMpQEIC0sRqTRmycrfCabkGnP9khnjkf2FmTK80VzZGDhRHmxIkfe3VCgcxh7OD9FSfXnpEvTbL8qNVqSK79vX+oQMYpApLi42CHy1mKPfLQiXfOLnD/3LFAlbHTkn40CSR7dhO/HynxyLDhF6qY5eP3u2e5YyBxcPVkJ88n6tRnO3K4cx2OoAxlQWlo6nhpIAEx2JexRA5KSIzd4NBJUmWtSA4ki4w024ZmUogwbDdfkytAdiRJJ9SgxvrMxZIANbEWaR1P179NhVSUUCjlERpZMd9PyU0uWEiAKFiH399yYKQsmJsv6nCwpSktVNW6f4dXfAGQgWJNljN4SVFWY9/LKWUoG0qQKv/AJceYTNETKy8uvTc0vVXlanr2z0tzFqIaBWxNksfHG4UiZBKdlqiKQiQSy9ZmNXq2YqcTXZfhUGeazKXOpIMbwnmfWJM0QpbTXVlSMm5W0oIZWjlGIhZAQKZGV7293lsilN+5X471XniwH77pVIvOzJZQzQ9MEAcYTAAYGsXmpmtrSTJ+z3hg5yPBMZYbD4bHUmJIlLRhVnW4GH8zzSMDIDgmiHOoul4+ejch3bz3jEvngmS1KhvKETP7EKaoUZFANkAZb6oA+AznGkFaqtbKy0iGCCrZkkQ8ybblJuhBG5nNkz53yxWv3qiKQomLOvXafjPQ3yktbw0oEj0CGqsEzIN+klEAwM6RQCzIEyzv8WFVVFafIWAdtuz5R0wJ71GCBCr9H3u+J6KZsfuGdB12gCiQbFy3QNGFCOi/5xzf0FlKBCqQj7E1QIpAOJKfIQzlpUlNT4xA5uSyg5wg+gTGKQAQTk0fw4e4qOWs2Hu4Ly7mhqOL0oR45+VSrvNJbLU/VhjRFEAmYSFEGYMp4sD4KEyCEOzKmSm1trUNEzxXjEaqF3HGGwJpIcHua1yH22Z51qgJkAJ4Z7quVx5uWK9oLZqspB+tXSfvKgLt5uteJPnOsK0PGEmGvuro6hwgkPjXp0XQYk3KgkVekJC0sBJh04eFauXCiT4FKb0Qr1SP0GJTBP0kJKZKRkKS+sRUVD4hwFllD19fXjyuCOdkU8xAFJJhALhlMRCB+QZsa1MggevOeswjwbEG/IXqqEBAoihM4aGxsdIjQR6rNQDbGrJyybMSBhhkxKA7/JitFLtyQLafSp2v+eff5oW758NFGl6QvIVGey0zRsS/MNMoYIvhHvQNZAwK2JEBTU5NDBOdiSM4TXthIDqyapxFTsvSLYKJjXEixIEQwMMrQ+ukLpARF8BUqvH+4Sz1DipjDe5sSVCHojRs3OkQ4S4gGImxEdH7zjHmJFkV+Pf6kbsonz2wAQcDvpMduzHuL0UMtMlizXGpyp6nPMCw2IGD2ZL/Nmzc7RDgtYcrtC5aoQQkymbZOnwBUCRuRDjagwVFFEKHHkAKqCRNTTVQZ34/UhXQt9gC22+IXiGxpbR1PjVaFMaYOMCSYgJS0cyKyJQuOrl+igBypA8faSrWPkAY2BzRBPlGLdSwR2xZYHyJtbW0OEUrXygQRBkGMXON48FjFfC1NCKASRmYOZU60fOdzf0VQepcWyMN3L1Ewnrn4CyPT2rnr4CnAnh1btzpELpVM1jNGy9RsDhFyyUQaExtgXKKGDL4hWkgwlk0YQz+hr+ytuM1FzMzHkARDYHogGgL23osVOjs7HSLc0DncKF8G436XiOmW/E56SAUkmHzq27Ny7qsz7ic4e/EbOXX6Y90UZVDDzuccogDwB6bGhwSOkl3btjlEOGdsZ2UwJmKgbUxE22puV1yMmBhJnqC+Op6V5WL4pnz9jYqgClEWbzCPjsy6dFwqkbsrgdLYuKt0d3c7RLitc1m2RFCCgfjEaz4xGmgtyNVoRkdHXRXicfHM9/oO0AJQBL/YdQH9hesBpNiDdz09PeMe4bzhIEIBJvCJw1HFdtyh7gaVmPLl9LVXgfi+QXPDR3jD3uCsUdmctdkHcP3kWtC7Y8d4ai7X+/UlrRummhozGUV4xt2khgqgTFGHg4604QlNn/kN5egbeArwDk8RkD2L7GWp2pDqmJQg0WjUIcKfDxx85A+jIh8TLHiGDFHaZkWFAKK33wF9BFC6VBwkbIpZw4IUQySaMkF27drlEOGGhkTIxiBtPKRmDCzCpzrcqIEqNDGbImAPPyoLb1A18dUHaGAK8ztAGdDX1+cQAQxQ+cYGxYPFeE8ULE5J0iMGtxVpuvAOanAfsf0DJZhruylgPohfe2BgQGKxmPO/Cf41wF/lLmMDq4aV0T7HL6wbjf1O/i3shnZM/LrAHn6QGCNinhwiHvvvgcKiIikuKZGysjJZs2aN/vHD3x1c+auqq/Wiyx2zbsMGaWgwVRSJSHNzs2zatElaWlr0AGtvb9e23dnVpc2qe/t26ent1eqI7twpu3fvlr49e6S/v1//NxKLxTz/Af7C8h3D+m8aAAAAAElFTkSuQmCC")
PNG.ExoriGran         := BitmapFromBase64(0,1,"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")
PNG.ExoriMas          := BitmapFromBase64(0,1,"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")
PNG.ExoriMin          := BitmapFromBase64(0,1,"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")
PNG.ExoriSan          := BitmapFromBase64(0,1,"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")
PNG.UtamoTempo        := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAk0SURBVFhHxZh7TNXnGcc1S5fdmqxJo61rdBcnddVM23g50RouioDCFLmcw03kfikIAufAWaSBIkjRXrCASmdbCxSKjUXsqFBnTdUqalMnGKw0XYdaLzUdNGuTptuz3+f58XJgyf7eH09+h/N7f+/7eb/P93ne32GaiGj8/IEH5P8RZv0pEFW970yJ2tN90nymV/ae/UBarn4sLdevydHPh6Tn7g3pGf1S491vv574zPeMabtzQxo+uaTBHETpqWNS0ndUI7uzRYM1583zU5gJiOnuHFne2iz3VZVp/KKuQvz21klo216JP3NM3MOXZdfoXen4Zkx+MvfX/zO43z56R6oH+2XbwDl9bs/1YZ0j4tSfxWEBPXy4VaY31MgPD7woK1eulFWrVtlqsHsWD+lu18Uf2lMt81uaFCLr0mn58UMz5WG/uTJr8UKN1euCJbM0Q2oO7Zfjn16SvOdrZXl0pDg2rZO5fvN1rAHj2dyRTyRleFCWdXfovL97r1uW9h2R6Qf3avj7+/tA5u17UcNAAAXEvi9HdLKgqBCpfckjZ441y/f//pd8+809ufnVZRk6+Zp4n/WI94XtsvO5eikp9erYeY8vlOjUCAUnVbtvj0j159d0XtZ5tKtN7utuU5DAwEAfCGkBgkEAXBuX+Ee/nC2tHU0y2H9B3M9kyZvvHpVb338nQ/1d0vBqpSrjLM7V4DMg8dkF0treLt6aalVpxq9mq39MyoB5/PDrMvP1Jk3P6tWrpypCWsjh2X/+QwOIU0Mnxbu9QhdnkRWr/CUiOVx2VJdqiliIa4wzTGKTUjQYN3BtRAKcyQroynDpXGwOILwDjAEJDg62QXA1EASGqhke0Ae7L/bIy33t8mToJpWdHaIOUBpfn5XvBg7JnXNvyoXT7dJo3XvKAgx1Rakq+IaUGdgZsx7RqqOC8J9RJSQkxKeIo3mPBvkE4vhnfTqxMzdVFUBq1MCIjrAgNSKfF/x+sfrBfF4a5JCibJfEuKI1mMM/L1WfIUWMaxg8r4oYVULDwnwglCuU9IPQtQ7dLfJjvNY/7ZSxrwbUeI8ue2ICDs+waFpCmFYLQIzh+b72fbJ0hUMVCi5MUBACWFShx4S3v6bVs379+qmpAYSah7y3t0mrhPxSKf1/7ZP5gSskNCtOIUrrn1WzAskY7rEQ3wNwp7dR05Ge45LGXRl6D7VQhLKngkw5R0RE2CDV505OgJSPDKjs5BYQ8o0HjApcWYhJ2R33UYESRhFAWDwqPEjVWrJsvmyvSFKVgMAnVA6ddUFRriyu+qNs2LDBB5J1uldNBAiKYLY32ryyxrFA+wWTsAAqkJ4TJ57TK8H3xWWZCgJ88wFLcgu2c882eeyxRyRx0xIFYV560u6+TllfXyOL0uJlZnaKREZG2iD0f1owZdU8dk/PDyaiISHrFUtmQFiEVCCzX0iApgQlTP5RBqDG/TtUrZ2eOPUPMIwFgkoExNNmm3hGZLhERUXZIChBvoDBrNQ7uyM+vXxMGjy2B1CDhShHvNLRUSeVlenayLjP4vST/MISNS+fgQGESkQRQFr6ezQLi3ZXqyIxMTHjqbFyFnviHTUQD5EOFKH8bt79u+aa5kSVAMHVgDAGpQBh1/iIDQBFHD9YJ1kpYWpcVCWValirV8W2NWt6nE6nDUIpbbtwSrseO+ntfl+qamqlIM8tNy7XS2N1gUpIOqqbauXC9S5NRXptvqYGpQDsOtoz0bxYEEOb9Jiua4A4e4xP4uLixkGsBoOLuTIIaUf+NiZXr3wmY7cvyu3RL2To1kc6MQDsmHF4goVRQz9b9xgDBOZEDdREGb5veMU6dS2lqUpeDwD5jXOTJCQk2CC8+PClu/sthaHEkBMIpGfXX9w8p6kAgirBG7Twv1zsVBC+wytAoMDI1bflpYYy7cZA4C0U0fIdr1JKF5CkpCQbhM7Kl1GHXtXc9Y/eU4czGSWI6djJh0dqFYDFqAwWPvBBp/YWziAUAYKyB4xn6CP1lXEKw5wYleJgPY4UQJKTk30gevJaN/AJJy8wyE9aTJ5ZCDA+owJKUYacsOSeJgYEacH0BGMLSsLlB/f/VN4ePq+FsbGqVEuXhvZgeqKkpKbaIKTkt3XPSFbPIW3xGAkgdsDENK/d5Rk6KWcPO0QlYEgPCvE3kDQvlDC+4G+AmIseRUo4e1CCApgR8KSkpaXZIBiVtCxv3KX9hMFUEg9TyuSaRegneIe8U8I0PGAOd72l93OjlmjVoQ5eAojnUYO52GBsT+dEIwPi/qVPSEZmpg1S3HZQT0LSg1xAkUdOSXbrcdvmRInKnGBVhh2zIGWOH6ID/DSVpG/WnJ+pCvgDOJoZc9EiOPpZw0AQ2dnZPo/M8uTrADrdH7YXKjmvdkzG7t84sl8BAHnhqeUqOfd4Z+XKjlEAADooaQECRQChGnPeO6ImZY0HHTYgpZyTm+vzCDcBIUwFISWTEuwav7DzzgqnuONnKxRXFEANgAiAgCY9PMuCnGe0CJMWAEzk5eXZICWvvKzuJVCGM4AKYgeYt33wjO4YT+AX1CBdTZlz5FJHnC5OmlADJagaUoQ3eNXk/YN2TvPDpKgBgFFk69atPo8oRIVXQVCEYAcYl4noFyzEWYJX1oXM0evw+R36TqLmtCCoHvwDBM9Q3qaV4wvjjcmKFBQWjitiycarIiCkyKQJryAlEzEhzQhl2BkvO6QFvwBCagAhLZMhop8u0jkwPceAgixaOGFUQIqKiqamhtypdNZnUkM5owzvlbFXLsrT925N/NZhUbzCyQsEQVkDATAqciiiBIcl6QDCpGVylJSU+MzK4ihBaoDgtREIwFDHpInOSCliQhYHhsX5jFpATFbCnNoGwqjAZgie8Xg8NghBWuiu/NDiyk6A00nGlQIMA1OKtGsAKF8mZkJ+OgBBSo0xJ/tCU2LFZDXKy8ulrKzM/t8E/xrgVzmL87C5Tu5+5JcuygLslh/evJtwmqIGL9scgpiZMWzALGx6xn8HEOMg9v9HLJBp5t8D/gEBEhgUJGvWrJG1a9fqjx9+d/DKv2HjRn3R5R0zJjZWXC6XxMfHS2JiomzevFm2bNmiB1h6erq27eycHG1Wefn5srWgQKujqLhY3G63eEpLxev1WsvLtLKysmn/AVIH1OKCqzTKAAAAAElFTkSuQmCC")
PNG.UtitoTempo        := BitmapFromBase64(0,1,"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")
PNG.UtitoTempoSan     := BitmapFromBase64(0,1,"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")
PNG.ExevoGranMasFrigo := BitmapFromBase64(0,1,"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")
PNG.ExevoGranMasTera  := BitmapFromBase64(0,1,"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")
PNG.ExevoGranMasVis   := BitmapFromBase64(0,1,"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")
PNG.ExevoGranMasFlam  := BitmapFromBase64(0,1,"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")
PNG.ExoriCon          := BitmapFromBase64(0,1,"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")
PNG.ExoriGranCon      := BitmapFromBase64(0,1,"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")
PNG.ExoriGranIco      := BitmapFromBase64(0,1,"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")
PNG.ExoriHur          := BitmapFromBase64(0,1,"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")
PNG.ExoriIco          := BitmapFromBase64(0,1,"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")
PNG.Runa              := BitmapFromBase64(0,1,"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")
PNG.ExevoFlamHur      := BitmapFromBase64(0,1,"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")
PNG.ExevoFrigoHur     := BitmapFromBase64(0,1,"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")
PNG.ExevoGranFlamHur  := BitmapFromBase64(0,1,"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")
PNG.ExevoGranFrigoHur := BitmapFromBase64(0,1,"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")
PNG.ExevoGranVisLux   := BitmapFromBase64(0,1,"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")
PNG.ExevoTeraHur      := BitmapFromBase64(0,1,"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")
PNG.ExevoVisHur       := BitmapFromBase64(0,1,"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")
PNG.ExevoVisLux       := BitmapFromBase64(0,1,"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")
PNG.ExoriAmpVis       := BitmapFromBase64(0,1,"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")
PNG.ExoriFlam         := BitmapFromBase64(0,1,"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")
PNG.ExoriFrigo        := BitmapFromBase64(0,1,"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")
PNG.ExoriGranFlam     := BitmapFromBase64(0,1,"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")
PNG.ExoriGranFrigo    := BitmapFromBase64(0,1,"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")
PNG.ExoriGranTera     := BitmapFromBase64(0,1,"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")
PNG.ExoriGranVis      := BitmapFromBase64(0,1,"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")
PNG.ExoriKor          := BitmapFromBase64(0,1,"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")
PNG.ExoriMaxFlam      := BitmapFromBase64(0,1,"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")
PNG.ExoriMaxFrigo     := BitmapFromBase64(0,1,"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")
PNG.ExoriMaxTera      := BitmapFromBase64(0,1,"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")
PNG.ExoriMaxVis       := BitmapFromBase64(0,1,"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")
PNG.ExoriMoe          := BitmapFromBase64(0,1,"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")
PNG.ExoriMoeIco       := BitmapFromBase64(0,1,"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")
PNG.ExoriMort         := BitmapFromBase64(0,1,"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")
PNG.ExoriTera         := BitmapFromBase64(0,1,"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")
PNG.ExoriVis          := BitmapFromBase64(0,1,"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")
PNG.Loot             := BitmapFromBase64(0,1,"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")
PNG.EatFood          := BitmapFromBase64(0,1,"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")
PNG.Ammo             := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAbKSURBVFhHxdjJjpVFFAfw1o1bSTTK0E3f7nt7pAegGwi0CM2oIQgEmedB0hCmMDYmLIwLE9/BB3DlwocQNz6GK99AU36/Opy+n8a9i0p9VXXO//zPUMO9A6WU2t5ft678Hy3t/4PElpmZMjExWTojI7X5npyaXOtHRkZLb2yszMzO1rnh4eGqMzk19VZmqq53u93aa6kzMTFexsbGK26us2muElkjsWVLNbB127ZqFOimwcE1choZIOQY8L1p06YyPjHRrE1XHTLz81urjHV62SdR/Wi30e+NlaWlpbJ3796IBqDpBogQoLn5+coUgJ5iEJipUUBiYWFhzdhAE9gwNFkxxhvvk5RxRgGWsR7G0NDmhlC37Nu3L4hQyhQkmdm5+ToGmt7wdKIhDQDwfEMYiTe/i+1AeNnMk7dGFlakeaJid7u9isMhDdby8nIQIcBDStjqgYlSRKZXJienqhfbtm9vAIIImTYRYzLShbiISW1GJI0PD3fK1NR0Tf2GDRvKwYMHg4hFgrOzc2sGNEDYI5Ng7ZAz/umPf5Zvf/mrdL/5tY4z7Bs3bqyyDOrJ98Z6FSMjyjmkDh8+HEQAM6qlEkDp0iehJPlvEiKCSJKBIYpJnD4d0WELEWMR4eDRo0eDCA8s2DGbm+gIP4CsD16lDC/aJLIlEfPWp6e3lPUb1pfx8aZO3m5xjeFwUjSGK+Znn3/erxHs5+bn1r4VWxpHBoG61mw5hj66+UNtjCeRnLOOPIMc6x8B49XZTmdkrR4RO3bsWBAxwYiqJyBksUMiDUJpHrixtTYZUWiTkBYGZmZmy8amcAeHhtbqgnPswU67x48fDyK8z3ognCGTogyluSSWQEkmiRirBzqiMDg4VElzApYzQ0pgKNLEPHHiRBChON+khULuIF7Z+xR5w4B5vSY6DP/83bul/Pa4fP3FO3VcT+O3OAiLgDphAxbDcNIp86dOnQoi9r3Jfjp6FahfI+M1bZkic8g4kZOMnu7H69fXVPhO7wMj7qbhkU6d1zhr7fTp00EEQ/ueB8ggILTmIw39ExIBoGSAIbDc+bD2wu8sQjhJhMFuJec+oictiQ3zzJkzQcQd4mQVCcq+nZ4MZpH51qslxmxPQG0ixtbaEeGQ+R07d1YnOCRq1dnmG+a5c+eCCOOEF3csVjJZG3qNMJAklKQyNTf2zNQ+i48RxjgBVwoYhWljIKeWrJG/cOFCEElh4MIb13p4TFn4sojD03gSMNYmQp4jGX56CpVROOFcv0jJwLl06VK/RhAZHBqsWwxg1oJ5AMINIGvD4QekTWTXrl11jU4aIg9Pr/5gVGLNAemwM75y5Uo/IgEQB072OZ/fwH1TJuOURCBrxJo5BPQaffJu2d27dzfp31Hn7EJRtnbt2rUgkrkV8iQhMuYYzx4A2TaxNhFyjJm3nmQVKjxj9dGPXBxwN27eDCL/lUMGk7GW8w4yHhsDQiBTg6CLMiOZMuYVae4WKfIKrAdlcw3cunUriFi0he0QIHIPJLZubOmMjG9blwGE2kQcjCmfsvCQR0w09Oa9VWFoX925E0TkDwlnQG5ZxZrhD+B46tlRiAPIYz5Tg7g1JKRCFGBkFBBX9OmsdTZXVlaCCCECwioyBIMQrxz3nTrHWy3OlF413CZiDk6kzvnTq8/NdEJE9PQyMtbu3rsXRBYW4iGUXkYo40GUCtYoiQgDuXW/3/NB+bLzXu2N05AoTDcy4UDgGtMT5dHR2Ax2z/3794MI4a3b+r9FCGbNBIm4BBnI45uhNpGfLi/WcUYvT1YERAJuvvJlwAaBo2gfPnwYRLIe5EvL/CHCCwq+MxJZpEmg3ZuHBwcZDtDPiGubNw+XhcXFSpTTjx4/DiLSQBgZBvVS4LsSazwy54YGZC6j4S3iW5/pQZiBpaVPagSN6YmiZ4AxPDLmnjx5EkR4iXGmQp/EAFjb3tQRgKwXBuuj6I83QaTp811CrxptosGYd67I0vNela7tzQ0v6og9e/asT4QBBiM68aIyL4cAanib+0GPUEYhI9Aeyz8iMINQp27nTLuUIIsIOy9evAgiQSYexulxVHlsvdiOceMC882gRj4iF2Q0N2573jcdZDiGKEw3/evXr8vq6mr8N0HBSZdbNQGQcVcAEWbzChE5stZjLXZK6uY9RSaw4kZHQJ86SLwl0tAPIgP598C+/fvL8oED5dChQ+XIkSP1x4/fHZ78J06erA9db8wzZ8+W8+fPl4sXL5bLly+Xq1evluvXr9cL7Pbt2/XYXrl7tx5W9x88KA8fPaq748nTp+X58+flxcuX5dWrV/W/kdXV1YG/AZwA1G7x3SVQAAAAAElFTkSuQmCC")
PNG.SpecialPotion    := BitmapFromBase64(0,1,"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")
PNG.Weapon           := BitmapFromBase64(0,1,"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")
PNG.CurePoison       := BitmapFromBase64(0,1,"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")
PNG.CureCurse        := BitmapFromBase64(0,1,"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")
PNG.CureParalyze     := BitmapFromBase64(0,1,"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")
PNG.Haste            := BitmapFromBase64(0,1,"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")
PNG.GodFlower        := BitmapFromBase64(0,1,"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")
PNG.ExerciseDummy    := BitmapFromBase64(0,1,"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")
PNG.ManaShieldPotion := BitmapFromBase64(0,1,"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")
PNG.SpellMax         := BitmapFromBase64(0,1,"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")
PNG.Dance            := BitmapFromBase64(0,1,"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")
PNG.TimedSpell       := BitmapFromBase64(0,1,"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")
PNG.MagicWall        := BitmapFromBase64(0,1,"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")
PNG.MoveItems        := BitmapFromBase64(0,1,"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")
PNG.MoveItemsBP      := BitmapFromBase64(0,1,"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")
PNG.MoveItemsMouse   := BitmapFromBase64(0,1,"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")
PNG.AntiPush         := BitmapFromBase64(0,1,"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")
PNG.SmartRuna        := BitmapFromBase64(0,1,"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")
PNG.Quiver           := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAlRSURBVFhHxVhZU5vJFf0cjCe2BUJCgBBIbNqFhFjEborFbDIIAQIhdmNjBmyMbbzJC2YqladUuWZqPBO74qQqVVP5A8lU5Slv85TJbzrpc5sG5xfkoev7vu7b55577u1FsgBIq3A48P9oxv//kGiNxxEOR9DU3CyN75Fo5PzZ3NyCQDCIeCIhfY2NjTInEo2e2URl3O/3y5PNzAmHQwgGQ4JrxumTfULknERrqzho7+gQpwSt93rPybHRhiC0owO+19fXIxQOq7GYzKFNMtkuNhznPPM0RPls8av5gSAGBwcxNDSk1SBQTAHRiEBtyaQwJcB1JVoqGkMyEoHP7Yanugp1tW50dXWdO/P5Gs4cRQQjpKI3pPhtVCAmv/lkIJzXovqHh4c1EU4yKTBkEm1JrKZn0R/RitCGkYYVaQK4q13qO3k+x11bq6M8i16PUanWszSHxc7vDwgO08pGrNHRUU2EBoyQk8iWz5X0DPpb28+UCSASiUoUHZ2dCqBBHLpdledp4HwSoA3TReLsZ2qNIsZ5Y2MTokplpt7j8eDmzZuaCAdpmEi0ybOQmUNfOCZAdEQyBuxLyVNqXBwrQI4ZW/bV1dWJLR3ySftAMCB2VEGwVHAkNTExoYkQmE7ZOOnZg/sCyHTxaQhxskkFW48izoipGPs5TmWIwT5xpt45n/a0pS8S4TcDYIBTU1OaCCPgwHXrEl4fHor8BGDR0QGjMjaMwuR7YTotzvjOZpSzfutAd34b669PsfG8eL7E2Tiug6QajTJvOp2+qBEClikip48eyTuLzTgnGRIQO7Xk+ORKKx49kncCs1EFq9SJ5Oox5t9+gOVuRkmtFwOLa4LBvYTbQ1NT83k9ktjMzIwmwg4Cnjw8kuVKyZgKkwZKyYlUht8ce3LfpE8T5Lt11YWOpX1EVl9h79PPsGqjsKqaYNWF0b+4IQEyONoS2/jNZDKaCKNnPbw9eKBUsc4lY4qMlOwzxPhdfPJEJGcBkgwd+CYLSGwWMfXqE7JvP+Pxx3+gJHgDpZEBRahFkdmCdaVcMFikBjObzWoidJZMtuF2Jgu7IkLmugDD4oSKsODYb4o6q/IabmgUsgTuyd9BzeQObv3uJ+x8+DvmTj4juvQUSyefYIVvwAp0q1TFMJDbERwTFH0vLCxoIlz37OQGVq6IMEqyvaiRkGxWJkXsI5n8bAa+hgDKWrqwWPwB4cIb3PnTvzDx5jPCG0V4Z+/BM7GJzOtvYQUHYfn70Je7B+vydQmQwRIrl8tpImTIdU/JV1SkJKCXpd6Wv9whSYDR/PrLL/jj+/fwNkVwPTyE/e9/hj//BlOnPyG4/gblo5so7c7gWl8WV3rmEMsfIT5/F/GJnKTFYBNzeXlZE4kn4rL+qURuJo1UKISySyXi0Gw+fOeTtcSN7wdFIqTGbPYaBMfysOLT2FNq1GYeo2b6a0Ugj6s9iyhNLeCrgQJ8M/cQGs9JQDwOJFj1TsyVlRVNhPKQXao7JWSoCg86KsFGY1MjJGRI9XKbrm3A4NIurNAIZt+plBReon56F2V9i0KErX5qB4kFlZLSclkYVJsrU6sdwerqqibCDrMTsvi4R3QoY3dVteSS8rFmDBGqUm2zYzc9iYFIDDtPvoEzpfYCTxtypz+ibfkQ9r45XE7dgmd8GX3ZDUXCJlicz8A1ZpOosr6+flEjJOL1eeVYJjEqUFlZiRp3lQB4fT4BoKRj8+uw2z14e28Pp/sHcLv9iA5lUNs7DasmAqu+HZ3ze0itPUDP0pbgcR73H2JQDW6QDWfbxObm5oUiuor1hmOe7G9qaEA2M4P6lhZYX9nQoZbf3Iv3CI8W4LTVYIuntEpRlb0SjZFu+JLDSAyr2nAFYV0qE1w64ynb39+v0t8tfVyFZr/a3t7WRMzGQskNCSrDvv/8+1f8+N13qG30I7W4jTm1dd969xcsvP4IX2wADpsTfpcTzVVOOBzVsFXU42qFV939rgsWt/Tunh7B4zfro7e39zxwPnfu3NFERCrVwWZySHJsHz98j0BDHWxOF9YVia8//ROzp39FNH+M9twBPMkbKFP3Ene1Uy5LXq/eBgyWCYxFalYLU8RboGyU8QTu3r2riXCQS5grhCAsIILopRtATzSA6mo3Hn/7N2Tf/RnR9SLCq0/VTrqJ8p4J1HX24orDCbuzXOwZiAmIeOZOYk5h9vOuSpJs9/b2NBHmjyS4P5gly2IliNtehq3pMfTHYxha3ER8ZR/+lftwTG+gpG9WbVppNKXzCI3NCHEGRRJMBVUghlGBq4RFb4LlOH3u7+9rIjSiAe8fVIaGJJNeWIa9woXXB3s4OVLO3R4MLm+g+dYyrqTG1aY1A+/kGlIFBVRqFzWIQ4ecz29eyvlOFfQhqU9zowzHDtRJLkS6uvRFiDJRRi1lBGsvf4/YZE4tVTuW02NIxVrgcJYhPjKG6s4BhEcW0JdRS6/EJuQJbBxRhZiKmv0Gl99UgntIS4teDFw9h+oyJkRo3N5x8VtEnylx5N/+AW35ffja++FQe4rPZUO98xqcVS5VEy5cVitER6/rgY3fxGNhkhAJmHPL3PKZAS4QzmPRHh0daSKmHpgvNpO/3qUdtBcO4Z/cgKfzJq451OpwOeBVy5U3eHGibKmmVjEq84nHJ8lcbA1acbYGdX3oSqWEKIN+9PixJsI00JhkmDM+uc1bl+1oHsmhIjWLyq4peBO9uFbuQE25TUAIavJuVOE81gYdDA7ekJrhN22ZrsZmnrwB8UEb9h0fH2siJipTVHwaYtZvyuXo7l+8jRvzW+hWq4OgXP8EYa6pBvs4l/dRzhOnSg064z2X9UEbjtO+U532VJ3Enj17dkGEICSj1QkLAPuZQxajdaVCbfFOeWdEVII2PDP4zdqgLZ0x/yRCTE2oSZazSTvVJFkSIcaLFy80EU1GX4zZCEbWZumZgiQIwYxaxp7vRn7ahEJaWdPPd84hGZIlUWLypD85OUGxWNT/TXACdzoq8iUAyfCsIAhlZj8LkeRoy3E9pleKmWvOKdpoLH2ikwCfZg5JnBFRF1RNxDJ/DwyPjGB0bAzj4+OYnJyUHz/83cErf3Z+Xi66vGMu5/MoFApYW1vDxsYGtra2cPv2bTnAdnd3ZdvePziQzerw4UMcqd9LXB3HT5/i+fPnePHyJV69eiX/jRSLReu/ocj5/FzNOqIAAAAASUVORK5CYII=")
PNG.DragQuiver       := BitmapFromBase64(0,1,"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")
PNG.PairofSoftBoots  := BitmapFromBase64(0,1,"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")
PNG.ChatOn           := BitmapFromBase64(0,1,"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")
PNG.GoldConverter    := BitmapFromBase64(0,1,"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")
PNG.TrainSpells      := BitmapFromBase64(0,1,"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")
PNG.TakeFromFloor    := BitmapFromBase64(0,1,"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")
PNG.AutoBless        := BitmapFromBase64(0,1,"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")
PNG.NoPotion             := BitmapFromBase64(0,1,"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")
PNG.HealthPotion         := BitmapFromBase64(0,1,"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")
PNG.StrongHealthPotion   := BitmapFromBase64(0,1,"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")
PNG.GreatHealthPotion    := BitmapFromBase64(0,1,"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")
PNG.UltimateHealthPotion := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAkrSURBVFhHxZhpcJZXFcffsIYUjJEKZE/ebG/2hSwk7CEQIEADsoe1ENqkUqA0SUMtQ6sdanElY+sUmGKVdsSRTp1WR50pMmNFZ7BULRURqp2xUmxHET7gKPX4/92b+yb1g1/9cOY+z33OPed3zzl3ed+ImTn5eEqK/T8k+P8IRFl5ucVixZYbjTrhubikON5Go3lWUFho5RUVri8nJ8eNKS4pGdQpcd/z8/Ndi4QxsViRFRYWObvhOz7pcyBxiLIy56C6psY5xWhGZmYcDkEHI+jhgOeMjAwrisX0rdSNQaeqqtrp8J1xoQ2gtHn5Gl9QaDNmzLBZs2b5aGCoVIZQwlBlVZUjxQAtAz1AuYsCELW1tXFnWVnZg46KnY0izT5A8R6igC3eabHBuDz1z5kzx4MwKKQgwFRUVrl3jIbZMNOYoDGA4SoBhzFTUlP9LNVPn/9GpMoG0xxzevn5Bc4OE0Kw1dzc7EFQYIYMgpYWY0TJR6bAiotL3Cxqpk6VAQ/iHfo0MJ53dEgX4PST2hCR4DwnJ9dKSkpd6tPS0qylpcWD8BHFiorKuAMEQziKqKaDDA85Tp1jGWQcuiHs6enpTheHtOgXFBY4vRBRJgfUggULPAiGcYqEQRgkXTh/Y3Gik/WTPIw3WujAmTERGw4bxDkbjAz66OILEN6ZANFauHChB2EGfGDF/LexG4fKzV5dZB9+e7b9bPnkOIyXKZIk9/y1j0Xs5lcjduvZSXb75Wn2/hNep6hIdTK4xBEc+0kSjRznd9HixUM1Aj0DMfbaVm+Yd0D+9cJcuz5QZ79YlGInlpZaZuonrfCVc+774rZFrt2XHrG+tIjtz/LPh2IRu9TrbQxtAUVusrm50Xg9ArZkyRIPQgcDLvZ4Y8EQfaTkD9sm2lufSnFwL37hoE2b12K5+89YJCFi9dXV1p0Yse5kr0/OSRUOuu6I2IU9vj/UBdHHH2C0BGHZsmUehKUWQIAIIaMPOd8atWOx8Xb8rln2xKOfsbaYcnztd+5bZV6eTRDQ9nERG0geER8T5Pm5vmW1sWeEGgQYPwC1t7d7EOirqirdgMNlvsiYFWufvgMP7LY1LdPtkUf6rWNJqzWNjtivd0ctmp/rQA6M1ZgRXhpGaSJqvzMmYoUJo21H8pg4FBA4xj4tQPhesWKFB2HdhwgQFcIMLWGkr+W3r1rShAmWMX68VcgBxQjIB0fb7O/PLbeGhgY7JYArAjirdr10ugVXo+dowph4mpGcaG68cJksfleuXOlBIGTdh1ohPUgoYCTt8XNOAOD9RMYIK9XGNv6Bi5Z585rNnDnTLgjkkgSQ70raJZMjo2xnSsRStfOmKoUOxtWR3/KJyOrVqz0IZwg7IxvO8NoAhvbpaWnxPuRMzUjLltEMPVep+ic8edlSfvCeg3lRUehU6ojQ9yRpCYkOJDEx0X4iyF0SbBBtVg5Aa9eu9SA4h66uvs7BUBuELjjekp5sURmo0lnSWF9vhaMSrK4gz642NNv7EmBOVo63Bi3Nz42M2JeUlqcFc0Qgd45IsU2KzOmOiN2RMM5WyE7lYGTC6lm/fr0HoYN8QUd1+2Pdr3MGrCrKdu0cGX9OS/WncvZ9GTwveUXyRRkuyc52MLUq+scEckG6PxfIXkEwlrpjf2KfSk6Y4PoQ/GzYsGGoRgDJzMp0SwwAtmVoh4M0yfA5yXsCeVsA3xLA2fpmu6KoXNY7kZly9ZrNbmq0y9L7m/R61dZKJk2a5GDu1jLfkzPaAWGTbGzatGkoIr6K/YYT2tAf6Ktl+Jhm+LbaW9Xz7PqCVfZXQbwhiG8ICpCCgTM2ffp0Oyq9i+q/ITmi6Hxa7xOpK72njxtrnUk+OtjdsmWLBwkbC4dcgCAy9FHVKDMwT0Z2aHZflpyU0VOS05JnJG/q228kwPyw9U7r0Ep4XXp/Ud9RtScE0ycYUtWqZ2w+2+Tbu7dt8yCcgmFth40GuOE77DOpmo32m0PK/49k6DU5uC75pyBubO2zK7lFdkpOAHlKO2x7W5sdVT2dFMS7iuCjap/SOyBMKDk52T4b9SDbt2/3IESAJcxqIR0UEED+fPBH/AslEUtKSnIgPxbIWRn7h+Tf6UV2e91j9sHqLjsmR4AM6IxhKR+W7oD6/iy9wwLpEVCP2qxBEOySgR333ONBuCUBwf2CFqFYgQqpCWGskbEBGful5JYM3h6E+X1Ts31T+scFCczYr/zJVukM+bxgWM6va1y3xnRKJiuK2OKMw2dXV5cH4WaVmZXl7qdEBgAPRJoK3E7IwCAU3HkZZoO6qfbDQaBzBUX2kkJfLZDsy29Zs6KyRxHpVd8aAVCwjdK/S8/jBEPa8dN9330epLZ2anzVcLXz17vij1zz+MYg9hhq517NkuJ8UhF4U3JdckN9h1XUfXIOzNc/MdKdI9RFt77Pk1RqTItaQJgoF+6dO3d6ECJQXTP0W4R0hJrxEETF37iJHAY4m/ZpT3hJMzwsw3/ULC8I5LggDqj/oJ5dZM5fsjYV7lLpLJBsk7ioaoFgh58uu3bt8iChHsiXu4fKQPg5UKpnBvAMEN9IFYBjZJBZzpcc0ayRx/V8r+BIxaZBmIkvv2NNTU3W2NjoILKzc6y2rs5NjEnv3rPHg4TfNKE2aEkBz+GCTB9RIGL0hRsXhrfL4Sw5rhDADEmtZKnep0lylYoyndJs/+wv1brRhVoDghW7d+9eD8Is/R7iU0EbwHDGt6mqIyIS6qW83P/sxCD5fl5gVyrq7d262Xa6ss4eVnR2CPCgaqZOQJzWHJzjHn7Hcn511Y0j6txPenp6hkBwgEMfnZijpZ8c4hgwfofQuhQpSujQF2b4v4SdmkgCw+nNJAHBRl9fnwfxMP63b5gxK4ZfekBREwAAhrEQraDvI+dPb3T4CTG8n2fGAMPEKFRsctLv37/f+vv7/X8TDOBXeViqwQAwXP8xwqqh35/K/r7Cd/8tNw5GG84pdLwtf6IDQBvGADEIoph5kEj4e2DO3LnWPG+ezZ8/31pbW92PH353cOVvX77cXXTZG1avWWPr1q2zjo4O27hxo23evNm2bt3qDrDOzk63bXd1d7vNauf999uu3bvd6tj74IPW29trfQ89ZPv27XP/jfT390f+A7IT8HA6hjpWAAAAAElFTkSuQmCC")
PNG.SupremeHealthPotion  := BitmapFromBase64(0,1,"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")
PNG.GreatSpiritPotion    := BitmapFromBase64(0,1,"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")
PNG.UltimateSpiritPotion := BitmapFromBase64(0,1,"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")
PNG.ManaPotion           := BitmapFromBase64(0,1,"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")
PNG.StrongManaPotion     := BitmapFromBase64(0,1,"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")
PNG.GreatManaPotion      := BitmapFromBase64(0,1,"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")
PNG.UltimateManaPotion   := BitmapFromBase64(0,1,"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")
PNG.Mark1 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAACwSURBVChThdG7DcIwEAbgv2QQeiRKaGzp/CIxpqOiYQwWyBAMwQBULMAIrBJ8gQTHtkRxsXT3nS86Q2uNpmng9wF6s+7zsNZCCAGlFGCMGTAX7teuCM5L+cX8GeHrcZvFqtv29Dx+psQ/+AsX5+U0YcJcYJBCPqs4BSm8nFyJuVCDPKnAnBwbUjjDUsqioQZ3cb1wzsWH+a0vD87z2rz3QAgHEBHath0a8mBk44VEhDccC/Uc7j9DvQAAAABJRU5ErkJggg==")
PNG.Mark2 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADCSURBVChTdZEtEsIwFIT3Br0LDlTDpGn6E4LiFtwBh0XgkMxg0R0wnALHVUL3QTolHcRWvP3eZucVxhg0TQO38jCLWUhlrUWe5yiKAijLUmC/nIfbaT8R50p9YX44uJ+PIcvCINS7cNhuwrO7yAIbyNNMiEDUeIE+OYG5TYPpUWn6D/x6XEVpDc7+woTG4ARmp2ikqdTQWSkl14jpaTLn9Ov+vKiqqv8xn/MxIVU8m3MO8H4NrTXatpVKqQjZPlBrjTfj4PpBuvO0AgAAAABJRU5ErkJggg==")
PNG.Mark3 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADcSURBVChTfZEtDsJAEIXfcaqRqG6y/aNdiuIC1dwAww0QHACLwoLEcAGCIkFiMDVYlnlLt9mUBPGa5s03b6ZTpGmKsixhpjXS8cgOlec54jhGkiRAlmUOZmG9mNsHYHcivlP0lepgPmgcNkt7FejdNPYSNNB3U2SDPvF+2rvUl6gNYPp+goNpULcOZtM2gKkfmDoLdOzA/ar5D1OEQpDq4XBcG0V9svf6nZVSroFfzcJTQK7iYX+NiZwXRVHIj/mejwCLfg2fyLMZY4C6nkFrjaqqXMNQhHIJ1FrjA6AM9cIyzsKsAAAAAElFTkSuQmCC")
PNG.Mark4 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADMSURBVChTbZEhEsIwEEX3IBiugGAGVMKkaUobguIGSM6BReAwYLBoBsUpcJwAhQFX+he202QQr012XzbbLVlrqSxL8rNAdjyoU5xzpJSiLMuI8jxnOUxG9e18ZJ7LfrtGXOufjIeI9+uJgXzZrXktB9ABX52K7/0wOoA3PJaREB4HW7+2PaYbb2VURkCkLohvVotYlhb+ichFslRPiWStNU8DCfkgAXvEkZ8246WiKJof8x1fVxRkbN57ohDmZIyhqqq4pRRIrilojKEPBhYIz9qgmfUAAAAASUVORK5CYII=")
PNG.Mark5 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAACiSURBVChTpZHNDQIhEIVfC9uKR0+QDH+yiF1ZhB14sQBPNmLsZGU2OxhGbx4eEx7fG8gA7z1yzijHCr/fLVoxRhhj4JwDQggrzAf3y/lL7Fu7wbwIeJ2m5fm4dfFeAvyCAWxOD3B9AUOgwxqQyv5PWAfE+6+zBriKOmytHQJytQQEPLTxIqXUPuYzPi32eWylFKDWE4gI8zyvAS2GYmtIRHgDI4PyNhWFoQsAAAAASUVORK5CYII=")
PNG.Mark6 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADASURBVChTY3Bzc2Pw9vZm8PXzZ3CzMvqPjj08PBgcHBwYXF1dGRjc3d3BikESu2e3Y2CQuKMjVDGIgCm8d3D9/2pdBjCekBsG5sM0gFyAohCEc7RYwBimGFkDXHG8GgtWDNKEoThCmQUrxqoYZmWQAgsYgxTBME7F3rLMYAxSBBODK3Z0dETR4CbNBMYwxTCFXsDgZfD09ARGDCL40DFIHBRsvr6+DAz+/gEMLi4uDD4+PmAN6BikyANooIuLCwMAnMDsWtpAqCIAAAAASUVORK5CYII=")
PNG.Mark7 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAEFSURBVChTY3Bzc2Pw9vZm8PXzZ3CzMvqPjj08PBgcHBwYXF1dGRjc3d3BikES9w6ux8AgcUdHqGIQAVNYycAAxuhssC1AF6Ao/Kgm//8gkM4E4ttA/FRSBEUDWDFIIJGN7X+ysvj/nz9/wLE3H8f/YEaIDXDFIJ0VzMz/ObnY/uvraf43MTH4r6Ek+58FqHAaE+P/HVNqUBXHCgn8P87J/n8z0JTtQAxyzhUudrA4hmIQruXj+l/Ezvo/H6iwGKiwUoDn/4TcMIRiR0dHuAaQBDqGKfQCBi+Dp6cnMGIgwQeSQMcgcVCw+fr6MjD4+wcwuLi4MPj4+IA1oGOQIg+ggS4uLgwAC87fj4ox9goAAAAASUVORK5CYII=")
PNG.Mark8 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADNSURBVChTfdE/DoIwFAbwb/Ykzg5EnahpCwgV2TgBTsRVTuDCDYyJk5txNk5OHqGbV6n0RYj80eHr0P5eX/MKKSXCMIRaxZDzienG9324rgshBOB5HuF4MTP3w74Xu8/YB9ulhq/HtZViDHNiIyqwL6DW/2AB0Ll1g/gbPi/HYZwkiUnTtAXtfg8Xu53RWlPB1HEaOIg3WWbKsqSbf2LGGE1jm+eEulDfzjSNZTVeBEFQfYxoOnRTj00pBcTxGpxzRFFEBd1Y5FcXcs7xBqhX/ePOdBkNAAAAAElFTkSuQmCC")
PNG.Mark9 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAD1SURBVChTY3Bzc2Pw9vZm8PXzZ3CzMvqPjj08PBgcHBwYXF1dGRjc3d3Biv2dLP/vnt2OgUHijo5QxSACJGCqr/0/Osjn/+19a/7fO7gejq/vXAbWAHIB2GqQCWGOFv8/fvz4vzgtDkUxCIPkQerAikG69y2dBtbw8OHD/1U5yWBFID6IBsmjKAYJwjSsWbMGTEe4WP/fs3gKdsXIGhY4coHpjbO6URWD3ARTDFIAwzANcDc7OjqCQwPddJCJIIUuuvLg0PACBi+Dp6cnMGIgwQcyAR3Dgs3X15eBwd8/gMHFxYXBx8cH7CR0DFLkATTQxcWFAQCuMgHnkR/dmwAAAABJRU5ErkJggg==")
PNG.Mark10 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADTSURBVChTY3Bzc2Pw9vZm8PXzZ3CzMvqPjj08PBgcHBwYXF1dGRjc3d3BikESu2e3Y2CQuKMjVDGIgCm01xb6f+/gejhG1gByAVwhSBKkmJHxAxyDxE6umAzXgKHY3v73fzOzb/81NB785+O7DbcBq2Jkkzk4roE14FS8dkIdCgZpwFAMchtMMUgjDIPk4IodHR3BGnZMqflvpCqLohikCCQOkvcCBi+Dp6cnMGIQwYeOQeKgYPP19WVg8PcPYHBxcWHw8fEBa0DHIEUeQANdXFwYAD7p+deHYgt9AAAAAElFTkSuQmCC")
PNG.Mark11 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADRSURBVChThZExCsIwGIXfTQRnJ3FQp0bSNrWNEQ/iHXTQC7iIk4uDi+AgiJOncPMqsS+aUFvE4RX63vc3f16RJAnyPIeeGCTDrq1LKYUoihDHMZCmqYPNaGBvu3VD9IX4wHzQeFwP9nk/NUSfOTdwR++Xc3vZrn6KOTkHY9b6qwCfNwtntNcd2z/2gvhOn3mAuRePqw54kD7zAPPWvEx1wIP0mTtYCPHVhh/woG9jXNaLLMvKH/Our9qvl69Naw0YM4WUEkVRuJXqIqTKD0op8QL1T+9nuSdhrAAAAABJRU5ErkJggg==")
PNG.Mark12 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADNSURBVChTY3Bzc2Pw9vZm8PXzZ3CzMvqPjj08PBgcHBwYXF1dGRjc3d3Biv2dLP/vnt2OgUHijo5QxSACJHB957L/9w6u/79tZtt/hiB5MA3ig8RB8iAXgK0GmYCsUKldB0UDSB6kDqwYpBtZocUqExQNIHm44k1TGlEUwjBMA0gerhgkQAjDFS9sygNbhwuD5MGKHR0dUUIDHcNCwwsYvAyenp7AiIEEH3L4wjAs2Hx9fRkY/P0DGFxcXBh8fHzATkLHIEUeQANdXFwYACR872ed2YVWAAAAAElFTkSuQmCC")
PNG.Mark13 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADASURBVChTjZGxDcIwEEW/EEgoQmIXOqhi5NgOiTHbMAJD0FOGGkHDANR0NAxi8g2JgtOkeJF19/xzOkMphaIoYLcOarXwMcYYpGmKLMsArXWQ3Xrpr8dDD9aF+Mn8sPC8nPzrfg7sE7Rn1tnnBOHXTOiKXZmwTy/ITSqlajL1t3HSXiLs/8ksUnpjHniMZu2lntxNJk1qTx48sxBi0DY29XqR53n9MN/1MSGmWZu1FnBuByklyrIMI8VQMnWglBIfPSH2n7HzyUsAAAAASUVORK5CYII=")
PNG.Mark14 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADBSURBVChTjZGxDcIwFERPCCQUIbELHVQxchybxJhtGIEh6ClDjaBhAGo6GgYxOYMjlICU4iL7/vuXr28opVAUBezaQS1mvi2tNdI0RZZlQJ7nAXbLuT/vdx3RF+ID80Pjfjr4x/UYtE3QnOmzzgnCr5kQixH+bmCdXIDZHQHqMkx8NRo3Dax3YEK3wcQ/MQ3inf5POIqpf5N7zyyE6LWNVb1eGGPqh3mvjwltxbVZawHnNpBSoizLMFJbhHQdKKXEC/8a9p8j+6uiAAAAAElFTkSuQmCC")
PNG.Mark15 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADFSURBVChTjZGxDcIwFERPCCQUIbELHVQxchyHxJhtGIEh6CmhRtAwADUdDYOYnOFHJGkozkruXs5fPzDGoCxLuLWHWcxCV9ZapGmKLMuAPM8j7JfzcNnveqKv1BfmQeNxPoTn7RS2CRrxnT5zThCvZgMDga/DpIEp5uQiLK0C3weTFsy8BTOU1hem4TgaN14PllZCv3Cv+e+ZlVKtbcgH8kyf+apeL4qiqH/MZ31s6ErW5pwDvN9Aa42qquJIXRGydaHWGm+/Dfaf/Gg2TAAAAABJRU5ErkJggg==")
PNG.Mark16 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADHSURBVChTjZExDsIgGIVfjCamMfEubjoVQynYIt7GI3gId0edjS4ewNnNxYNgH4op7eLwoH3v4+fPD5RSqKoKdu2gFjPfldYaeZ6jKAqgLMsAu+XcX/a7nugL8YW50HicD/55OwVtM/y+6TNnB+FqVmiD12GWHGBOLsCxKoHjaOxfmIY9HmCewAxi1TZM9eB4JcP7YBL26CXw3z0LIZJpEIriP33mq2a8MMY0D/MZHyt0FcdmrQWc20BKibquQ0tdEdJNQSkl3nhg9p8kmSrbAAAAAElFTkSuQmCC")
PNG.Mark17 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADUSURBVChTY3Bzc2Pw9vZm8PXzZ3CzMvqPjj08PBgcHBwYXF1dGRjc3d3Biv2dLP/vnt2OgUHijo5QxSACpvDKzuX/7x1c/5+z3BxMwzBIHuQCsNUghTBFIMyRZwxnr51QB5YDqYMrRpZkS9MD0zCFGIqRTWaN1vzPnqYPxjgVwzBLsCrYVGQNGIqZfZQwMIqbHR0dwaEBEoC5k9lZDs4GYZC8FzB4GTw9PYERAwk+kAaYJhgbFmy+vr4MDP7+AQwuLi4MPj4+YCehY5AiD6CBLi4uDADh+/TizSB1fwAAAABJRU5ErkJggg==")
PNG.Mark18 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADtSURBVChTddG9boMwEAfwe6Zu6YQT81WgRJm6Zuqj9BUqIdQFRTKLIzFFYSAbIwNSEEMHxHtcuVPdCmiHP5bOP5vTGRzHgSAIIHqOwXl8wGU8zwPLssC2bQDXdRnH2w1+3vQqVBfiG9PHwNfjcRVzgDrgXxvY9z12XYfjOGLTNFiWJb4cDrxPbobrukZ3t8OqqnhN0/R/PAwDQ0pRFKi1/hubA9TGR5KgyjKGN/U+x9fk7Qe3bYvnPEel1BoLIXga98uJiwRMCFKd9p+m8YLv+9PD/I5vGTO2KIoA4ngPUkoIw5BbWoaQN10opYQvBegMoyZsDZIAAAAASUVORK5CYII=")
PNG.Mark19 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADuSURBVChTY3Bzc2Pw9vZm8PXzZ3CzMvqPjj08PBgcHBwYXF1dGRjc3d3BikES9w6ux8AgcUdHqGIQAVMY7WEKxgHminAM0wByAYaJIMWV4RZwhTAMUoeiGKRwfmXI/6Igk/9VEZYoGlAUgxT+f3H0/9q2hP9zyoPBGiJtlVGcAlcMEryysub/tfUt/2eXB/1viLH8XxRoBBbfMaUGU3G0tfz/zgSr/x2Jtv+zvXT+p7lqoip2dHRE0YCOYQq9gMHL4OnpCYwYSPCBJNAxSBwUbL6+vgwM/v4BDC4uLgw+Pj5gDegYpMgDaKCLiwsDANeX7yvmWiwGAAAAAElFTkSuQmCC")
PNG.Mark20 := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADTSURBVChThZG7DcIwEIb/BkEBJQxCSRVLTuI8TFiDhglgBGigYwE6qBAKFSULUCFKaBArHDmDozyQKD5b9n3/yTrD8zxEUQQ9TOAN+lRFKQXHceC6LuD7vpG5cN4sa/C9EF+ZFyveTlsah60cPtsAv6AkTnTT7JZqwMi2yHKxs5WZkszi894jItB+3aBrCkrnHRM4rKZ1+fXoGnmmQJcd6Lho/5dZ/CkLIfKAfWcRK4bZeBEEQfYxn/FxoQrf89i01kCSjCClRBzHJlCFJZU1lFLiDbbd9GaW40BhAAAAAElFTkSuQmCC")
PNG.OCR:=[]
PNG.OCR.0 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAgSURBVBhXYwCB/fv3/0fGKIJgDhDA+QMqgcxBCDIwAABlIGeB5IlhrwAAAABJRU5ErkJggg==")
PNG.OCR.1 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAApSURBVBhXY/j//z8DCOzfv/8/CIPYYDEQARPEkACBAZOACcLw////GQBqEW1FpgtRcQAAAABJRU5ErkJggg==")
PNG.OCR.2 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAA/SURBVBhXYwCB/fv3/0fGKIJgDhCg8xlMHdzANFyiadYSTEEQwCYoISkJFkMRVFRSYrCxscViGQzAJFDx/v8A2JJS9l9I5SoAAAAASUVORK5CYII=")
PNG.OCR.3 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAA2SURBVBhXYwCB/fv3/0fGKIJgDhCg8+EAQwImgCKooqICZWHRoaCkCKbhEugqUPgwDkKQgQEASblRrJ3i538AAAAASUVORK5CYII=")
PNG.OCR.4 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAABFSURBVBhXY/BQlmKoVFUDYxDYv3//fzCjJzOOQVOAE8wGCcIlilwswTRMEC4BAkAOjEZIIKvAkMCGwZIwgFUQBBASDAwAfvBKuzaI/1EAAAAASUVORK5CYII=")
PNG.OCR.5 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAA6SURBVBhXYwCB/fv3/0fHKBJgDjJAl9DQ0IQwYBIoCjS1tMA0DKBIgoCCkiKYhkugq0DhwzgIQQYGAJgdUjb+qzCAAAAAAElFTkSuQmCC")
PNG.OCR.6 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAA1SURBVBhXY8gQE2UAgf379/+HYbAACKALqKioYgqCgLaODqoRKIpQOEAA55MugcxBCDIwAAAuO1wUxGC6WgAAAABJRU5ErkJggg==")
PNG.OCR.7 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAABeSURBVBhXbY5BDoAgDAT3aVChVkD8Mj9TlkMTEg+9zE63xRjj/RtcpSCEgKyKlJKLqLVNkGcYHVJCazdKqYgiHnBzgd4fh6ymCNVz62btCszMocix7lHebAb80MzwAYqAV94ULpPuAAAAAElFTkSuQmCC")
PNG.OCR.8 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAABNSURBVBhXbYxRDoAwDEI52kxo7WqdV97N5pfrTPZBAjwC3C/03scqUjBLMwPJmRdQISoJdlelHHlV3X+jaSICZucO3GjtSaCaq0+k4AXPfHVhB5QLTAAAAABJRU5ErkJggg==")
PNG.OCR.9 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAICAYAAADaxo44AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAA3SURBVBhXYwCB/fv3/0fGKIJgDhDA+aRLIHOQMYOKigpYEgbgEto6OlAhNGNAACYAEzQwMGAAALCxXBDNRMArAAAAAElFTkSuQmCC")
PNG.MiniOCR:=[]
PNG.MiniOCR.0 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAxSURBVBhXfYlBEQAgEALpH4sENCAKijf69AGzC0gCSSG5MYDtA015CvXfUHnDhTmCBc1gSq1ydqhdAAAAAElFTkSuQmCC")
PNG.MiniOCR.1 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAySURBVBhXYwCC/7W1tWAMBAwM9+/f/w/Cy5cvhwiAVIA4cAEQgSKArALEhpsBwff/AwCimUIuMt/LCQAAAABJRU5ErkJggg==")
PNG.MiniOCR.2 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA2SURBVBhXVYqBCQBACALdf6wmaANH8c14ng9EL4UkkFRVOQp5XE2R4LMJs/ra8UB3LxjTPFEHgIxJGILthrEAAAAASUVORK5CYII=")
PNG.MiniOCR.3 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA+SURBVBhXZYtRDQBACEJpbBATmMACJrCIUTj1dl/H9tgYAHdnVTEz2QLGBjPbYoOI/IuI4LChRVW9l7EHSRyO/0j3pXaXTgAAAABJRU5ErkJggg==")
PNG.MiniOCR.4 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA5SURBVBhXPYwBDQBACALtX8QCJjCBjXi5378bg4EQkkBmLil86m6AUVWI//ESs00SY2aoMeidW1Ec6UVFf+UOLM8AAAAASUVORK5CYII=")
PNG.MiniOCR.5 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA2SURBVBhXTYpbDQBACMNmfHowgJ9J2fEIyZF0Hy2ICP9AkutwjMjMqSOutOi4b+VJrug5bOMBlW5JdWEcGk0AAAAASUVORK5CYII=")
PNG.MiniOCR.6 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA9SURBVBhXZYpBDcAACAMxjoIqQAF2cICU20qy1x5Nm7sGEFXF7uKOmUHSyzkZNt19yUwOfNb7D3z1cCTxANEvS2EOSnzYAAAAAElFTkSuQmCC")
PNG.MiniOCR.7 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA9SURBVBhXY1i+fPl/ZMzw/z8Ez5w58/+FCxcQAvfv3/+fn5+PKgtiw2WDg4MhAocOHfq/ZcsWIAsk958BAEzGRgPzbarUAAAAAElFTkSuQmCC")
PNG.MiniOCR.8 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA9SURBVBhXNYvBDQAxCMOyP4NkDyZgA0bJnav2gXBiRUm0u5mZH6MTgCeE6e7YTlVFBCwfeUBicScUAGc7Hz8SS8Rqx51pAAAAAElFTkSuQmCC")
PNG.MiniOCR.9 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAGCAYAAADkOT91AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAA6SURBVBhXNYxBEQBACALp38A6JrCBUThB78G4CANIoruZmYOEjUCqqk0B+WN9Bf9OCDciwjuuSTtKPLj/SLI2bcxpAAAAAElFTkSuQmCC")
PNG.GoldCoinConverter       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAB8AAAAXCAYAAADz/ZRUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAEjSURBVEhL3ZTbCcJAEEUFGzBV2YcNWIENiI1YgN/589sSbEDEX8GMuasDk5vZlwQFA0d353WyCToTkSz9hY8s3JfDDTIYfFgt5LReyHXXSLefixwbkfNSusumLwlF4asGN8jk5N39FOQK98dwg4wdnLqJx237h/ISqcL9MdwgsMNAjdyD54NRQEFDTqjrVB2uYjkKlSnk+ktgDxgHCqQcy9XrYfgmcA2S4FN5yU2M5NwUG5IbXiInhvLUgBp5qjYcv0b+Lk7mFJ7DefN3PEywHHvE27YNYG1Pa3O2BrlUPqAv//UkxnJuxl7lNod19Z7ljHdy+zgHw2r3Vs6g4Kdyr+krcsUbonC8au/JGG6Kxav3OiiGbbCNU+RDQQ4UW6bJy+wJKMrZw2PpgEcAAAAASUVORK5CYII=")
PNG.PlatinumCoinConverter   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAB8AAAAXCAYAAADz/ZRUAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAEQSURBVEhL3ZI7CsJQEEWzgazTVrC20NrYWrkFGxHBJmsQG21cgY0rGHMDI5P7/iIGDBzIfM970UpEktR1LTnwXApvksHiybSR2Xwri2Yvy/VBVpuT7I4XOV8fXYuML1cwk4M3ydjFsUPc7s8/lOdIFZ4P4U0CuwyUyH3wfuAkFAykhPoe68OTLbenHUWeknIu1W8vZF3Obws+leccwpHzUGhJanmO3OLIYwtK5LFePEXyqvt7gFhN4T1cH8gtLEeMgbZte/Bub2trtge1WL2Xd4d445PzMGKV2xrei2OWM76b2885WFYaWzkzuhzw0E/kCg+FDlUc+2QMD4XyxbEuCmEH7OA36n1DCjRbvlOX6gXNogoZme4q0wAAAABJRU5ErkJggg==")
PNG.Mark:=[]
PNG.MapHunt := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAA0AAAAPCAIAAACwQdIgAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAC8SURBVChTjZBZDoMwDER9tCBCVkD0OpCi9Eo9YYfYZa1Q34cZGy+x6V3IOfd9Fwpt2xpjfAjjNPFfIHnMayGLc+SQdwOllETeQt57kV+staJ2EKJYgh08HzbGuNoVgq+1Fq80w4RTy3meCUk8GsI6i3OgEiDI8a7rhsdATdPsqzH6FGGo1rXI0hIWzWCVUiUm/LhfjEHUjr/vLN8LfCNm2VfkBR+2+4/jSFVVOedQjSKOpmdSlarrbT9jzAd7X1bHfozUFAAAAABJRU5ErkJggg==")
PNG.LifeBar := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABsAAAAECAYAAAB/VEQbAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAAbSURBVChTYwCC/3TEDP+BAETQFA+MZfTBDP8BbvDPMQ//A88AAAAASUVORK5CYII=")
PNG.Mark.1 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAcSURBVBhXY7h3cL1+u7XLuXAGCAUkGSAUR5IKALldCtzHQVOQAAAAAElFTkSuQmCC")
PNG.Mark.2 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAeSURBVBhXY9izeAoQ8fP/ZwBiEOXVwADCXg0TcsMAt0IK7/vUs8YAAAAASUVORK5CYII=")
PNG.Mark.3 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAnSURBVBhXY/jKwPCMgWEBAwPDMQaGnQwME3LDGO4dXL++MXl9YzIAijcKwoY7PvoAAAAASUVORK5CYII=")
PNG.Mark.4 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAXSURBVBhXY3iz0O37FBkgYoBQSKwpMgDrfQ8MSgZkuAAAAABJRU5ErkJggg==")
PNG.Mark.5 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAYSURBVBhXY3jAwLBKUBBIQikgCRNjYAAAeFIHkR7MmP0AAAAASUVORK5CYII=")
PNG.Mark.6 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAbSURBVBhXY4hXY4EghghlFghiCFJgAaIJuWEAShsFWExbQj8AAAAASUVORK5CYII=")
PNG.Mark.7 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAiSURBVBhXY/j58wcEMejraZqYGGgoyTJsZmDYzsBwkIEBAP7EDG8Z84i+AAAAAElFTkSuQmCC")
PNG.Mark.8 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAlSURBVBhXY7h3cH2lBsMCRy6GiIgIIFXJwMAQGBhoYWZ2fO1cAJv5Ce8vxLNlAAAAAElFTkSuQmCC")
PNG.Mark.9 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAlSURBVBhXY3j48GFVTvK9g+sZwhwt1qxZAyQZ9i2dBqQWOHIBAOpMDZDagKerAAAAAElFTkSuQmCC")
PNG.Mark.10 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAgSURBVBhXY7C3/21m9k1D4wEDI+MHCGJYO6EOhCbUAQCmFwwTcJf/lgAAAABJRU5ErkJggg==")
PNG.Mark.11 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAaSURBVBhXY2AIkocii1UmEMSg1K4DpJTadQBfdgdWH5cd/QAAAABJRU5ErkJggg==")
PNG.Mark.12 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAcSURBVBhXY1Bq17FYZQIkGYAUBDEwBMmDUJA8AHv6B1ackEbAAAAAAElFTkSuQmCC")
PNG.Mark.13 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAhSURBVBhXY1jHyrGHhauci4HhMQM/EJ1l4gGJAVE5FwMAbVQGvQx1E4UAAAAASUVORK5CYII=")
PNG.Mark.14 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAiSURBVBhXYyjnYtjDwrWOlYPhLBPPYwZ+IAKJAQXWsXIAAGoSBr10g3LqAAAAAElFTkSuQmCC")
PNG.Mark.15 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAhSURBVBhXYyjnYjjLxAMkGfawcD1m4F/HysEAxCAWKwcAZdwGvZyg49EAAAAASUVORK5CYII=")
PNG.Mark.16 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAgSURBVBhXY1jHyvGYgR9IMuxh4YKyyrkYzjLxlHMxAABwuAa9BNEvpgAAAABJRU5ErkJggg==")
PNG.Mark.17 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAlSURBVBhXY1g7oY4tTQ9IMnCWm7NGa7Kn6TPcO7ieJVh17YQ6AJouCnJ5pxkrAAAAAElFTkSuQmCC")
PNG.Mark.18 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAjSURBVBhXY3B3dj5w4ACQZABSQLB582aGGzduzJ89e+WSJQDlMBDCCmdnHQAAAABJRU5ErkJggg==")
PNG.Mark.19 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAlSURBVBhXY5hfGVIUZFIVYcmwti1hTnkwkMNwbX3L7PKghhhLAK/uC+O1+QMGAAAAAElFTkSuQmCC")
PNG.Mark.20 := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAMAAAADCAIAAADZSiLoAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAAgSURBVBhXY8j04oAghv//GbbNZr2ziwHEqvVguLaBAQCeqwtlEEK6FQAAAABJRU5ErkJggg==")
PNG.BattleListDefault := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAYAAABWdVznAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAFmSURBVChTPVFNS8NAFMy/qVWkpm2Szea7qV5EvKlQ1IPXQimeiiB4ai4FY6FHbVp6qgFP/gb/1bjzaj0sL29m82berBVFEbrdLlh9rdHpdNA2x/c1gkBDG4yVdzzPg6WDQC6PRiP0ej0hA4O1Wi3B+QMHDYdDOI4DS/k+wihEWZbYbDZI0hRKKSFZwzAQnLzdtmEFBtB/0vP5HOv1GnGSSq98JT3xLMuMTR8WffX7fZHnRJJVVYnqarWSXutAdsjzHJZt2yKfJInUvVJd1yiKQoYwCHLcTVKK41gO7XnKw2QywWKxwHK5FDxNs/9h1j6ubZWDatttaS7PxD9rXb+JHfK0JjuIpTTBz9c9vj8fzMT0P3f2xPntuuYd6FGZZnx+hOlVEx/FwS4RI89L79OG4I8Xx7uH47Tx4BQvl01Roq3ZU0MSeX0+lKWJkR8PzmAxgdvrE4l1n5jjupI5UyHGxYnf3dj4BZE2FVdpRHouAAAAAElFTkSuQmCC")
PNG.BattleListExtra   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAwAAAAMCAIAAADZF8uwAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAE+SURBVChTTVC/T4NAGL3/RhsTKIX7fdyREC2xg4tRE6MOriSkI3HRSZYOhIRVaNMJmzi5u/ln+Ui18QJ3x/vee9/jI3EcR1EkpdTaaK0550IIIGEUUkrxyTkjuEWUFkWhtJIKVPCEUsoYI6TM8xwaIoQKw7Cu6+12a52DEDIg8AYCHAihjOEAvWmazWaDmrU2mM1wB5IkiXOWwB8LJPgD7fs+y7L1eo074nqeN7bTxvwF5EBR2+12VVVByRjD7vneb/D5fA4SGpVl2bZt13VpmgZBANfYWoJIUAx9mp2JYajbduWcww7N89cldoyDQI0umnvfHw+f749IBmN0OZD8qU8wEpCWi5PXq8lbdbw4H5Oh/P/BxM3y9vTlYiI4TR1bPR3tbQ5OWATv3fVUSY4BjrOQ+GWBnHs/zuj9TfAD4J+HODiquFwAAAAASUVORK5CYII=")
PNG.BattleListEnd     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAsAAAALCAYAAACprHcmAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAABrSURBVChTjc49CsAgDIDRHCO3cAr+gA52rPe/TmocJLZqFSQZfPgBInI9cHIhpcSnAO5SOF/5CIC1lgXI/AMQY2wPBRhjtqBlaODc+oeeoYH3fgqGDL3LfINPxu6HacYAQuhgmaF3IqoA+QEaEhIXIsc1QgAAAABJRU5ErkJggg==")
PNG.HPBar         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAQAAAAFCAYAAABirU3bAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAABDSURBVBhXY/j//z/DyeXL/0/Q0wMy/zMwnFyw4P8GP7//y42NwZjhQELC/wMODnDMcNnf//9tJAw242Ni4n8ITvwPAGWuMo41uznJAAAAAElFTkSuQmCC")
PNG.ConditionsBar := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAGwAAAANCAYAAABMzosyAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAACsSURBVFhH7dhRDoMgEATQPQUaQKwX4GjWUrQ2xrNvV/q7B1iTMXnJkMyfERZpSIn7vmd5COxK48g5Z6YYB1nrJbBlWV5MIUbJegFsqbWybIn4wu6ilDeT916yXgBb9v3L5JyTrBfAluM4ri0xSdYLYEtdVyaM9PfRXhjOsPtoY70PQbJeAFvm+cn0mCbJegFs+U+JXSdZL4At7eJ8/Z86z1PWegls2LYPl1L4B5g+QWplrlM3AAAAAElFTkSuQmCC")
PNG.Party         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAkAAAAKCAYAAABmBXS+AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACQSURBVChTY5g4ceL/pUuX/gcCBnQMEgfJgzmTJ0/+v3jxYiAToQDEB4mD2HBBkMDChQvBgosWLYIrAGG4IhCGSXR0dIBpGEZRBMJyxUASjc+weqEzWHD16olgGiSIjsGqT2yI/79tTTJuRYXe2v/bwzT/z+/QwK2o0V8TLAnCvdXqGApBfLgD0TFMwf///xkAF5v7pX6x0PkAAAAASUVORK5CYII=")
PNG.Battle        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAkAAAAKCAYAAABmBXS+AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACjSURBVChTXYwtDgIxEEZ7G9hwDCRiDcEiOAGywbCKmhVNk1r6k6rSBIXHcauhM2Rnyzb5Mt+8eanQWkNKCeoTyyDHOy3GGIgx1joLuCPHzhCB955gCIEFDEsYPJRSQClV15n/SVJKsNaCc66ujZT9lkDOugoj9Wle33uaZH6eR3g9TgTasHTebeB26OCu1gSmYxsx9B0fx8uKO4Z/auEyPwnEFxmjAASB4W9PAAAAAElFTkSuQmCC")
PNG.GameBorda     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAANwAAAClCAYAAAA3d5OIAAADmklEQVR4nO3dzW6jMBgFUH4riPoAfdC+c7fZJXEAj0ChkxeYuxids0mnJQwgXQG2P7v9+vqq27Y1bds2u/1zWZbjcxzH5rksTVNrU2tt+r7/3aa+fnf+fDr3dW77fD6bruuOn/fPc/vjs6lN27S/3z2OoW2aZVmb7nU8+57rth3f3V6f67r+7m/f1/t+z+32c9j3NfRD835+5/f24zu22ff/Ov7z++/n+P738/+rb9fjPIe+349r+z3G03mu537Of+/bndfI9f8/r//Pz8/fkz6v8fvGwL/Vub6QI3AQJHAQJHAQJHAQ8v39XQUOQvbuAoGDEIGDoL0zXOAgxB0OgpZ1EThI2ceVChyEHAOrXWzIKKUIHCQJHIQMg3c4iDkKbF1uyFjWVeAgZZ4mgYOUx+MhcJBiaBcEXS4XgYOU6/UqcJCiHw6CJq2UkHPMgu16Q4aKbwgq7nCQM2o0gRxjKSFoEzjIMbQLggQOgvaVWQUOQnrT5EFOKerhIMYjJQRpNIEwgYMUdzjIWRer50CMim8IGsdR4CDFclUQ5B0OglZ3OMgxaxcEWVsAgoylhKBtsyAjxIwf+uEgpjV4GXJKKQIHKatp8iBnnmeBgxSr50CSAlTI6QQOckwiBEHq4SCo7dzhIKZrDV6GGO9wEKQeDoJqVZ4DMQpQIWirugUgZrAgI+R4pISg2+0mcJAyTerhIKZqNIEsgYMQ1QIQ1PVaKSGmmnkZklQLQIyOb4jySAkxynMgaBgMXoaY+/0ucJCi0QSCTCIEQe5wEGQsJQRZkBGCvMNBkI5vCPr8/BQ4SBI4CLndzdoFMduqWwBiLMgIQa2Kb8jR8Q1BOr4hqOt7gYOUVj8c5BjaBUG9R0rIWZZF4CBFKyUECRwEeYeDIHc4CFpWjSYQM/SmOocY0+RBUClF4CBJ4CDEclUQZPAyBC0qviFnniaBg5TH4yFwkGJoFwRdLheBg5Tr9SpwkKIfDoImrZSQ83w+BQ5SVHxDUHGHg5xRownkGEsJQZvAQY6hXRAkcBDUdZ3AQUpvmjzIKUU9HMR4pIQgjSYQJnCQ4g4HOaslhyFHxTcEjeMocJBiuSoI8g4HQas7HOSYtQuCrC0AQcZSQtC2WZARYsYP/XAQ0xq8DDmlFIGDlNU0eZAzz7PAQYrVcyBJASrkdAIHOSYRgiD1cBDUdu5wENO1Bi9DjHc4CFIPB0G1Ks+BGAWoELRV3QIQM/RD8wdpbrmz3F3xtAAAAABJRU5ErkJggg==")
PNG.SkillBar      := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABAAAAAiCAYAAABWQVnHAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJ1SURBVEhL7ZRZdtpAEEV7LZzDjEng2w4IEJolIH9sAzDsvtK35JKFkngF/ujT6hpevRpU7n6/y+VyEe76vDff1+tVdbfbTQ/vx+Ohuov/Pp/P4rIsk91uJ3meS5wkst1uZeNPHCeSpokkXsaNzX6/l6IoVBYEgYzHY3FJmgogKI7HoxqnXrZarRQUY4CxCcNQirJQML77g4G4KI5VuY/2epdVJVEUqQF3lqW1Y5FLsAnU+fT7pAHn87m41BskH1ShqGzKSt9RHGn0Xq/nJpOJi32w9XqtgJUPtFgsxOF0Op3UsY6YqbO9cd5sNgpAikFQA2CjNaAYCMqybBSc3FM0ZwOgNgATlFT6/X7dBfLhkA61aEduAwCMM4eAo9FQnLUHemvPhrvr/AmQ+vbGNQPPdjqd1jXQFKpSFVagfzEIQ6/3NnQOO2UA3UgRd5of/T8cDk312wAEQAcAfgPmgGgMDwJQKWrk60AqTKWBGAB2WmQ/ZMulbyNGlaef5Zk6A8IhV6pO3wEB4LPYmQKMRiNxq9UvjQi1uso1Cytu7IeJ9ACyFgJCGvP5i/jChPL29qrUquqgjqAjRwYTHGGKI7XBBnaelbjczziTSGQqzDfTBhsbW5y4GXn6r0w8+HK5FEce9JOxHA6HWlnek+lEZrOZ/Fz80LfZITN7HWVdDt8LRatrk6ZsPhYKMg6MdLx9MJM9LRQENq4AmLPJ+AuJ/CxrLZSuwt4mo7BdGYDNQjEld9vwK9nTQjGDruFXsqeF0gboOvxPRmeahWIG3PS/7cB3O02T4dcsFFNy20Lpyrqd+WuhmCHUOO2eMzT1MBWN7Huh2EIZyx82/k1BBJz9EQAAAABJRU5ErkJggg==")
PNG.SkillBarEnd   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABEAAAAiCAYAAAC5gzL5AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJ7SURBVEhL7ZRZktpADIZ9GXZCAs+ZgNm82+C8cYqwBW6v9Kee9phmKsUBhipVt9XSr18LCk7ns9xuNzm/n1b+NvfL5aJv1+tVhe/7/a5vZ3M/HA4S8JBlmazXa8nzXOIkkdVqJUsjcZxImiaSGB0nNtvtVoqiUF0YhjIYDCQgSpKmCsTjfr9Xh9To5vO5AuMAODabzUaKslBA7p1u1zKJ4lgNttFWz7KqJIoiNeLMstQ6F7mEy1AB6t+1Bp1MJhKQY2qMknfa0AXI/AIkiiNlAbPdbmdSjGWxWChoZYJNp1ObDo51XauzjfwBguCQJKkyIN0wtCAE1ZpQZQqEsizL5rENglBs3mCkqZvAgHY6HZsOSvJDSI3a+CCICwAAQtB+vyfB6XRqWgfVhWHF6QM4IS3qokwM6Gg0skxQaDpV2dx9Z8S+GTEnHcVOmfw5HrWYkSKvNTXmwwdAn6a2FnQJEPy6zAkjTKsYMDcbFLoNgB6dqwff3BnE2cy0+Hg86ZhXJpUsz5pOOQC6wVxQdPQfDcgUpN/vGxBT2Pn8l0G3NG00y8YVPDYDR6qAufYCREqTyTfbHSK8vf1UmlW1U2eioEdHN3CGMc5MMDawHA6HpHOU3PwnmFgYUHnuTCWs3IjjyMnfg/lQRibAbDaTYLlcal70mxHu9Xpacb6Ho6GMx2P5Mf2u384OnbPXsf9aSgrw6VJywwVdZVVWjc5fSugAfVpKzgEBhBTaOreUHnXeUmo/OgNfR/T2N6APS6n9+Ko8LSXf4BV5Wkq+wStCeg9LyTegE76OpdT+xu9hKbUfKTSrwdf5xX5aSu4BY2i2O+EvJXRfS+l/S2kg/wDcBb/3A9pOEgAAAABJRU5ErkJggg==")
PNG.Chat          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAEAAAAAQCAYAAACm53kpAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFNSURBVFhH7VYLjoQgDOUsZvygLq5zBI/hIVwBRT19h1eHyYQrdE1eSvv6QcKnynlPx3GQf8sb4TPeto25fd8Z0M/zZM7H8bcdWNeVnHN0RJ8t2j95o44462zkPYUQyHnHMfseaI86+BDuuqkm+Ou6WLfWce5l+eN42IBlWViCs9bGXHec3zzL9B/Ih5rIg7nN80wKxvgpidBak8LK5YQUlFUlewcYY0jhbOSEFIzjKPsI8B2AGzInpKAsS9lHoGlqUng7c0IKuq773wFqjZ1TTkhBhT4A7WdOSMHzGZ9B9MU5IQVN08QFEHwJGvMj+xVo25bUNE2ErYAnAZ1RXdeEywF627XU9z39jgPryQ+25P89Bg+Z4sEhH2xa37nQfIAfhoGqd63H48E+mFCeCxJAnhSbahZFwToA3xQLiblDAvBH328GwzV1G+cDaE0vF1xN99qmRL0AAAAASUVORK5CYII=")
PNG.Dead          := BitmapFromBase64(1,0,"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")
PNG.Slot          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAEgSURBVFhHzdhbboJQEAZgl1C3QwhB5GINIUgIcpNLhRowCAYBoYStTz12Ef1PMu/fy8z5Z1Yf6zUh1Bvyeqv/LJ7nMSCCIGBARFHEgEiShAGRZRkDoqoqBmS322FAPvd7DIiu6xgQwzAwIKZpYkAsy8KA2LaNAXEcBwPiui4GxPd9DEgYhhiQKIowIEmSYEC+zmcMSJZlGJDvywUDUhQFBqS8XjEgVVVhQOq6xoA09zsGpG1bDEjXdRiQYRgwIOM4YkB+5vkPwnEcsRsFOw+Imw1J2y0pikKaphFbftjewSK/eTgQC7osYzrHI3meR0EQ0Ol0ojiOKU1TYh9YnufExnZRlsSGVXW7Ud00xLqjfTyo73sank+aponmF2JZFvoFyCvLSgRX9TIAAAAASUVORK5CYII=")
PNG.ReadOnlyChat  := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAoAAAALCAIAAADJDItPAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADQSURBVChTXZCrDoNAEEUnGJKCwIDhYTEIBCQYwqMVJLyCATQKgcDg+AAcnwCf2luWFtKjZu7Znckuua4bx/Hzy+sARZqmkiSRIAiyLFuWFQRBGIa+70dRVNd10zSqqpJhGETEcZymaY7j4ETbtn3f47au6+R5Hs/zmGPbNnPjOHZdhxUfjTWmad7dPM95niM/NcTPLcsyDAPCS4Msy5hb17UsSxZeOkkSzNy2bZomlly7GZi573tVVWd/vw2KosB7zuZAURR6HOBz/gpRFInoDdxzUWTdU22wAAAAAElFTkSuQmCC")
PNG.CooldownDiv   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAYAAAAYCAYAAADZEIyjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAC/SURBVChTbZFLDoMwEENzl6J8IJQVx0IqkBRYcHY3DoKShEUkNE9jj40AULymaSDqug7f/+EwDLDWQrRtm4B939H3PYSUMgHzPOPddSWYpgnRowv0DrZtg9IKwhiTgM84Hhta6wQ450D5wsN7j6qqIJRSCRiDFGfFBgHlC7Asy2H+Cnp3wHMjsDatxH/9cVWe49rI213X9bld5ogb+VVMTvkCsPaYI2+XOaJHftVVYt4uzR+7cgT8Uffh+Ywx+AG5ZFs+4v1+KQAAAABJRU5ErkJggg==")
PNG.Boots:=[]
PNG.Boots.PairofSoftBoots := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABMAAAATCAYAAAByUDbMAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMeSURBVDhPfZPZT1NREMZHiSgCimgQDDFYsUAQkSogLgVEQdtgqQpKQWgJqyxtQakskU2KFgSXKG4QgxsacIu+uMQYcdf4YKLxiSf/js8zRy+lVD3J3Htm5ju/ezMzhwB4mFj8kDYzx/a/vKcj3LPln6i96g1MWwe9DrBfknUZFfk30FD2wDs/tRFbR9k7bIp2UcSiSuzXnYchrX/qAC8GJYfbEB9kw5pgG47Vf/YAToGGuiahjR2AH22mWeSLxb57SAApM7aN87QjroMO5Y+Tam4B+ZA/5pEK6tBK9Fgn3B9UYNddPymQ9vJergCKolbLYw9Yr22CwsjArgTMIw0MiU4ct72Wvky0VTxjGHzITwY4ti60Bn321xAwGdPFd1F/w1toVzqUg5hNAdAltKOn9oUSIxwte4re5q8Ioe3wJxVF+h2Ao/A+GvaPwbD+uBQak1zEfo3xBjjPukDSy2Y4Doy7Ydna02itfYVFlERbVI20kBJQmH5OguKXVEqheFNO4gmYUs9Cs7QaQkPzKVV21bjB+Rum1Cx8gVkKTh1+LwOJy+okiMGc5xwD14fV8sdk/QRMnlfMvRFb7tRh0135FwxhS408ImHiLSEciwsuR92eWxTqv0/m/gYje94dajE/orxNAxSzoIQi5uTLuJJnPzrQQrvW9cCWe5uqc657wzhg0l8hZ/ULutr9g6p2jZDoJqn9i2Xuj0b6CSEHYcm8hPMtX6ij/AmKMtw3hRd0aztgzxtDU9FDyt3Yj61RLVwbRAWYPYT8V1yzdHUziebIknB302KsUscaWHNHMdI9CZGUV0a/9hilrWqCOOwBiw0q5SHG7uReeUcZ1FnxVHaYdaxBlXEUL28CLusrHDRcA9dMjAhW+Jo8YGK+KGt1O0p3DskZbCy4hzOOjxLOOtag2jiG5yPgDoFnKVvjlLPEOQYpxitleT3M2y+ieNsF8BidbvwwpVFEYoqfYLjrO8p0w8iIbvUCKcbxvSknIbqOoc5vsOgHRXgGTK/pAxd/55rOf4IU4zzXqVB7Dulquwj9iU8XKKbE/mfT9ewQEf0Ck+KL9wPypngAAAAASUVORK5CYII=")
PNG.NoRing          := BitmapFromBase64(0,1,"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")
PNG.AxeRing         := BitmapFromBase64(0,1,"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")
PNG.ClubRing        := BitmapFromBase64(0,1,"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")
PNG.DeathRing       := BitmapFromBase64(0,1,"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")
PNG.DwarvenRing     := BitmapFromBase64(0,1,"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")
PNG.EnergyRing      := BitmapFromBase64(0,1,"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")
PNG.RingOfHealing   := BitmapFromBase64(0,1,"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")
PNG.LifeRing        := BitmapFromBase64(0,1,"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")
PNG.MightRing       := BitmapFromBase64(0,1,"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")
PNG.RingBluePlasma  := BitmapFromBase64(0,1,"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")
PNG.RingGreenPlasma := BitmapFromBase64(0,1,"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")
PNG.RingRedPlasma   := BitmapFromBase64(0,1,"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")
PNG.PrismaticRing   := BitmapFromBase64(0,1,"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")
PNG.StealthRing     := BitmapFromBase64(0,1,"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")
PNG.SwordRing       := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAcLSURBVFhHxdg7j5xFFgbgXvgDS4YvM55bT3fP3fb4ImuwbOMbyLJsyxp8G18WG2QjX5CxzXhXFkKr3R+wOSIHJMLNN9x0I0KE0AYbEBCRFPXUmdM9SOQblOr7qk695z3vOVX1dXdKKa398Y03yv+jpf/fkFhYXCz9/qBMTk215nkwNxj2U1PTpTs7WxaXltrYxMREWzOYm9uymWvzMzMzrddyTb/fK7OzvYab83waa0SGJBYWmoO9+/Y1p0B3j40NyWlsgLDjwPPu3btLr9+vc/NtDZuVlb3Nxrx12SdR/fRMXd+dLWtra+Xo0aOhBqD5CsQI0PLKSmMKQG9hEFhsKiCxuro6dDY+vmfL0aBh9Gr0Scp7qgDLux6GddN1/NixY0HEokxBkllaXmnvQDMakfYraQCAVyrhXPPmjh0RZR03FnOUWthKc7/Zzcx0G46ANFgnTpwIIgxEaBG2emBUCmW6ZTCYa1Hs27+/AgSRcBhpsN47G+lC3LjUpiLpfGJisszNzbfU79y5s5w8eTKImGS4tLQ8dKAB4giZBNsuOafNcQU0l7bGdu3a1Ww51LPvznabXSoqOKROnz4dRABzquUigNKlT0JJMkBnG3ERU8y4ecrAMNac1Wfr2bPlCxHvAhDg2bNng4gITNgxe6o65AeQ9SGqtBFF5luhceZZS+WQnp9fKDt27ii9Xq2TrS2umY8gqTHR1r3z7rujGgG4vLI8fFZs6RwZBNpc3XJ6Oy1JANa2K4O8MYGNjoBeC3ZycmpYj4idO3cuiBgAqOoZkExUFhsnpXHg3s0hYp3Ikozo5RwhDhYXl8quWrhj4+PDuhAcW9jp9/z580FE9FkPjFMyKUopjSWxBBKpAkQm1VMP1pgbGxtvpAUBSyqTOMKJeeHChSBi4UpNiwW5g0LmflsoGg6M6zXqdOoNsb3Ztu003sJBGEFK8QGLYzgZlPFLly4FEQAGR+noNqBRjfRa2jJFxjj+4c+d8svf63X19aB8/zLIONikAk5GHxhxN01MTbZxTbDmLl++HEQwtO9FgAwCpDUeaRidkNTg8KfPO+W/rzrli/VO+efd10r51/FSvuy2OYSTRDicaeTcR7CjjgIb5vr6ehBxh9j/lLDYs9NTFFlknvWpBBJne6O0/OPi66X8Z7P877N4T0UExOHBQ4daEAKiWgu2PsO8cuVKEOGc8YGDBxqZrA29xjhrhBOp+OBQOGznRAX0/O3tqsw3i+2ZM0HAlQI2MG0M5NRSqD0o165dCyJpzJHqjms99rnF5MsibkRqGr699dvIPVMj00N+6xDllE0ENypSNvzcuHFjVCOIjI2PtS2GAAUiHbE95RgAJwpTGv72zig1X290ys9/DVW8pyMpgKdXfzAasXpAOuy837x5c6QIZwhZkH2O5zNwzxyJvBVoTdN3z4PEvx/9oc0h4ASNj6woWrfskSNHavoPtjG7kMrmbt++HUQMhMRRkJxRxhjn2QPIbc0hZX78SxTvVxtBgjO2iMNCRqHmvaQ+Dh8+3LC86//0/vtB5Pdy2Pb8FmMtxx1kIvbO8faGoIsylWSTgSnS3C1S5CuwHZT1Grh7924QMWkL2yFAFBCQ2LqxpVMZz25WDhBin9E7GNM+bc0hjxg19MZ9q1qjffDhh0FE/pDwfZFbVrECQSCA4+q3oxAHwEGAxa2LuDnPUkEFGKkC4oremGDN83n//v0gwogBWSnDMAiJynEfkXOoxZnSHSrGNufhROqcP932uZlBUERvXSpj7sFHHwWR1dX4EMooQ8r4IMoF5iyK75DRAbWdCLt0RIX5rbMocb1bR+Xp6dgMds/Dhw+DCOO9+0a/RRhmzQSJuAQ5EDEAjoBm4SaJVC9PVgQoATe/8mXABrFO0T5+/DiIZD3IV/sOrQ7kDxFRWOA5leCM0+akvlMm1bMenh6Z0dEQimt79kyU1QMHGlFBP/n44yCSv2mQSZmlwHMjViMy5oYGZAyI58y79fpMHQdra281Bb2zpaLPAO/w2Bh7+vRpEMmoMhX6JAbA3P5aRwDMG7P/gcg1NYyZ8z1qXXNa1eDMdy5l2Zhnv7/e8FRH7NmzZyMiQDgMdeKLyrgcAmjyti/4uH8owcaYd+lKW/lHBGYQmmzbOdNOTWQRgfHixYsgEmTiwzgjxjq3XhYkEGCpVtqHciE/Gzfu9nHP1iCDLKIw3fSvXr0qm5ub8d+EBU46imwHQMZdAYTMxhUicmzNx1zslFyb9xSbwIobHQF9rkFii0i9IIJIJ/8eOHb8eDnx9tvl1KlT5cyZM+3Hj98dPvkvXLzYPnR9Y66/9165evVquX79etnY2Ci3bt0qd+7caRfYvXv32rF9/8GDdlg9fPSoPH7ypO2Op598Up4/f15efPppefnyZftvZHNzs/Mr85/J4ML9+pQAAAAASUVORK5CYII=")
PNG.TimeRing        := BitmapFromBase64(0,1,"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")
PNG.ButterflyRing   := BitmapFromBase64(0,1,"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")
PNG.RingOfSouls     := BitmapFromBase64(0,1,"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")
PNG.StarRing        := BitmapFromBase64(0,1,"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")
PNG.Rings:=[]
PNG.Rings.NoRing          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJ4SURBVDhPPZSJctowEIb1GOUwOLZsS/IRc+QCEggthZKhx0xaGtpkpjN9/2foJ20HRtGsV/+xqyOqbpq2HeV5cZEkWmvrXFVVWZ4nScroRxFJAfDZ6/UAOFcyg1HWWRZEApwxliyjaS6rutY6I0N+Op1C4FMMwHtyYQqWEUOYb2udMYYgBQU2CEldqJdl1el2isKgC0cJBz40AuDM6AmTkHH2x4PPYRxDJqP4AzQYDGmVNWIcIAOSxgiwiuMLJPCv66bX70cDfkM1nkxIgYjjWISICdCmCPhSGk0CIxlFA9Rxgoiz7xgZlimMmUEJfrcKp4sSQJ9fFEHAAGnkqAWtc89FqlMpXnxgLpbrxfIxtxX67zodSiWQXgLFKtxCnQaab6lpyArz7c9fxv3qfWYrTg5pYTLDQstvGFk+PMefoQVnymazezq+vP789Xa/Wgv57ExH+F3f3Pie+Um3IpGZcrPdfz+eru8W2MKfLZbUQoMUjxNMdp5KFRFiFMxmCLluJ8fT69XtPPUb5tab3ZdvzyhC5sBAslvsHyxfNjJEVEU/IGx9+Xw80XOSGcZ2f9gfvvqdD+cMH4zs+X9n+SZNoAs7f1j9OP1+/LDdPX2m/vHVLWRoo/GYAR6bbrfrneHITJbiA9/dzR/w/PjpIMzZbAYgdKvhs1tcfgX6fG7MXA8ciNPcHxiDc0aO9yM1hjY1mbZtVTinDJr4E/B0WEYCtFhxwQQjAJJ4IOR7hhYW/EvkuviywwNihgMBA5K+HP+PoQUVnEe+Zx6A+ABlhAPPpCIUJc9ZhHa4EVlZ+QuPk5ICiHAhFV6yvwAkz2RWGeJfVlWQ086V/wAxDsIdrtBOFwAAAABJRU5ErkJggg==")
PNG.Rings.AxeRing         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADSSURBVDhPrY/NDYQgEIUpzA4swR6MHiyBgz/xYBnGcKYQ+5nlsSFBfDFxZ00+gW+Yl8GIyF+hUgOVGqjUQKUGKjVQmRM+/CJljUFlAiHTNIUtrzOozFmWJSxihmGIK3ialsoEwqqqQkIk+XVdL+ecm0gcxyF1XV8ase/7Xpxz7wJx2XsvXdfdAjHdvu/vA8dxlPM8pWma2Azatg1lMZjyVSBAAybBpHi+tVa2bQulby3dK6EygUZMOs9zOPI7JVTmIDSnrJdQqYFKDVRqoPJ3xHwAeKFuagh14nEAAAAASUVORK5CYII=")
PNG.Rings.ClubRing        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEtSURBVDhPrZJPSsNAFIffQZI6VumkMe1SUdyoRTfewIWiN+jCOyh04yHUolR05Q1KXbgo6K63EEFBnvObEInMb1PHwMdMvvdnXoaIqv4rVMZAZQxUxkBlDFTGQCXodLuS5yviHpdVAp8kiSRpKkVRBDWAygo0mW6P3JbHGVTWedm5d4vKaPPCrwAHNRoLQa6PMVmBZgfpPjp4Kv+6+/DrvU4gKt6Px9pfPvSF1mb+zrAfrg/04+RpvoZI/jwd63Bt4AuzrC3tPPce070dTeZv+Ny71a+bmZ51+r4YXK6eu7DK9UZ5UJVfJxCg2VzyTTEJJsXnT7audLb36MLlgcYs0loqjTE/TTHptHfndJjHoBI/NCbA3aFpHcRtZqXVskEdoDIGKmOgMgYq/47KN9+DQN1uzifJAAAAAElFTkSuQmCC")
PNG.Rings.DeathRing       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAF4SURBVDhPrZExS8NQEMf7LQRxEArRQRwqbm4SQSrFpehYFESQYBBFEKcM4iIEdBNEUerg5mDJ5BcI/QZdKt0ChmRwPO+u3stL8mrB+uDXd/d79/4JTQUA/hWjnASjnASj1MFFP0zxzIRREhISBAG8Pt+jypzMmDBL1N1uFwaDAba4PnnPneu9Tlmg8n0fy2zV11Zpy80IuuezkkAVhiGWmQvfO7meqNVq8PHYLIWqghtsXdfFMnPC+fEhdF6e+G9wHIeDDjbmGT00d4kO6CPoTgMajQa0222I45hDiLujld8Dq9Uqlpljfj4KhUVRBLZtq8Cz7cXRgSxQ0ZtwiIC+3+/zl6fQJEnY0ezlztL4QMuywPM8bIcuTdPhQ3C1Wi0VQPvF+tT4QNlHIee3zRnVC6pQAtXXTXlQIE88bJlnco2SqK/2lvlCEXqr681prov3iJIQ6MJJcwH263Mc3ju14G13VgUX5wWjFOSyTnGmiFFOglH+Hah8A5RwIieo9RGZAAAAAElFTkSuQmCC")
PNG.Rings.DwarvenRing     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADNSURBVDhPrY/BDYQgEEXpmg4swR6IHizBg2A8WIYxni1gls+GBPHHxJ01eQJvmJ/BiMhfoVIDlRqo1EClBio1UFkSP/wSdY1BZQYh3vu45XUGlSXzPMdFzDAMaQVP01KZQZi1FgmJ7JdluZxLbiKz77s0TXNpxL7vezmO410gLp/nKV3X3QIx3bZt7wOnaYpbkbZtUzNwzkEZTPkqEKABk2BSPH8cR1nXNZa+tXyvhsoMGjFpCCEe+Z0aKksQWlLXa6jUQKUGKjVQ+TtiPk0SgDTG4XibAAAAAElFTkSuQmCC")
PNG.Rings.EnergyRing      := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADrSURBVDhPrY89CsJAEEb3MPbWnkARsVMiIlh4BrEwVxBT6ClsxB+SQmy9hFgIBsHKym6ciSxsNh9CHAMvu/tm58vEENFfgVIDlBqg1AClBig1QOnCj7wy/BoCSouEdNMNb3EdAaVLcN/xQqZ9XGar8G1aKC0SVhm1JCHD+v4jzp1dCsIypRtVw2GuUfbNJKKQa6UC5XJEL2ok80KgTDehS/nA4LqmEx9qi3HWLNT3MzZkmnH+Qy4FYZEGmUQmld/vnFc0eB649KnZez5QWqRRJu2lWz7iOz5Qukioi1/3gVIDlBqg1ADl75B5AyXydjRw+vakAAAAAElFTkSuQmCC")
PNG.Rings.RingOfHealing   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADrSURBVDhPrY/BCgFBHMb3RZy4yZXIBZu9ieLkIp6Ag4O8gKuHkE15Ai/g4qC4eQspSn/zraZmZz9qja3fzuzvm/n6rycif4VKF6h0gUoXqHSBSheoNFEPXhF2xqBSg5Jju662PGdQaXLqNNQi3jaoRiv4Ni2VGpT1sxk0RGh/7jZj3yYJobnNhjLJ52IXsQ/9stzno3SFOPxYTiWslxKFmO46HqQvPHR8ee42sigWostgVSuqWLy1X0lXCHABk2BS/P6+VZNLL1DRO9PnbKjU4CImPSrs7BNUmqDUxM5tqHSBSheodIHK3xHvBUyiaXst4/tHAAAAAElFTkSuQmCC")
PNG.Rings.LifeRing        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADsSURBVDhPrY/PCkFBFMbvi9gpKwsborvxJyJlK1e68QbEygt4EbkpnsPGQrHzFlKUjvmupsb4Ute49bsz8ztzvs54IvJXqHSBSheodIFKF6h0gUoT9eEXY9cYVGoQ0jtU1JbXGVSaBMeqWsTrbPx4Bd+mpVKDsEyQQkKM9oNT/e1s8iE0k+tQcuP0WyP27ago09soWSAuz+8zaUWFj0BMN72EyQODfU22j7X4i2zcDJrLvCqL116VkgUCNGASTIrnd3dlCc8NVXrV9D0bKjVoxKT9Q00d+R0bKk0QamLXbah0gUoXqHSByt8R7wlB42nT3Ym4igAAAABJRU5ErkJggg==")
PNG.Rings.MightRing       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADuSURBVDhPrZHPCgFRFMbnRewsbYms5N/GG1goeYIpDyEsvMREhKw8go2Fwka8gR2S0nG/mW5dM18yrqnf3Du/c8/XuY0jIn+FShuotIFKG6i0gUobqDRRD14+4RqDSg1CNtOi2vI6g0qT7bykFnGmg7y/gk/TUqlBWL2WQIKP9rtF5e3bJCI0t0NT3EbyrRH7US8r91MrXiAOP85tGfUzkUBMd9k34geuJ2V5XsfScVN+M/C6aVUWZ9jPxQsEaMAkmBTXX3kFOS6rqhTU9LkwVGrQiEk3s+BPfwOVJgg1CdfDUGkDlTZQaQOVvyPOC/lBcfqKmjnrAAAAAElFTkSuQmCC")
PNG.Rings.RingBluePlasma  := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFhSURBVDhPrZMxTgNBDEWnoUNUXIEyBeIGXCQHoEdcgSJH4AaRaDgJtIgK7QnozTzH3/FsNoCASF879ny/8c46zcz+VYvJv2gxWXV2dWNLmvukxSSKwnZ5+2bo7tHa87uZdAw6Bj0MtYv1EyAHA0McQPwjIKCP7crs9aGh69UJ3SUknt5xxCkxnKMFGx2C2svmvHU4h+R+eLLT/qRzv44KTRiiIyTo/fp0gAoYUNUY18PagSxIKBmxQwPoRkkerQ86VJL2Ze7y/BxWFXX+rPm66dB4nTQcEzV465uRHwwyafM7dd88HoOYL8W5Vzz+5Cp0HdQhXZmMwOrw5gyyHx5eD5iPFLPKTx9UH2cAUiRVeJebOUQToD9B//kegpWnT9PkEIriAzlIHeDRIYIyqwBhSLlAGBEgAblX1GONiUP6jO4us9SjIcAMREBA0V0+5d2x9rXSQUISWJAK+0qLyd/L2idAu5+ka2yTnQAAAABJRU5ErkJggg==")
PNG.Rings.RingGreenPlasma := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFiSURBVDhPrZOxUQNBDEU3IWOIaIHQAS0w9EEBNOAWCEid0YFDaqAASBnCiwjJxT5ZX9aez8AAnvlzK+3XW92e3MzsX7WY/IsWk1Vnt9e2pLlPWkyiKGyXbxtDa3tqz/Zu0jHoGPQw1C4e14AcDAxxAPGPgIA+tiuz14eGrlYndJeQeHrHEafEcI4WbHQIai/3563DOST3w5Od9ied+3VUaMIQHSFB725OB6iAAVWNcT2sHciChJIROzSAbpTk0fqgQyVpX+Yuz89hVVHnz5qvmw6N10nDMVGDt74Z+cEgkza/U/fN4zGI+VKce8XjT65C10Ed0pXJCKwOb84g++Hh9YD5SDGr/PRB9XEGIEVShXe5mUM0AfoT9J/vIVh5+jRNDqEoPpCD1AEeHSIoswoQhpQLhBEBEpB7RT3WmDikz+juMks9GgLMQAQEFN3lU94da18rHSQkgQWpsK+0mPy9rH0C082sNUHs0JIAAAAASUVORK5CYII=")
PNG.Rings.RingRedPlasma   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFlSURBVDhPrZOxTQQxEEWdkCEiWiC8gIAGaAQR0wCUcAEl0AEJEpVAisjYCsgHv7/zjb23BwhY6cue8Z/nWa+3RMS/ajX5F60me10dncWalj5rNYmysLye3gSK64cST29h7YOOQQ1T5fHkEpDAglWxgeKfAAG9328iXu4KOt8c0F2D5KiOM24yQxxPWKgQVJ5vj0uFs0lbT0/rtI50ruPooQ2G6AgZur04HKAGJtQ1wfEwF5AJCSczFjSBMlr2eL7ToZO0b3OV8ktYr6zT2Of7RUHzdZphnwSq3v7NyA8Gm7z4napvGY9B3i/Hba3zaOQofBzUqTaPzEZg/eVtd5D19PB6wHSluKs8/qD+OAOQIquHV8nMJr4B/gnqozUEq+0+TZMgFOUHEsgd4PEmhnJXAcKw2gRhRNotgZyrNP8VAgKpd3Q+zK4eDQFmIAYCyu7aaO/M+qy1dhKWwYb0sK+0mvy9onwAlhGg8b7RbBoAAAAASUVORK5CYII=")
PNG.Rings.PrismaticRing   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADVSURBVDhPrZI7DsIwEEQjIRqSlp5LIK5CwWEo6OmQOAZFzkCD4BgcY/FaGf92bRknxZNnx+NxlKQjokVRzTmo5hy8MBLAa8ELluNI97434zRPe//ghZGfYTBShkI4V7osHgrBlFxWGLVUF6bB2ymeeX99OLKIfCANBL8P4jLtIHvpRUAYIVoZwF6acSIyM+EadLOiCJnVbs+D1daHaGWxwu35aRb/pMCJyJxCvOa+NEj3nMjBB17XTVR6eZP9FzGHCEODyxh+X6EHHSKMErmSENVsh7ofBgJTl6ZY8WQAAAAASUVORK5CYII=")
PNG.Rings.StealthRing     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADtSURBVDhPrZI9CsJAEIVzETtbCxtFEcEftPAIYpDYWyQQ8AaaxluIIngAb2BjIWjnLURQkHFfZGETH2JcA192883OYxbiiMhfodIGKm2g0gYqbaDSBipN1INXTLrGoFKDkKZ/UFteZ1Bp0gqOahGn5m3iFXyalkoNwnLFPhJitO+Ep8S3yZvQeNOr5Ot+ohH7iruSUXTLFojD4fwu5cHqLRDTDaNL9sC2v5f19iGF3ixuBqX+QpXFqbrLbIEADZgEk+L6jfFOupOzKr1q+lwaKjVoxKTt4Ptfh0oThJqk62motIFKG6i0gcrfEecJpVtr29oMf5EAAAAASUVORK5CYII=")
PNG.Rings.SwordRing       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADYSURBVDhPrZA9CgIxEIWDdxGxsLa200OIFuIRBH8QC/EcHmCFLe29gpWliFhY2o95wWhMnkIcF75N9pvJ8LJGRP4KlRqo1EClBio1UKmByhD74OWIawwqPRhymmLL6wwqQy5zLGK2g4pbwbe0VHowrF1Lr3xdfP4FiXhS1GXYfD+Ifdm3STeNvIGuedeSspcORDpZV/MHHid2ux/LqvO6ctFFWQxSZg0E7oBNgqS4/mFk5LZE6VGL+j1UenAQSc8zfPKeGCpDMDQkrsdQqYFKDVRqoPJ3xNwBVUNoat9kctEAAAAASUVORK5CYII=")
PNG.Rings.TimeRing        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADNSURBVDhPrY/BCYQwEEVzsAR7ED1YgoeoeLAMEc8pJDXP5rsMxPgR3FnhmeRN5jNxIvJXqLRApQUqLVBpgUoLVOakD7+TssagUkHIOI5py+sMKnPmeU6LuL7vzxU8TUulgjA0K+qXZbmcc25C2fddqqq6NGLfdZ0cx/EuEJdDCNK27S0Q023b9j7Qey8xRqnr+mwGTdOksjhM+SoQoAGTYFI8fxgGWdc1lb41vVdCpYJGTDpNUzryOyVU5iA0p6yXUGmBSgtUWqDyd8R9AMzPWOlbubigAAAAAElFTkSuQmCC")
PNG.Rings.BlisterRing     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGcSURBVDhPrZO/SgNBEIe3kIBlHsFSS0HQQgRFEEypjSCIBG20NpDCIp2dnJ2djZ0I+g7a2fgIeQc7x/3mbjZze2c06MHvdu83M19m/ySIyL+q1fyLJpM49TL/p1iu8hWHp/treXkuZDgcqqpiHimKQpXFYukU4O3VWUrEoDBCAiC+tzsdQaNBP/0AuR6mLH3FgQ414eJYPhfn1ezxio8sBHmMA0BAG+ursrayJAd7W1qDGsDx640GgMnDXYiAMO52Q/wmDlxhdEieaWdzOYET0KAf71WXb70aFC8H+Tqg5qlpAbqkE7qS8zmWD1CDtseW74Wflu9N20dddgTqONnT1KXV+FrrsgHjADRQyaDMvwMifO3SPgByipwmy2aJdlAm7imjB5nwT472m0C7a3gIKDF+IK0igyH8WodAKGA8PdxNhYxeeG0ipo00jF8U5yKXQ9Gb4E1a5h8wCwzx2HbkgXJjZwCSG2EG1Mo8WLv500ROXCaXnnnptSWNLgcq5mVeM0fzBv2A1LCYT0xmVUC3aW+cWAFbU22Pq5XwBW41b/hZmVTGAAAAAElFTkSuQmCC")
PNG.Rings.ButterflyRing   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAD4SURBVDhPzZIxCgIxEEU9iZWVYOdNLD2CJ7DyCB7AG3gAO2sRbG3tBcHCQqzivsAPw2TcFdzChWeSn5m3yeIgpdQrYRjRPPw003hfhKEH0fmV0v5y75SGoUWy4+3550JksNmdWqVhaLFCZL0IJZJM+FqoAo+aJeNbMk6mszxW9WXSTD3D0ThfVzKdsk1aZBSBmiQhO1wfZc23lBC8lKcSwXK9zbCPBKmaQQcJhfZvIZFk88Uqj+H1grxsCF1dc52YtZoEmV5YMk1K0EQW+4KotlMoKPLfzO8j+1oIFFqpJZLlHruIoAGp5ZMs1/sggsYIXwdV8Btp8AZfdAg5DvCaawAAAABJRU5ErkJggg==")
PNG.Rings.RingOfSouls     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFWSURBVDhPjZIxTsNAEEX3ChQIGiQ6QgEFXIGOgi438BEirgQ9UFNCgTjSJm/IW8Zry4mlrx1/z775XrvUWpseX37L7qrPm039+f6q1Hgo9y1pYmQoqzoWPLoRpj7e3yKpadEhaCuEZQg6OT0LUfPsELQVS8Dr188iVKDKMDSBKRMJ9UMJVT20TeIhm4D4mgKFmhK//xMaEENYBvKa+mxkzUDqOWjBHIYhJNDNrHqoT0ePakDoCLOHWq9u7icQ79l7dXvXoAUI5vnF5QhqageiHooentbxjMHRR1NuyADF5Ji+q+lH1CZDpm3/l4abs/yC1LFpL2EmDz9PwciAOeVB9APjaNjPsQWQc4ibI4BZQoHB2TP+o+fXngP0EggohRp/PSYJzVoCemwBxDQhU1jbL5CU4QpfGKFYZyfltA6I5jQA4RHCIOH38f2xbWbtB/SpuP87v1K3dzRGLZ+Xec0AAAAASUVORK5CYII=")
PNG.Rings.StarRing        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAADNSURBVDhP7U+xDcIwEHTJCkyRkgmYBqFMQMMQiJoNaDIDVZaAEYyEaB6f7X8+jv1VOjjp9P7z3cl2Pw4imjHJ31nSRCMQxkKFkPrrLRzJYSbLzGMihpgoGe4+lmwOp7iXnkATNDz8hP71joWY5R38KdZA/oJ8s0bc6e+b4BCOeBF/Exomdn6Z8raRDZOyJCe9VmqCg+Buu5IQU+t8Z0IHx3MnIUs3oYOX/Zqe41HCmNihs5b1NtiUjTGMF2GvlYEmtDGbpUCfNf9YGs59AK1xoHwCDkQ+AAAAAElFTkSuQmCC")
global Rings
For each, element in PNG.Rings {
Rings .= (Rings ? "|" : "") each
}
PNG.NoAmulet                := BitmapFromBase64(0,1,"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")
PNG.ElvenAmulet             := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAflSURBVFhHxZjbb9RVEMeLKIgiFaWB0tu23d1uu93u0m65lltLSy2lFKil91KuKXdSoBQNiZFYDKIYvEXwxcSoESOSIEpSSdT/wRffefadZDyfmc4WE999ODm/3zlzvvOd78w557ebJyLaXl66VP6P5v7/RaI2lZJEolrKKyq08VxdU53rKyoqJRaPS6quTscikYiuqa6pmbWp0floNKo9zdckElUSj1cprs/jkzElkiNRW6sOVtXXq1NAi0tKcuRo2ACCHQ54Li4ulqpEIswldQ02mcwqtWGedd47UfrKaFgfi0tTU5Ns2rTJ1AAoGYAwAiidyShTAOhZaARSqgIkstlszllpadmso2rFqArROyneXQWweKcHg3WVYXzLli1GhEWeAidTl87oO6D0eSGL+YsXSrz0VakqW6atePkSmT//GZ1bUVhoUQZg7DMhmIQqVTub5oRiR6MxVYyAaJBpbm42IhgQIYtgSw8YKuGEdnRPo9y9NiC/3ByVb97plW+n9+nzx5Od0tOSlOWvLFY7IiVdBIdipNYVceeRSLnU1CQ19StXrpRt27YZESYxrKtL5yJyFY7szspvnx+Uu+8NyLmhDTr24qIFsviFBTmCt9/slh+vD0hfW0rHIVNUVKRkcEhPsLF4TPFRgb66ukZJtbW1GREUgD3NFzmJR58dkLGd9bJ0ySIdg6CBxpU4Y4sWPqskfg4K3Xpjl5Qszw+OzKkrgz3q4AsivKMIarW3txsRImCCHVMW1KlvaFAHO5ricu/9QVXAbYjC802h4Yxn7Kmbr97ukQ8nOnRN4cpCqaoKdTK7xWk49g1AJlj7WkfHXI0AmM6kc88Ab82Wy8OPRqVw2UtKQOfClqNnpzkJgGmsScdX6JqJkMZ58/I0sLkjoEqDLS+vyNUjxDo7O40IAwBS9RggGZWdv/h5+eFav4zsyKgT8o0dcxDxyJwM0WO3a3NCHn06ps9FoXBLSktzdYGy2ELM/XZ1dRkRthrblwmMXTKAxnaukq+vvK5F6PXhQERKAULGU0c9sO7+B0MyOhsAwZFuUunEKVL8gNPd3W1EkCcT0sIC30EUG7UA0Mwn+2XnRnv2okYdiOAAYGzZtqiJ3fUz7XJlPGzL8IxS+IAEjsH3oBjfs2ePEQGAQSQ3g5gSIkqAyDd5X5cyJx456YEQinLqspaDDZvvpvtkuMMUMaJ2N0UqypUQjWCZ6+npMSIwZN8jOWQgQLSMMwYYZ8j9G0Oytzkp85+ZpzaAYWcpjak6vqUfhq1Mbw6jWifcR6wjLY6NIr29vUaEaDhZUQKGPEcidn94kQE60F4nf9w6rD1kAEIRTmAc8s74heEmufNun14JTnT1mjWqIulHNQ02PIPd19dnRHCOcePqRiVDvgGmp2HsRdixwc4WCpGDTM+JAOjzKPb77UP6TBDgohY2YJJGyFFLzBHswMCAEXFjHCKvXeu2z1mMfF7EOKBWfroxLNMnwtEc3r2tThbLr2HbcuyjDOsgilNwLLi5IiVF+BkaGpqrEYiUlJboFoMAEbKIcQDIMQBewLQv39ord672KQGOddJx9USrnqruCHvw6Kk/MJRYOCA57HgfGRmZUwRnEGKB9z7uz4DzzGJXZzo4ngkq3Ls+qCSKCpYoAU5Q+8iyc4Nbdv369SH9q3WMwxOVmdu/f78RYYDoOdScBMowhnPvAfBt7cSIfrgjHc6MFklFlys5xpkHCzIUqt9L1MfatWsVi3f6AwcPGpH/yqHu+VnGNB9nlxAx7wBZkRaEFs6CQIIPKVfSbSBOkfpuIUV8BVLMqVSdHDoUihsiTNqBZPcHBQSIbV3b0q4Mz8mkbTsIYZ+fv07S6e+ViNu7LfOQhxhq0DPOtyoYtCNHjxoR8gcJDiPfskQKCAQM2K5+dhTEAcABzp+LXpf8UxC5rO+QIBWoAIarAHGK3oNlHp/j4+NGBCMMkBVlMDRCRMVxb5HbFo8pSXqc5uc/kM3jj2XzzOOgyp9PkeH8ielh50GgCD1KuzLMHTt+3Ihksw064VGalNU5SVnAHIvsO8RIpLseSMHNGZn464nc+/uJkkEZT1Ny9ixyXN5RApUrK20zsHtOnjxpRDBeVT/3WwRDrxkjYZcgkaAcAMiNs4LNMzLyxRMlgzKaplAzFCb2EEAJcP0rnwywQcChaE+fPm1EvB7IF83zBxGiYAHPEGKOVEEQJ04GZUgT7+CBA5m5o8EUp5WVRSTb2KhECfrM2bNGxH/TeG3QkwKelViIiDFuaIAYsx1l54KnKS+vJpc6HDQ1bVQFeccWFfkM4B08bBibmJgwIkQJY08FvRMDgLmGUEcAeL2w/wEh164Mc3yPsk6dBjVwxncuyrKOeewbwg2P6hA7f/78HBFAcGjq2BcV4+QQAJVXv+Dt/kEJbBjjnXS5LfmHCJhGqFy3s6cdNSELETAmJyeNiJGxD2OP2Krcth5AEAAEMFfL7U05kx8bbtynx3lmDWQgC1EwuekvX74sU1NT9t8ECzjpfKs6AGS4KwBBZsYpRMhhy7zN2Tnja/2ewsaw7EaHAL2vgcQskZBYI5Lnfw9s2bpVmltapLW1VbZv364/fvjdwSd/9+7d+qHLN2bvvn3S398vg4ODMjw8LKOjozI2NqYX2OHDh/XYHj92TA+rk6dOyekzZ3R3TJw7JxcuXJDJixfl0qVL+t/I1NRU3j8utuBdDhF1SQAAAABJRU5ErkJggg==")
PNG.FoxtailAmulet           := BitmapFromBase64(0,1,"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")
PNG.GarlicNecklace          := BitmapFromBase64(0,1,"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")
PNG.GlacierAmulet           := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAd7SURBVFhHxZjNT5RXFMZZEYik1k0jyAwzAzPM9wwwIBIERPnQqsEvkE+lKhYNgkHFcUGTbhqT+iew6appY9M2TRvWJCbGRUPT2MaGYExX3XXRTZPm9v7OmTNM0+67uDnve99znvOc59x733emyjkn4+0DB9z/MSz/P0ikMxkXjydcOBKRwXUimSjbSKTZRWMxl8lmZS4UCklMIpks+STleUtLi1iGxcTjrS4WaxVce05O5oRImUQ6LQna2tslKaCNgUCZHAMfQPAjAdeNjY2uNR73z1ISg08+3yY+PCfOrBHFNrf4+GjM9fb2ur6+PlUDoJQHwgmgXD4vTAHAEqgEMqICJAqFQjlZMNhUSpQQjFZfvZHi3lQAi3ssGMQ1+/mBgQElQpC1wMhkc3m5B9SqodIq300AsHlPGEsMliqx+KtFqXSpzXHxa2mJCg4FMcAaHBxUIjhQIUGwxQKGSqpM1CUSSQF//fq12K2tLbFPnz4V++TJE7Fnz54Ve/nyZbG01hSx5KFQ2CWTKWl9Q0ODO3HihBLhIY7ZbE4sJBhID3vIALq7u6vgnigWebEAYk0xmzdSqEmx0VhU8FEBS3GQGh4eViIAk5RhQSSnXUZiZ2dHLAQVNCbEqRjFmAccZcFgDn9TBn98yQUR7ikAtUZHR5UIFfCAHdPk1Wnv6BAwWx/IaGBUYf1moZGcawakAUaZVCrt6hvqJc62OIPnWiRqhCTu5KlTe2sEwFw+V75mIRpBwJ49eyaWLcccO81IAMyoVMbImyLMc5ZQbDgcKa9HiJ0+fVqJMAEgqx4HJKMqgitJAI4fzyBilRmZ1ta49BxCJMhkshIna8BbCFIcvmBbXllLEKF6Ww84m2S0CEBAmCPYknKN5CxAyJh6rDNieBYIBIU08WDRSiMOYcMcGxtTIgTmfVtQw3aQyhwXkI2NjXJFtqhRh2QkABhfTlk5jUs4ECaucveQGBwritznz59XIgAwae2gSoAq1whtY7WThDnI0B4IoSinLrEH6+tdIBiUa6ueeO7BDEXCMs+gWJ5fvHhRicDw0KFDUgFkIEC1zAMyufKjWOm7JwAoPoDhpy2NijpsaQhXksj1fymW9xFxuo70yAdzfHxciVAN+x8lCOY6FNL3BwATSz+4ly9fyjVriWRsT4BQhBOYxNzzzBTBnxM40f2ZXFMEiqKaFOuvISQ7CyIkB6Szq1PI0G+AbY28ePFCVHnz5o3cMwCgNewUAElii898tre3RQ3bwmDSRlRkLZET/6mpKSXCBNICjrwkAJx5ANi+l25vS3WAv3r1qpzsvwanMH737993maNf/GuxUjgtoUXkmZmZ2VsjEAkEA7LFIGBrgXlAeLkNT265zc1NUQhLsitXrrihoSEXjUZlDr/Hjx8LieSRz8skaAXrDxKowQnNKc793NzcniKwhRABZm0eoIWFBUlUGPpGlCHhhQsX3G+//+V++vVP1znxkZC5ceOGkGgf/Fpsf3+/xPOW7enp8e3vEkx2Ia2EyNWrV5WI9ZaFaCRQhjkkxAI2MTEhBHLHvpLeQ+STb3921YlZFz654Y/usEv1fOqOvLsphOxE7Tp8WPDAZn10d3eXC8e+d+2aEhGp/ATDeih7vsSYYWTOnDkjSZC/y1c388Gmq0nPCxGOAOYqSVhhLFLbLbSIr0C2Oa+B69evKxEe6oGk7w8WEIn1u0G3dKUyRobEBwo33cG+j91bhQ/dvn37PFakTII48NjiFIkaWOb5VoUkY+HmTSVC/yDBGYBlsFgBgYAqoq9+dlQlmbq6OldTUyOjkgStQAUwTAV2CWeMFctzci4uLioRnHDg+wNlcFRCdtyHZU63eFRIGpm2tja/Azhp90jgTzy+HHZWBIpgK09ent26fVuJFAr6IYRMyKhS6geRBfCMIBQhARUZGVpS2Q4SoUKqdBYZLvfEoXJzs24Gds/S0pISwbmtfe+3CI62ZpSEvgRJYMc3iQCFBFt4//794mvqsTDxhwBKgEtSLB1gg4DDol1eXlYith7oF8P6BxGqIIBrU4JkJIXE97/84d7pft9dWnsu98SDh4XM3tGgijOamkKu0NkpRCl65e5dJUIbcIYMCbG0gGsh5itijl0CEHOAcF1dXe0SY9+52tpaIWetI0Fv71FRkHt8UZHPAO7Bw4e51dVVJUKVMLZWYI0YADzr8OsIAG2V/0Dy+x8Qeo0SzPGM71HiJKlXg2R856IsPjynXR3+DY/qEOMELhMBhISqTlwAmKeHAIi88gWv7x9Uwoc57mmX+dJ/iICphMKyna3tqAlZiICxtramRJSMfhhbxbrKdevpdtQf4YCZWuavyqn8+PBpUDnPNTGQgSxEweRNv76+7orFov43QQAnnW1VA4AMn/+AIDPzLETI4ctzfaY7xWLtPYWPYukbHQJYi4FEiYjf+Eqkyv4eGDh2zA0ePy6v9pGREfnxw+8OXudj587Jhy7fmOP+BTg5Oemmp6fd7OysfA7Mz8/LC4wTl2N78dYtOayW7txxyysrsjtW791zDx48cGsPH7pHjx7JfyPFYrHqb5Sh+PVFdW/KAAAAAElFTkSuQmCC")
PNG.LightningPendant        := BitmapFromBase64(0,1,"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")
PNG.MagmaAmulet             := BitmapFromBase64(0,1,"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")
PNG.CollarBluePlasma        := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAaSSURBVFhHxdjJblVHEAZgb7KIFEVByiKAsa+Ha1/beMJ2hBQHgRmDEDIIMc9DECAzyExmwT6LPELeIFLeJdlGWUU8Qfad83W5rg8R+1gqdZ/uqr/+GrrPuR4opVT5ateu8n9I+v+IxP7Z2dLrTZWR0dEq5lPTU/1xdHSsdCcmyuzcXF3rdDrVZmp6eltnuu6Pj4/XkaRNrzdZJiYmK27u82mtEumT2L+/Olg8cKA6BTq4b1+fHKEDhB4H5oODg2Wy12v2ZqoNnYWFxapjn12OSdQ4Nt7YdyfK6upqOXToUGQD0EwDRAnQ/MJCZQrAyDAIzNYsILG8vNx3NjQ0vO1oqmJMNtEnKc+ZBViejTDYjTXrhw8fDiKMsgRJZm5+oT4DzWhE2mtIAwC80BBOm292744om3VrsSdT+7fL3Kt64+PdiiMgAmttbS2IUBAhI2yNwGQpMtMtU1PTNYoDS0sNQBAJh1EG9p7pKBfi1pU2M5LOO52RMj09U0u/Z8+ecuzYsSBik+Lc3HzfAQHEETIJNtD0N0Ge0+q4AbRHN/cJMhwa6XcnulUvMyo4pE6cOBFEZIBTkkacK5fxy6UnfSf//Dpbyp+/1DniIpYxxK3Z++Pnr6tekoELky5fiHgWgABPnToVRERlw4kZbrIj/QD0BxJvfyt1TGmTEVlEG+ST7NrsZ1V3crLpk+0jTjiOIGWjU+1+OH16p0cAzi/M9+eaDUFgi6//qmSIuTVRc5oEkgSCiKSdkUS5J2uwIyOj/X5E7MyZM0HEAkBdT0HKEuD3v4NAPpO7331efrr1RT/1SUb01pC0TzeDSNsMjqTfs2fPBhHRZz/IRgIgkUbSKCqGnBEp14DIZHn1Q+4njhGZxMu1xFxfXw8i0rPQlEU2bKZyGmouDpDMpnYaENFPCLgnHNt6G/8Hx5gCM3HZ8X3+/PkgAsCikxFRd6tiuyeUDSFOMnI3MkIy6tZl62LbNzRU5zKVDj0nuSTitNm7cOFCEBHp3r17a2mQaTepsX1DIgCUDkeyEiXt1uw40ghn7xjhI+d9BC97hh3MixcvBhHRuBllgrF52wAQ50a9xNnMTHS9jLiBOfRsr52RJAqHZHACERzMy5cvBxHOKa98u9I3yPTJBuXsEQ6SlNLUe6IBtJ/Nx4kSyQxc2UoSGZxeskf/6tWrQaSt3G4mIirp4ySJyEqejHie7j/LKiKubnaIckoHXhIJzJEaxPXr13d6JImkIvaZRiDSLXOccJgXVxIwz0sOVjqi3y5NBuk94xaHefPmzZ2MJGOCWM6TDB3g6RSRfK+QJJYXnRs0PrICt51pa06hLCNy+/btIJK1lXIkROGDpU0kJYnkzZnimWRWotw7AWWmNe/BgwcrGfvGu/fuBZGsIUEIS0ZJ4sOHDzWaBEvxTD5FNuf2cl8DC9IV4SuwXpSzc+X+/ftBxGZcSL0aiQZKII78tYGTAMmUJ1GSdkmgTUawAvWtGr05Xn58+DCI+EpCwh1gJI5jghitZaZy/VNO8znn7UbVvJo+g3Uj8/no0aMgIlUUfH/IDEWO2wBRc19Y3Y9S702c82xUc/Z0XXYZRLwkJz66ee09ftKUE5Hl5fgQkiY3ZXzeTW2PYWCPkUssGxaJlHajcqTcM03UEUDgepYJp29sLO4kp2djYyOIUF48sPNbhGL2TJDo1pPFQV7fHOYRzqNrLbOXNysCMgE3v/JVwAGBo2mfPXsWRBBgrF4k64eIKBiYI2SPMwQ5bovssYdnRGbnaoiMk+HhTlleWalEBf38xYsgogyUkeHQqATmldj2i8sbGpA1IOZZd/ZGdghzsLr6fc2gZ7rK1Rkdqc/w6Fjb3NwMIqLEOEthTGIA7C01fQQgStW8BJvzD0Stpd+aPd+j7KrTJhuc+Wkps3Ts019q3vCyjtirV692iADhMLLTqwDW1RBATW/zfjDWEjWZoGPNs3KlrvojAjMIjdSbOssum8giAuPNmzdBJMjEb9+MOLo8jh4gBIAAy2ylfmQu0k/HG7e9bs4GGWQRhelD6v3792Vrayv+N8HATScjbQBkvLiASLN1jYgcXfuxFyclbTm0Tiew4gc4Asa0QWKbSNPqQWQg/z1w+MiRsnb0aDl+/Hg5efJk/fHjd4dP/vVz5+qHrm/Mi5culStXrpRr166VGzdulFu3bpU7d+7UF9iDBw/qtf3o8eN6WW08fVqePX9eT8fmy5fl9evX5c3bt+Xdu3feHgNbW1sD/wKQxWIoQxSdoAAAAABJRU5ErkJggg==")
PNG.CollarGreenPlasma       := BitmapFromBase64(0,1,"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")
PNG.CollarRedPlasma         := BitmapFromBase64(0,1,"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")
PNG.Scarf                   := BitmapFromBase64(0,1,"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")
PNG.TerraAmulet             := BitmapFromBase64(0,1,"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")
PNG.BronzeNecklace          := BitmapFromBase64(0,1,"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")
PNG.DragonNecklace          := BitmapFromBase64(0,1,"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")
PNG.GillNecklace            := BitmapFromBase64(0,1,"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")
PNG.LeviathansAmulet        := BitmapFromBase64(0,1,"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")
PNG.LionAmulet              := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAZ7SURBVFhHxZhJT1tXFIDZddt00zDY2MbzAAbsCCFCCWEKRQgoYh4TCIKIQEQYjFqkSN3kP3TVVm3+QaXusqmUfdf9BV31D9y+7xzO88V1qu66OLrv3eGc7wz3vmu3OOdEPr13z/0fYvbvQBRLJZfN5lw8kRDhOZfPhW0i0eVS6bQrdXdLXywWkzW5fP52Tj7Q2PJRSaczojeZTIoebNInICFEsSgGevv6xChKOyKREA5hDkqYBxTPHR0dd4wdb+5/VBgHAN1dyWB9Ku2Ghobc8PCwRiOTzbpCsSCTMNZTLgsphmhZqAAliQIQvvGVL+f/kxgMOtERjXYGQEk3MjKiIBiyFBhMd09Z3jPZTNOw+wbK6aKIP94oPki53CsOIcCMjo4qCMYrlYoAQEuLcaLEuylD0b8ZZw2eki7ASSGppS4Yf3v1RtpYLO7y+YKkvq2tzY2NjSkIZIS+u7tHWhQiKDIFQDQzLoYDhazDUwt7e3u7wGDQdNhaosD8XC4vUBMTEwpCBDCKsJgIWSRMgQ/AOAI4HieTKQFHOZFFB328N9MBCOtxgGhNTU0pCB4wwI7pDKLT198f1oTvCXPwIhsUN88UGsZ4RoBHMZEpFIquta31HzoYZx76yQTrnkxP12sEhT3lnvDZFFiBASBjwZajZacZBIoRPzKkpDGqPONsPJ4I6xGwmZkZBaEDhextJhCyRhD6Uc48PAaEdX4qM5ms5BwgDJRKWmPoQBfPRJ+5AJvd2dlZBSkH5wbblwG8IWSNIPSx2IzyTH2k0imBsfRSZ0AwFolEZe2TL8bCYudd9cVDnXNzcwqieQ0KL/DadhBeNcLQb0VNdDBGPQFA3bBt5TS+1QMwgM1gzClsLywsKAgK6CTkOiEliljAYhPeMWKe894o91tbXSQaFT2WNoQxYAyEMZxlbHFxUUHwlH2PB8DghW5LLVoDqRZ7Q4PInx++db+/mw/lx7flcMwg1KDq8UHowx4RWVpaUhC+Iex/IsFinmOxTvGKPc9CH+SvP34R2Z9pFVmezIXPwBgQEDjUCEHUxNkgugCtrKwoCMahqz6oCgz5RgktYh4ZhBklCrQ/vaneaRE/OgCY8A4ctWRFv7a2piB02ElI8bE1oaUfIFNIKjDy4d1ztzjxeVMI+u25EYbWL1J2DnY2NjbqNQJIJBqR0xIAipFFtnv8WmgGYO3Xh5omf34IE9QfEESDA5JTnPetra16RKyoyJ21fkQM4NfvpqUlOjybYVrekW8OBsP5BsJXdnBwMEj/A9HJ4cnOBGRnZ0dB7GDhUDMIIkOfD2GCMUCQ99/PCwStgSA21y9edFMfAwMDoeO0T589UxAJVdCBWA6Bs7PE9w4hDZXEJwKCESBoeaefcRN2lIHYbiFF3ALZkXwG9vb2FIRBtjA7hHRQQADZ1kURSinE335ece9/+EoMIhYNWutjHAGedQZCNHAWR7mrEhHk+cGBgpA/ILhf2JalWIEyEAs1ioFBMG7pCVN0C8E85l9vZ0MQdgmnrjnLNw6bh4eHCkKomMD9lMgwUYG0RlBkUTEYpBmIjZWTn0lray0iRINIW2Swc/TihYJUKnoRIkx8zBAKV9v6OWKKSRHC8/LofUkHbeMY820tugpBFIgEZ0hXl24Gds/x8bGCEIHevl5JBzBMtJqBmrPEChfBCJEhCkTEnhGeGfcBiAR65bdM0JIBNgggFO3JyYmCWD2QL7mH3uYPELxgAc92uPkgtCaNIOyS+tGgEUc6O2OuUq1KinD69NUrBbHfNFYbtBzzPNsFmT6+0AZCOjBKMQJAyzv9BjI09FBqzz4f7M5YQm9w6AOCvrOzMwUhAhBbKmgNDAWM9Qd1hALG/aj4xervEDEaRANj3HOJLLq4r5Ku/uALT9QBOz8/r4NgAIManawooJ8cokDCKzf4+vfHYPyWfvIPCDoVKC4ntaWdlOAkINi5vLxUEIXRizGCYa3ygkChCACUoMyihVE/Nbwzh0s0ejSiGkXWAINjgKKTL/3NzY2r1Wr63wQLOOmIiK8AGK7/KCHM9OtXWe8rjGPcxNbad4o5qku/6ADQqr64QNyCBKsVpMX+Hhh59MiNPn7sxsfH3eTkpPz44XcHV/65+Xm56HLHXFpedqurq259fd1tbm667e1tt7u7Kx+w/f19ObYPj47ksDp++dKdnJ7K7jh7/dpdXFy4y6srd319Lf+N1Gq1lr8BQyBLKB9UygAAAAAASUVORK5CYII=")
PNG.NecklaceOfTheDeep       := BitmapFromBase64(0,1,"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")
PNG.PlatinumAmulet          := BitmapFromBase64(0,1,"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")
PNG.PrismaticNecklace       := BitmapFromBase64(0,1,"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")
PNG.RainbowNecklace         := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAbLSURBVFhHxdjLblXZEQZgM4syIUySNGD7+H7DF7ChEXIQmGsjRGiEzP2WhhBo0dCiuZhIPECUYQaRMulpt5RBXiBSz/IAkaIMM8gwygO0op39VbnO2fgFelBa+6xV9ddff6219raHmqYJ+8mePc0PYZX/AxIHFheb2dm5Zmx8PMzz3Pxcfxwfn2impqebxaWlmOv1ehEzNz+/7TMf65OTkzGyipmdnWmmp2cCt9blNBdE+iQOHIgEBw8diqRA9w8P98kxPkD4SeB5//79zczsbLu2EDF8VlYOho91cTUWUePEZBs/Nd2sr683x48fTzUALbRAnAAtr6wEUwBGgUlgMVRAYm1trZ9sZGR0O9FcYMy01Rcpv0sFWH4bYYibaOdPnDiRRARVC4rM0vJK/AZa1ah0tiUNAPDwrtEPLKps5/mvtMXwhZVtng3sycmpwFEQg7WxsZFEOKhQELZGYFRKZaaaubn5qOLQ6mo/8f0LB5s//GajbzWvXYhTTGtLkUre64018/ML0fq9e/c2p0+fTiIWOS4tLfcrYoCwR6bAdhKo5Kw7t2/fviAjoVGxU9NTgVGKKg6ps2fPJhEKSMoqSHLtMhahItFNrmKKIV5z5RPJtpWJlre+ciHiN0UUeP78+SRSR8yJGW3VIT+A2h+qAlzVVr9tNMk8s1KuS2Zmpt0n20ecWc8iqdGLuE8uXBjsEYDLK8v9Z5utCHZJOHLmnLQiAZh1lSkiChtcATNR7NjYeH8/Inbx4sUkYgKgXc+BZHlCErRIUIafNUSqsiKjej1HqEtmeGSkvy8Uxxd25b106VISUX3tB84lWfeEmBNcST2r1AZEptSzH3a2R3GwtLKII1yYly9fTiICV9q2CKgTVFUx1Uhg3siog4gEgO0bxzZu422c7j6RAwmJ4VRR5q9cuZJEAJisdqgSUBHRW21DSJKqXHsQoqhbV+zPP/ooWuFZ7GCD57upNz4WhJhiYV29ejWJYOjckxwZMgv+/tvz2yCDGxIBoHyAUSVbOhXquIsQrhaID2vJeR+Jy32UVz7Mzc3NJKIaNyslBHvu9QZtKSmN9pJkCwu56yniBpbYb2tdRaqYIx9/HEUoiGoIeYZ5/fr1JCI5kMNHDgcZClQlnjkDKUJFSmvinmgBrdfmk0QyRcCgFh9ktZGK9pKc/G/evJlETHAGXifl6dCBGAWTrzaxQKpUZfl7vi3iSOAopOQX/+3uoT4O46/wxBwLnNu3bw/2SJySkeE4Yl0A8wDIDaD2hsuvyITMbZVHjx6NNTESdXH42H8wqOE947Lz++7duwNFEiAvnAIoVczxAe5ZMF+3JKnjNLVErJkrNX7/4z82v/vRT+PZW/bYsWOhnFxOIZVh3b9/P4lUb0kugcDvTk1/QAYJAHy7xPiHzO2xhCFZqYEI81zvpQ+VywvuV599lkRCqnaCAROIBPvnL9PMYe+UqJgfIJvUPURmBL0oi8TfTv29T4Ry1UYt8hVIycXFpebhw4dJxGJeSPn+0HvBReLfv00zxxxdJBDiz/yu9SLRJaJIahgV5FtVDPv148dJRP+QcAcY6/h2SXz/l+UY//Hnn/UT7rSha183Q8N/CkOgSJQKsXfaTV/FUknOJ0+eJBFOHMhKGY5FZieJ//1rKczznm92hUVyJFpbffjXPhnxLjtYVKCIsXvzWnv6+edJZG0tP4TIZA8wG9cIrIgUiS6Ryf/uTjLbRIpMksjbt3D9poTNPDGRd5LT8+zZsyTC+eChwd8iHGvPYF3KIND8522MRaJPpKMCq5sVAUrAra98HXBAELFpnz9/nkQQQEa/WPUPEVXUSWI7iRhZrYuHZ0RmcDWk4mx0tNesHT4cRBX94ssvk4g2cK69YfQe8RzE2orMeUNXwp0mnnr5CZk36/r6L2Lv1evDpnXf+A2Pj7mXL18mEQpgXK0wFjEA1lbbfQTAujnnH4hek9+cNd+j4iJpq4ZkvnMpy8c6/9X2DU91xF69ejUgAkTCVCe/qMzrIYCQt30/GBGiEh9zfjua5av/iMBMQmNxs1bbtQRZRGC8efMmiSSZ/DCuinOX59GrmxQIsFKr/FO5lJ+PT4PuvGcxyCCLKExv+vfv3zdbW1v5vwkBbjqKdAGQ8RIDQmbzNiJyfK3nWt6wFSuheT6JlV9jCBgrBoltIvn/kXZxqP49cOLkyWbj1KnmzJkzzblz5+KPH393+OS//Omn8aHrG3Pz2rXmxo0bza1bt5o7d+409+7dax48eBAvsEePHsW1/eTp07isnn3xRfP8xYs4HS+/+qp5/fp18+bt2+bdu3fxv5Gtra2h/wPvpuuesPlUYQAAAABJRU5ErkJggg==")
PNG.SacredTreeAmulet        := BitmapFromBase64(0,1,"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")
PNG.StoneSkinAmulet         := BitmapFromBase64(0,1,"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")
PNG.SSA                     := PNG.StoneSkinAmulet
PNG.EnchantedTheurgicAmulet := BitmapFromBase64(0,1,"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")
PNG.EnchantedPendulet       := BitmapFromBase64(0,1,"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")
PNG.KosheisAncientAmulet    := BitmapFromBase64(0,1,"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")
PNG.ShockwaveAmulet         := BitmapFromBase64(0,1,"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")
PNG.EnchantedSleepShawl     := BitmapFromBase64(0,1,"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")
PNG.EnchantedWerewolfAmulet := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAZZSURBVFhHxZjJT6RFGMb7qJ4GYzKyd0PvzdJAswQRGXYnyBZk2JcZcAKEZcIAAyacvJsYLx79C7x78B/TWH6/t3g+ioY5e3ip+t6qet7nXWppEs45k2c1Ne7/ENl/QKKtvd3l8wWXamkxoV8oFuK2paXVZbJZ197RYbpkMmlrCsXi3Zyiq69LxMJcrcnncy6bzRluOp02HTbRGZGYRFubGejq7jajgDY0NsbkEOYAwjwM0G9oaHC5fD4aK5nx/blnsYSkRBQCtK3paH0m64aGhtzw8LCPBkClCIhJGOssl40phmhZSD8ERiCEvqmp2b6rjVeTAgsbtDjCutZo/cjIiCeCIaVAZDo6y/b9MWCBV8+BGLpy5Ix04XykXO6ytCKQGR0d9UQwXqlUjABsaWVgpPLJIyCJdL/9POeuTnqtj6ekC+eIGKnV/D//ODA8+sViyVJfV1fnxsfHPRGY4UlHR+eDFLAwJMAYBiAK+XAeLZ4q7PX19TYXg7SaD57IFArFyHbKTU5OeiIAwx7RZBGQpxhR2AFFIM4Ygp5xIovhdDoTEweX+YpOSIZdND097YmYB3eASgX9XLTlpGcOYHiRj4qbPoWGMREjGgBDulRqc7V1tS6Xi3bU3RZHwAqJsO7bly/vawRlmAqKTcbxFgL02XK07DSRgABCFBQZUoKu+e6sQc9ZwvFQTWZmZsYTYYEGw1QoDVQ26QOcb8Ygwjrlnz7ek3MIEZn29ijVUeE2NjUZBgRxLrRHOzs764nwEaaE4gW8u6fHAFmITsT4po+nmWzGyITprRacAItUKj1EX07Pz8/fEwlJwNyHOW8L8UaHl4qa6EAEA5BjLc7IoVAYwyGwlLrQ5uLi4mMi3uuMEVKNoA8l1EGIVvl+SoQNZrIlFUdF+qWlpcdEyD8E8DZkjshj6Qjv2Dd18TlCdNjSRBBjEK42CjZ1FOqWl5fviQiMxZwFyeTT90conKgSvqkdiFCcRBYSOFRdnF/W1j74XllZeRwR0kJthDrVBi0GEPQUW3i8q6DxGmNEBhLUG+OqH2Erumtra4+JEN7wG68S0bNF4j31TwLGFY3evj4ziiMQ+aymPhbuFKUI4xAXCXA2NjYeEnmKLd5AYP74Fzf4/YX1Ae0s++MdItl0wgwODAzYGH3msoY+BCFH/bFGZcBhRylsbW15ImEOQ7boFRFA019FRRX15WmqZ9ra/OCCm3j9U6z/9PMmm3vxo9dhjFt2cHDwARFSydjOzo4notyGkzh80LH/aQFXVGjVDyXUiwRHel9/f3wvUbzg4yDftK/fvPFEwhyGbMUYARQvO4fmjBRCFCQYl545iK2JjPm0lK2AlSJegXZQRtfA3t6eJ8JgewcXk98tFBBR8PdD5gER2t/dr+7C7Zr3pAWhj44x5ogI6dWbhGjQgsdbFZLID2/feiLkDxKcAbQI2xUQUsNCdAA/zw66/u/2rY/s7h/F/S8a8jbWmOuzb6IQFioHGWcMOpxlHJsHBweeCJOYwPuDyDDRE9JxnzId4BChDclIpBMRosmjHCycISK04cnL2OHRkSdSqfTYAGEijD6UhTikLDDgKDVKD8YUfoS+CIQ1ggPCLUVRIBJEubXVbwZ+VhwfH3siTO7q7opPTyaqZqpJyABGRUYkqoloru4t+y0TtWSADQIRivb09NQTUT2QL0T5gwheACYJyfz79z+xXv2QgASDijjS3Jx0ld5eSxFOn71754noN41qg5YXGH0jdndxAarUIKHBp/pDQ19b7VErEKBoeQbwDR4k0J2fn3siRADGSgWtiAHAWE9UR4BXE/nrecLkKSKcQxjjnUtkwUqlWqxeeqIbnqhD7OIiujpEBAIY9NHJGwB6cgiAhTd6QGMAj2hJBycootQwlxZPwbQoRLuOk1Vp160MEexcXV15Ip6MfxgjgPkq91sPIIgAAhh9jCF4H0aDOTyiwfER9QciayCDYxQqmNz0t7e37vr6+v5/I5x02qoCgAx3BSCEGT2FDTnmyrhEa3VPMcdj+R/zEKD1eCkjgdi/JfiD6N8DIy9euNGxMTcxMeGmpqbsxw+/O3jyzy8s2EOXN+byq1dudXXVra+vu83NTbe9ve12d3ftAtvf37dj++Dw0A6r45MTd3p2Zrvj/P17d3l56a4+fHA3NzdGwjmX+A/s5tzp8p21nQAAAABJRU5ErkJggg==")
PNG.TheCobraAmulet          := BitmapFromBase64(0,1,"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")
PNG.StrangeTalisman         := BitmapFromBase64(0,1,"iVBORw0KGgoAAAANSUhEUgAAACIAAAAiCAYAAAA6RwvCAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAfISURBVFhHxZjJb9VVFMdZukM2aOfX4bWvr3P7Oti0TSl0gBZaoJaWzrSlaUkpTYFSAtWFRIxEcWFAcUjdSBwSoxKDGg2aGElEVHSjrlQS4z9xvJ9zet4rhr2Lm3t/957zPd/7PXd6b4uIaHl02zb5P4rHf4BEaVmZxGLFkpuXp4V2cbw4Wefl5Uu0sFDKysu1LxKJqE9xPL5hE9fxgoICrSOZ2x8ohYVFiuvjxKRPiSRJlJZqgKrqag0KaGZWVpIcBRtAsIMU7czMTCmKxcJYifpg44EZx89r+iCAXX5B8I8WSlNTk7S0tJgaAJUEIIwAqqisVKYAUONoBMpUBUgkEgklRH92ds6GIhasKGY+YIHpKoDlyoCBX37ob21tNSI4eQqcTHlFpX4DakHiUllZFdoxBQC4MhB2n8fT0h5QwcZQqnQjzTG1KyiIqh0TooDV1tZmRDBghjjBlhowVDJlolJcHNdZVNfUBAAjYgGrVBn8CYAN6YI4/aTWFfHg2MXjJZr69PR02bVrlxFhEMPy8opkAApABIKMg22WnKAaOABqoE2yZ2RkqC0BqbGPFkaTdooVJheJ5EpHR4cRAZigFHcCkHRROyEnaaCFSpwZu9yMowwY9Gmw0MYfe2yxIx18MwEm2NXVZUSYAQPsmJygDvID4OuDWbkNs/B8s9AIRtvVABjSJSWlkpaeJkVFYZ1sbHGK22k7xMJ39549qTUCYEVlRbLNYvPgkIGAjoUtR81O+y8JVMCWfsjTx8T8CMCOyebm5iXXI8R7enqMCB0AsrcxQDLbIZYGpKQfcL4Zgwh+gNNHm9mTcwgRoKysXDLCwsWGAkEmhy3YHnffvn1GhNn7esDYJSNFAGrA0OfEHMhzjsyuHusBHx+jMAmwSCW22EHYMfv6+oyI5TUsvODgO8hkjqkjihCAfmoK6ngggLH1by8QhiBKEQMsAoPjk6L/wIEDRoR9T2cqHWEXBEKpNVKkaYNQT3u29kGGtgeljS8HW1a2tX32hmF3UyQvV/spTJax/v5+IwJD9j0zgAwEkJZ+S4OdkAT755cJrSn3v2tPtv/+sV9rtjSEnYQFLFBy3Edg2zoybBQZGBgwItwh7H+UwFlPyXB6MgtAXUpqgv1wPU3rry+bEt++8pjWAENksyJMiP66+npVkQmhmk42tMEcHBw0IgTHuLauVsn42qCmYOxrpDF/m3xxYbvcuTYp37x0UL661COfP71d0rY+otJDgCAEYxLgkgKCgsnGgBw7kzHsDx8+bETcmECsbrvWbZ/jjHy+iCGyPl8l92+cl9+/zJSbaw3yzlKhEsGeibj8+LFQCQqOTS61SLEhzsjISGqNQCQrO0u3GIAoYOkIF14AQG4AIHKyJyqfPdMhd5sjMteeJ0u785VIQ0OD2uLjgSAFHjXrDwwlFg5IDju+x8bGUooYgB04Xnu/twGnDZmV7qg8dTAm/XWZSgK5GePkhAC1PbJs0XLLNjY2hvTXaR+7EJUZm5iYMCKeWw41J4Ey9BH0YQUi7y0nZKw5W4k8rIAFGRaq30sQTilnB9yRqSkj8rAcQo6AP705LX99fE7+/HBV/vhgRT650C0rvXG5Nluhwa7MVMhyd4HcuLBXfr2+KL+9u6Tl3vpskgwTY5H6biFFvAL1oAzXwPT0tBFhkC3MDiEFLCBI3L46IRdHq+TQE1ky0pQtT9Znynhzjrx6rFaDkALsXhgrkYmWHOmrzZDOijTpS2TIePi++8ZRtfM3CWpQM1HeqpCkHJ2dNSLkDxKcAdSAf//6tAyE/O+pTJPJ1oisL1SFmUdlKJBip3gAbG+9OCT99RkyvTMiV46Wy/LeqAwH4v2B+NvnetQWFSDOovfJohIx5+bmjAhGGPD+QBnAp9qjOkNAKASnfzysCc4O+pCWvjuvzUhvsE1EtiZJUhZ258mzg8XaRgUUod588jLx+WPHjEgiYQ8hZAL404u9STB38O8jQfLbLw8lx9T+8hEl4jYEIt3+7eRKggoowe7Lz7fNwO5ZWFgwIkhVVW2PYMjg5GsGEpwLLF5X4ObFfrXxtfTR82P6jS3yg+cnK+ljDFz9LRNqMsAGgQiLdnFx0YhAAGfyRfH8QYRZ4EAbQgR+/3y37hDa996al+cmbcYohD941JBJHQ2mOCUnJyKJ2lolijonlpaMiP+mgQwBqTnmaSuxkFv6uKEBgsCtS33y8/q0Ll5I4I8i9oS0k7WpqVnXHt/4kS6eAXyD5wfk8vKyEUEBGHsqqJ0YAIzVhHUEAOMQ4Vi/OlUuBzdOVuwY4z2KnwYNahCMdy7KYsM46aoJNzyqQ+zUqVMpIoAQ0NSxFxX95BAAlVdf8HbaDjVmyUDYnr3hzIAIa8NtyT9EwDRCuXqyetpJCWQhQpyVlRUjYmTsYUwBDNb80oMUQBAABDDaBO8KZwy1KWfyY8ONC47308YHMpCFKJjc9Gtra7K6umr/TeDASYcimwEgw10BCDLTb7eyvVd8bfhOcV+/p7AxLLvRIUDtPpDYIGL/j4TBLf73QOuOHdK2c6e0t7dLZ2en/vjhdwdP/r79+/Whyxtz4NAhGRoakuHhYRkdHZXx8XGZnJzUC2xmZkaP7bn5eT2sFo4fl8UTJ3R3LJ88KadPn5aVM2fk7Nmz+t/I6urqln8BTQX0eHxNdWkAAAAASUVORK5CYII=")
PNG.ExoticAmulet            := BitmapFromBase64(0,1,"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")
PNG.BonfireAmulet           := BitmapFromBase64(0,1,"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")
PNG.ProtectionAmulet        := BitmapFromBase64(0,1,"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")
PNG.Amulet:=[]
PNG.Amulet.NoAmulet                := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAIAAAAC64paAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAKCSURBVDhPPZOLTiJBEEX7MwQc5tXzHlhAFhOSXYHRERxhjdmNKw/x/7/CU1MGUuk01ffeeo4ZDIej0TiOEz8IrLVZnpdlGcVxEITYtePgVAB/e70egDwvOMGYLM94UAlwaZrhxYbDH+VgYG2EB/90OoXAXw0AXshJmvCMGML8z7I8TVMuobV9PxTzQs0L9aIoO91OkqTowjHKgQ+Ni+vDaWle+Otuhf1eVG4QfZtvEXI9DzIUo3n2+64XRNC+CcvqblmpR5wLnEtULkJOn59rJjc3Gm3dbJ+ed+2bxYNFcURupOaFoqK0TbPDBBNYA6jZ/ml2L0qjExgtIDF024rSa36OwxQ8z/NtgjXbFyhm02zhkGFoQzLROcGnjUiMRqPBUMq76nRIVVrTDqmNHBlpQQwyhUZLoYEgVUAE54nxkAKTQ1qZnAwMLXM4fcLXCbczzMAxEmhELkrZB+44L5FVlC4YP4z3xzMnEhjPqkIyMs+yJBdK1XQkeS9wPOZviWrQoJn748fhdMa0zxg4jfNzNgPjuAGTx/9+APl5/JB8Zc5UxVYo5/1w+n84ve2PRAAt/nZyKr0/neEE0nBZfomMPDcuNIwIQvNDVDDKUZoWhY0nE/C0rdvtSmQ4euKlPBWiFmmEmo3n8zkA/LQD/uz2luU3oJHB4HPSYRahrcVCq+o1J3J8P5qjPuFhBQzTo2ZoGp8L87kw2UROalaMAlAhBkJSM7T2Qb5EJoQqk1hWdb1pXv++PW6a6mFNFTBJlYCg2shj/aoiUsWFPMZgadhi9VCvn5SMEMHbclIAbI5GMpoANzLDRWSeGdJidV+vm9d/kJ+X9zUDo0ACFqUsH+A8L74AQqzLwYgYH1UAAAAASUVORK5CYII=")
PNG.Amulet.ElvenAmulet             := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAIgSURBVDhPrVPfS1NhGD7TUpfLQ+CwKJFAVJB5TDQQjdEPRSbT/AVzbs3lLwSRYNFNEUTCjFoZRkZ6FUQXGtXAHwhL0P4Hb7zftffC4/e+MjvnO98OXnjg2dn3PM/78H4v79HEg8m+Zux+HcPvd2E8jbSBuFJ3ETyXivj/VH8LVl48xJ9UGKFOH/Pi0VTQKGzny2PEg024UubmAJtJcO7iCxy2tRjD8vNeVFboNh9B626vQfr9CHckizIouLaqHN9fD+JjIqCs0e4238T2pxiulV+2iSpQqFFzlWsSYjwuF9EmXfeU4NfbYTzqbiS3RcwH8vX667CzFLfVsBgP3sKPuSHHYcuguvUPEcSkRk7FzOdRBO/UWUQnkC/1pAtz0w/UgTQPmkurr/JMoeRZTYYQDSg6zBloB9cXIhi4V4/CAtepSQXyb4sVMocxbzmIY7irAf+WJ/idL5T4Z9F2rL0JQfcUC+q/ZjEyIahA28lu0sBpoWWdbrC3Mk4Hi8a6TDApaJrlxkIUyZlOLszhdv0N/BXrQp+j6gaWgxm5gG+vBrA2H+Ig+tzomvMzHXm/LBshg0KTIiAjukqnRjjsurdMSHn8KlIGdRMNGGLn7sNXXcGdy54clKQKmuYVP4OOYQQlqYKut8Iwfp5PIIVcrE5Bn6XAl46hStIMKtb1Tfins/BnsqLLfcdQG2EGFRk9m/AuZpA4OEL68IhDqVP19aEdA3i03wb8XmFCAAAAAElFTkSuQmCC")
PNG.Amulet.FoxtailAmulet           := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAADsSURBVDhPxZOxDcIwEEWzAw1UUCBoIiQaelqExASpmICSTViEnm0yhrlvx/Y5js8XGpCeffZ9PxxBGmNMBn0wZIxzU+QbtHXYL013Oyb051YlTReDDHMNfo4TCyohq90EPSkTCyrxaKUgR8rG4p9CUMqHpvZX9CArCufcDpTOiE0JZKeeKjS1QmSkfAhphD4nZd1Ak/hnpX2eKeWAG2jy38rhPc0TADcMh/x7fNks7Az4u80PlogFE7yuayv1Mp/RkG/Q1rvbhluO+zWSBSS4Xf9srZD3tCQLSCCD9HPf/SRNFhA8TqsgnS80zRc4q88C5ZGi1AAAAABJRU5ErkJggg==")
PNG.Amulet.GarlicNecklace          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAKCSURBVDhPjZNrSFNhGMePFZm1HIFhURJBmDCmKRaFShglMhnStJi6uSZdSFS8JUEQVKM5zFoXNDD6EEYf1GLSagw3rW0YJaFU0oWgq1BfI7t8+fc+r5zTzmWtA/8znv/zf35735f3CIf3FmL8agOc5gKsSk+DIAhgD70kkZeWugTWMiMClx0YOFGJrEy9KkcSKoqzMXq+DivSlrJaHYgXgTdvyMDNM9W42GHSnBFKCzcieMWBtRkrVU0tETQvew2f6bAVISWF7Li+XrcMd3pqUF+xhdKyZiJRrnJnDsb7naoZ3nSa83HLtQ+65cm3LYrm/BdscCgWIjVDfQdgLsmRNf8lyvW2lsN1dLc2kM6DzmWHMeu/oJQZclthN2msUAx0Mqjfa0PVLgMWL0qRQlqifJBdoXgY92UFK2vLcxEdOMR/E0HJ77IXY9hjhV6Xyqy/PVmQG8wyFS3cTTpwutDKPu0gcu0gFbIe7ysNbjKbzvKe1w53UxkfFLXNsB5hdl2OWLZq7kBWxEsE3DhVheFuKwfR50bb7G7ak/DLUhlKEdTNACG2qtHeOg5btzqdtRLktUylCGo35XGYcVMmX7kyI0rTFEWDoghEwM6GcjQ3NUo+STYTX8SLgvW1FrS3NqK9rQUGg4EDa6zVeBIJ4OVUGLGgD/2XzsmgMohkMrvH48KYfwjPn07i9fQETh5vQUF+LvZbTIj4B/F7bhL49Q74/hGe010SVAXjJrMDfh8+zMYw//4BMBfCoLcNpSXbcazZiZlHYcy/GgG+TQM/ZuG7fjY5UDkU9fXhceQ+XkxNIBS8q/qzpEDZtn5+xtuZMXz99Ab48hDPYiOIBm/LjmMBCOEPXHryns2MEpkAAAAASUVORK5CYII=")
PNG.Amulet.GlacierAmulet           := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAHISURBVDhPnZO9S8NQFMU7SaBFcBM6pdAhflAqtVhBg0ICIu1SJC0oxaF1EMGls+AiBf+FLE6itKiIkDnQpVNEqhRKoTi5uQpyzb3lPV5MNG0Lh9x73j2/vDR5EQDgcn8wGAywcNtRH3YtFApYUE8eL9yy3+97FscRzpdKJZ7zLYr9uBJzHrPdbmPBF8cRzvt2iM00MCbM6bpOeY/J6mnE8rwxTZPugP2kwhx72x6T1dOI5XlTPn2hO2A/qTCXUu8ozw3j5Bm63e7EUJy3bRuUtRsvsNPp0C6Hw+FoIQTMZhzHod2xT4cv4mezd+zQ3XCo1+uNBv4Qniqcq9frsLzRCn4pzWYT9LINlmXRjvGKoUqlApqmQTKZJA/nGo0GwRZyt57z7AHWajUKZLRH2ikGi8UifHx+w+v7F6waFwStVqsEW9l+oKuqqn4ggxqGQaDU1j39Nwi8enqDGeUA5B0TZFmGxfVryO1aBGYnhDNYwQ3XyufzNIyPlc1mYf/MAmnpkIDxeJy8IBjlxYabAhQBc5kjmN+8hNnMOUSjUUgkEoEwyv42mERoLBYDSZJI/8FQPkMUg6bTaVAUJRSGCjRFMSg+ahgMACI/6KbW8MiARcsAAAAASUVORK5CYII=")
PNG.Amulet.LightningPendant        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFBSURBVDhP5ZQxS8NAFMffVPwKzhEc4lICwcEszaJQp4CIXRyyqGumVjCrU1ehXdxLwUHcgt37AZwU/CLn/Z++4+56Cok4Wfjx0ve/+3G5S0JbvZ56enxQqLP5PVf9475UGz87G424X1UVV3p9e98Y2AZ7blEU3STfAVcw+A3/cYVy7H7YFjiuLi/+4JTlofbDtsCR5/nnhf2GdEFkqKZRT2+DUvRsQnmWZSZzAv+AcN00jarrWo3HE950P7dlwAgBApGCl/ValWWpDnYzRr+rNMgPeRyI49iRAUcIMGC1euYtwN5CpD8gpCudRKeUJAlFURSUAeePICtYLBcsujm+M0J9iyb354GNhoAJeoUsOt+f0nAndYT+eCHYBF9CBRGEkIGjtI8sOAcEm8AWimy+fU17g7T7CvVjYmQi/PmWFX0AH//QvFL7hYkAAAAASUVORK5CYII=")
PNG.Amulet.MagmaAmulet             := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAHrSURBVDhP1ZFNKERRFMenmDEzZt4wmhiDIt+GJEbmIzEyWYgZLOwoKxsrZeErkYWSsEBSdrJQdrLHwsLKVtlOWdiQ1d89Z9zb83qhYePW/95zz/m/3z33PguAP5MYmclYyEbE2ZkMmBezFUFNC7+RaTJb/ZMOaTIWjPqpJ1zsMy/qRcbjvU0KxNbcI0UenowFKaod7W2hqiLA+s4bLREdXq42KSOtem2sLqAvGuLY48pnGT3yu06fgGVyFkgo6XBnHamBHkxPjKrc69OFigna3tLAHpmLB4p4Zbg84XS6hJN649vTOdJ3M7jeDuJi3o+VPruqyW4T5V5eiaOAEkqSnb2kzzEcjaHe5UGdUKO7EEGhkY5SruuvLxnMUYEI15bn2fD8sIshAaORjHWjTStCSPOiSytExOFEpL6SfWY/SsHWl2b5bRj4eMJdjcV6GNTh0tDt9iDpcrMSNcXsoy6NUBr8N2Xh8WoO6fsDBlJnXQJAsCG7A+NOJ0bFPl7tRzjgZ7/NakVFaeYABn5Q+TT5Ljf7KTSL96Luej1eDGoahh0Z4JQ1B6HyMvbZbTZYc3MVTAH1UFpvzxbR6i5AuMDHwKQAEmzGlsNKNNeyj7rTw5jzaSO28uojQR8iAhoXVxx35HFnBOv/AgbA8g4WpYYiXPtxWAAAAABJRU5ErkJggg==")
PNG.Amulet.CollarBluePlasma        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFTSURBVDhPrZQxTgMxEEXdUCBFVFwjRZSSLhdBoqVHuUIKjsANkLgLaREV2hPQm3k/+y2v16tEIiv9tT0z/+1s7E3KOc8UF7eYznPI+V5Nmdxtn2M4Ff++r3P+eusbiEXu+HqvurZGN2D7j5wZrXNQ8rv1jWonOW4ENy/fgiLmxKILmScG1vEggPYxGizY588J5EQoPT3c5sPjagaUKWK8cuRV72aYJ2AGNSZddawWKWQgI9ACbA2XqgaiVP9mbfGlqr3pv7BW6vBaQL3yNbs7C/ROLq17WvwNZRwPsEHMOX9L0NLhCC0JmwH6u0V+AAe6hcLhCDJxlwoyGugvwWKN2i6d18E2bBgGDnnZ9bqoPqsWQM+BOq8Ow+AnlY4NQryK5RjmGFVrIKPajYVABBCxMV6bJ106bo99ArUJVL8S/zyee0N6HjQLWJjYGGBWb0OmyukP0wTXa2YrNr8AAAAASUVORK5CYII=")
PNG.Amulet.CollarGreenPlasma       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFRSURBVDhPrZQxTsQwEEXdUCAhKq6xBTUd4h5ItFyAK1DQ0nEDzsEBoEWUqSjph3mffMtxHO1KbKQf2zPzXyZrZ0tErJQXt5yuc8j5UU2dnN/f5PBX/PO6i/h8GRuIZe7j6UJ1fY1uwB7iLRitfVDy17sT1S5y3Ahefj0LipgTyy5kXhhY54MA2sdosGDv8d13WO6uTuPx9mwFlCljvHLmVe9mmBdgBnUmXW2sFSlkICPQCuwNh6oFotL+Zn3xoWq95b+wXurwWEC98jG72wv0Tm6tR9r8DWWcD7BBzDl/W9Da4QytCZsB+rtFfgAHuofC4QgycZcKMhroL8FijfoundfBNmyaJg553fW2qD2rFkDPgTqvDtPgJ9WODUK8iuUY5hxVayCj2s2FQAQQsTnemhddOm6PfQL1CdS+Ev88nntDRh60CliY2Bhg1mhDloryC/4l4UIYgHvMAAAAAElFTkSuQmCC")
PNG.Amulet.CollarRedPlasma         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFVSURBVDhPrZQxTsQwEEXdUCAhKq6xBQUVHRdBouUC7BEoOAI3oOEq0CI6cgJ6M+/H33IcR7sSG+nH9sz8l8na2ZRzXikubjFd55Dzo5o6eby8iWEu/n3b5fz1OjYQi9zny5Xq+hrdBHt6z4zWISj5u92Zahc5bgS/r/eCIubEoguZFwbW8SCA9jEaPHf38dN3mB5uz/Pz/cUKKFPEeOXIq97NME/ADOpMutpYK1LIQPkDWoG94Vi1QJTa36wvPlatN/0X1ksdngqoVz5ldweB3smt9Uibv6GM5QAbxJzztwWtHRZoTdgM0N8t8gM40D1UTcURZOIuFWQ00F+CxRr1XTqvg23YNE0c8rrrbVF7Vi2AtSagzqvDMPhJtWODJL51q8QECp9qC5BR7cZiBkcAESvx1rzossaLxz6B+gRqX4l/Hs+9ISMPWgUsTGwMMGu0IUvl9Afsidh12uPS4QAAAABJRU5ErkJggg==")
PNG.Amulet.Scarf                   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAIySURBVDhPrZJNaxNRFIZPEbQVLbE3VKyTBDeCXxCFUlvNpmoUtTSoYCt0ESlVq3biwoV0oRW1qfUj4la6EURpG+PSVU3Nb/C/CIHXc05yJpM2fnfxkrkz533y3DtDAMg5h2uuH+5QHsPuNOekXmfcCYy4NCajQ5CZcKRnXcmL6ChS+7K1G4UDOQV2H3y8rmgxQKvYjAKLvTMKU8PfFH8V6Y6n34A+Dz7/b5hE+t+GFkAbZeeS86gceQRaST7cGGAGGlo5PINTLvnPQOktx6fUToE0VVUgkTxvXfpZpEOjVdBEVaGfEnf4Ji9qFzLTutgqMl8+mkfl2DOFCkM5q/3z+FtLmfvSO4tSPKdmEkpVUUrkQF8HGFi3/BOoPKeXjW1KlmK3sRxjqDw7t8cPdFWZbfXBGrDd+yhWUpazY6t3PTc414N5HaywZQCs2xZjvg5JvI4oyn1zaiY273dPNm21fed4A2j/HoYFcAbIoa8OPEUx7mORYWZmwIXuqwGsCbg/Ma2HbDAB2RsscnHR43OqQ8zsddcVtFHbeqBBJWEzeWG6dS6HrSSXaK+mk9q1Z9AmWLmv9l01zHwsebcCI4MabHrLGe5lMdd5ETGKKENhY95gYCURS/2m1ljJ2kD3NqdBXa/wYOt55Ldf0O1Tz11Q2Egi1yUGGmTT8e/44N3E210TCvMppb8Cu99xFrPbMijsGNG1ApteQGhbEvlE7Dgshchl/s0q7InAIgzjtQCHXRo/AB6bhIYy96kPAAAAAElFTkSuQmCC")
PNG.Amulet.TerraAmulet             := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAINSURBVDhPrZLNS9twGMf1sotC2IvD0lIXV5OqrW4uKbRdRaQuGHSrbA3iBDtaEecb6LToyhgW9gqODWGiiJ66yQ7zoHjZLh48ePMP8LLLDjsJKjs4vsvv1yVNtJ1VGviQ5/k+z/MhhxQB0FEfHPx4QQq1TffaLBtkTtj53EHfFOPwaH+dhlqWL1SksvXBlQmO9jfOJTNC7jNFAWQzj+zp4s/vrYII/1GYrxsNVaaFhz9nCyLUHLTRBueB3Mekqoxwb3dKb84KuetrYU33NDQG+UJuApztxC0d/NqW6eD4MBdkr81lybqvLxB2126blrT8eObn6f+mZ0bMjdqmIsV0mbDyMorFZ12YHurUMw3jnZGTgRp9nY3jU7IH70buIxGT8ar3DuIxBa1e4b8ygqlhSi5gY34SX948xnhfBL6giP6HIQyHWyD5PWiSfPC5a/L7QiJbnUsgNd2DhZnnkO4G4Nzk0Kp40X7Pg2rBCWblCgT+GlibNadUL4jwe+otPsY7EXrdQWWNUQmRZh+Cghv+Cjt4zg6P3YY6S/npQkLZxVIsJ2MYeirDPXcDkYku9DeKCPMOyE4HqjkVgYernkVtDqm5Udv3g2HEu4PoHVMwocgYEOug1Djh5a6Da6gC8+0qRKsFNy9fyk+4lBzHyAMZ0eYABvwinngaUM9WgLvFU5lVYFFZy4JlmCxCFP0FHNDGUTv6e2YAAAAASUVORK5CYII=")
PNG.Amulet.DragonNecklace          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAH8SURBVDhPjZLNK4RRFMZn0PjOhlAjDZKSr0IJidAYoUgNZgxFUhaKWKvRkHwUUSiysaCUYqGw8JGdbPwJ/gHK8rjPMff13jvvjJnp6X3P85zz69w7Y2utddHNToDyszNJfGz/SXyoqjSPZ+Z8jWS3wzblWRkpdLE2RKPd1ehWwmhCX19LGd3vjUfMcDjeU0OnwUHKSHMoYSxh7mrTRwFtESO83R2jnuYyJYwl9K3Puik43W4NxH3gXhoqCuKCoucs5CW/x2JD2TAvoFdbPhpoK6fEBLvRZCX032wHFBj7SiHKYXclPR5M8jMaFP6Cv4nOV71kS4b1lxkvhiEsT2MpXW6M8IWnJicJW81xgofDCRRKxrlusCls3OX1lp9CM508KFVf7qQ78XeZ6q/jOmJWN6Qk4GRpgM5XvAwqyM3iY67MdFjCoAhDFwZDAnArtrpcH4kJgyxNKQxKYUNIwtjXfhD2dUMKAw/BHBYGUfs9VfxEbc6UOXNhmGEYvbhosdfBqiuy83HxRG3OzVAFxIYG+xRfQMxA5L5vL+f0sc+ehEYHhhuf6YmhAFSU5HINFb8Xcv4vkE3YX2+8gfM4z4AAnNLlYBUuO383FCeJDygaAZVbYkMJBIy3i+cO2RQ2Hzu8JWA4IsDm7V6P0pXteFa+6NK3NANRA6ZvR0S2H91DwYV+C89ZAAAAAElFTkSuQmCC")
PNG.Amulet.BronzeNecklace          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADeSURBVDhPrZTRDcIwDEQzAauyDgvwyySoKxlf6Km2a6eJVKSHksv54pCIJiIp+sGXbO8m3+0hr6eOP3+gRz/JRZURwmILNhiFngUUoRMtzIq4nq0BP9Gp7cyukSvPMdBhP07RmYVeBEevM2WGCviyzb1hcNRI5XcGPI1oqIDv9g6zBpxh5kIIfJeXMtshvbd0iPX+DgvvMUCg7lo9HWj0jC7PT3TKPwEGkK7vXQFbZzkLppjd9CPum0R/JBdVBjZoJgykIlkJIqkIELRyVJKLJoy/42xoKgIErIaJSPsBZE30XNn0LW4AAAAASUVORK5CYII=")
PNG.Amulet.GillNecklace            := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAE0SURBVDhPrZAhTkRBEERHkWBReByOI5AgEZwIEq6ARazdE3ACEgQIEg6Aw3KD4b9aalLb+wmbD+Ltn+6urq2Z1nv/V2abf2G+ObWTub57lc1PCOHy/EycnhyrHuKYZT+R6OP9VTw/PvT7u9thNLdEj/lPmsagJqqiCnP+mAAESX3LZL8ZJWhtbFPhhBR1aR/YY9/BGsWShIAeIyCYPFz4HZeYOpT2MXPcJe/IHvuY7STc1wwdYOBdvR99J8x0XrBBhRl6jBzI+0qYQ5r+t2oEnlufX5nWpk2rkWGGxjdjZ1wXXOBuEV96NjCu0VpXbyOBhQz9FjZ9Wx2J9fWhahLZaFzz20M+4zAdc8gXo/5yITjfXB1onlqwh/a2ihDoi9nn04bp7JRjHrtmp5GwBJmsarbp7Qs0ntFAXskekgAAAABJRU5ErkJggg==")
PNG.Amulet.LeviathansAmulet        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIFSURBVDhPrZJPSBRRHMffzLyZtag97G4LlbUi5oKoqGws2h8QK8MiJETRS0iI+OcUVKx4UNCLQQejgrp0SBC6VkgQIXSQrkmGpyzCkCAIRbZFv73fm91xx7c7s0SHz8z8vu/3++ybt8MAOBh1U1jZ3gGvGBblXu6HVTEAM7UkcULj1Dh+ZXZhVg6J0j1QCrxhFiu//+wFRu19jH/Zgl49KUp3sx9m/T082UjDap6wA352HmPfMjBuvBalOuAH7Y6/WoNePpINzr0AW05DTzwTpTrgB7/4FvqnLWjhnmxw+pEtjE+LUh3wwmxbgLa6jUAyBSPSaYf8zHNoS5sInOgTpTpUDCb6zXcbKOt4CB5qF5HI6GI1PwVfWMeBY1dkWAqsvBvWm+/QY3ehh7pElM3pEojfhjW/CjN6zVnwgh2/LnemHVE/MeeBXrfUV6Y+LdwvHtU1p8GKtEq8pLQz6tFCHj10Icnch68IPl50hCySkPd8SEZ92uGryloOKaPzoHu4ZVRK9YONcjAnNaOd9s6EiJDnV0SqnB39MUYwaf9I9LwU8aOXnHUiJ87PcigBCQ7F2mDW3JI7pHp/jxcFQ5KQrNA5+lE4jF0Aa5z5P0JW2wt25yP09z//SeouSPbyBz6ndxF9kEFyZB2saREsVLpUDaq6hKQfrP0mtPgg2MnLInb3FAfsL945HgVivL+uAAAAAElFTkSuQmCC")
PNG.Amulet.LionAmulet              := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFuSURBVDhPtZK9SkNBEEbT2duorYgopLiCaWwEEUWxCQqxkVRRLOxFtAjY5B2sVDRvINilEdJb+wRWvsCYM/Fb9u5dIkgMfMz/YeZma2ZWG/2sd9m1i5OOFct1FzmJnt8kRnBSUDowSTEjDUb1/NAklRg4nPpXGPoXIAxYUwPubW6LM153WlB3gEkplDhVXI/ldTkCNuprpeHP4a2995tBj70i1GKYOKUgBn59vLg6Bwuu1u5q8IEKHM/7yUooiWIQW2Gfuo2SRfG2PBl/NimME2ke9k/taGcuCyMvP4WWgPG3yoFkr8/H58f9glaANL7e7btlW3wBsMTo5mwj9AvonBQmMQQQDe6bDsMKiNQb/0kVIBZx3vrijANpBoYlJk9d4gVUgCQo8sHfno9t8HDog0jbYZWjjliCuSxQJ9AAFAHR2eH0Hxh99F+1V/JAbSkoygFVK5Zm3Wo2AAVFauB0hN/amvczsWmNfs2aWe0b9d2KZjLq6IcAAAAASUVORK5CYII=")
PNG.Amulet.NecklaceOfTheDeep       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAACpSURBVDhPrZTBDYAgEAQpiPaswRKMDfi3FX++LAVZk9ULWUU9SAZwOM7TiCG3lBu6JoRxmnOPuQ74AvK0r1BJD1J6kNKDlB6k9CClByn/cnyHauEPSBZj1IsEQaUD9Hbs+gETvcjRBJ0O8LjaY3uOvOBmFXQ3t45ck6eg7HjDcq1EyhIkevtXktKCJKiuacJl3Q7eJJWSYDOqI0hae5dSEmxEVayw/ugp7EPhUnnDuGhpAAAAAElFTkSuQmCC")
PNG.Amulet.PlatinumAmulet          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAADqSURBVDhPrZTZDYNADETpmYb4ooyIAqiCRhzeRhNtzJhDSqSXXezx4D2SISJK9g9fMU0R6xrfcVkixvEV2/aJMYemd0ZAUkUyrtBLmrYy482ImOd8Bo1qbLLvLOcr0LYGysQDM0GNDWqDc+6K0rDtxT8Nn+6fKA3nuU32x2O+An3bKpfgUJ4sGx3YayMBy75z2uQvLzZIeGZIjq6kazghkESopTvcKn5MMirCmA3XiIkOrjdrNf2DQ0Xqpl9e1sIh4KAYI3VYmYEN9siMUZxdqUPAQbFMNWaNsEEHJnf+NGwwg4k6O/8FxfAG7ngqulc5KBYAAAAASUVORK5CYII=")
PNG.Amulet.PrismaticNecklace       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEYSURBVDhPrZKtDsIwFIW7LJhtCUEgcTwAwfAW0zzBHgIMAo/GofAIngFDwPAOOBxBXno6ztY1hewH8UHv7emXC60Skb/ibXYh/9BfLnaIuBniZJRck8SQTZW8jmM5byJfUOR+MPvIIb+NYwP2mFfYYMOGIhs3QyBdhCFr/+EmfES51BdoixH7NprA6UAaBGXDDX6DecLLKf5D3rAdsg+6EhyE4Me5vMBTsJ9FbzaX4epUPCXsYc08gcSmXOgl3h8O9bOdBIORTPbPQup7mz6qhS4pgfD2EFlfzEYtGagWuqSEE2LaujJQLXQJSZQujRCTYt1JSAmEmK6zEBLcMIT47izkdLa0tdA0dIs/t6kM+Ju63eZCRES9AYDxxEl/BTfQAAAAAElFTkSuQmCC")
PNG.Amulet.RainbowNecklace         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAEFSURBVDhPrdE/DgFBFMfx0YlGNFSiUQoRN6ARjVKrUIgruIEoFRKNlkThAmoHkIhSoXYAkcfvrbfejLWxa4svO/8+BoaIPiqmStTv1Gk2bHIYS3rOPYc+JgTTiLuu9+g1ZA2wIezTdd9Qa8OvGAoFo2JSEOovRMVQIBgXkxIHcVb/XOa2bv8FIn0pHshCnHBeX+pvEGkjkRuusybZr2yBI1OJ/afg3DQzp0k6/wahx0UFRBZ46npFQQXbtw42KNhl7IWFMFjWBQsEBbtta/x+3BR82M30lk91wQHSGIMYuNj9XOXwnFulOEaAPWsMdj6qMQbxgkkBBdNg+Zr10BcoqIsRkXkA7jnrBB7fVrgAAAAASUVORK5CYII=")
PNG.Amulet.SacredTreeAmulet        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAALkSURBVDhPlVRbSJNhGP7Y5ua/tbPbnKdwU+fcPGPqNpMmGiVWZggFFYWVkYUU0Y1BRXfdeFFgN11EEXQTXZURBFEkhhcRHUii2+i6un36n/fnX3MGmvC47/B8z/e8h/9T8cdjqF3ah5qVceQmo7h1QGH+aAvGIkqg//FfAVybbFVYmcuivl5Bm4oi/CKP6NtR0VGOTACBB53wPeuCc7YO7U0K2wLrhUqRqFDYHlZw9jthHw/K+a0v9xqbZWk3iLjPIP3LWSkoSOwZUrCmXAJ3vnYtaTilsHBoc4IEL89lFMr6fAKuKedgFAQnZm42K0ge+RL66ZjoKNpkYfg70755QXKI6U6bnAksZVHxPANVngvB86Yb4Yd9Uulj6c2FTA65369lRJDuqCGbttEgnAuNIszC/I/Di3mjK7SukBGySajxGj1FQXNtI1Dw9uE4IkmPCNrbvJCi8AYm9ulMHEcGjXHp4VKYDncnlfQfc8hKSw/SHXtqda4LN/QvZSPBREjP31AAx/WWoZnwzX743+XgXkxDWeOazjGI0zmFr5e70KkfMNc4Lp53665+XM9iVy6C5kbDJTskvDwM1+tWKMZukunsyrjh0BSaV71YVnWF+berekX77LAkNbhONRSiYeokZFOMt4Tej6DyfExIbAUK/LpwCT+VJmN+RfyarAe9cD5JwHWvCbZez5oUFcQqVyfg/TwgDwXzObXTcPRb2XFHpWV8Ui8Yc1Y+WwXnx7aCYNqvF8atr+s9LYKeE0kRrF4cAV8frlE02liGgWAZskEbGjoc8gCYOdO+tEF71Qxrj1v4RODRjr/hEsyDuWmpccATcyCUc6M6vwV+PT+WVLnsk8vnikWgQ/MM6yGDYtAhYevxoWIqJc55ULsbg6XFAUdHQJrYf65VQjQjItYJ8mY2aOh1viBY9WG/FMB+NiJVdJ9JSN8Vd0cx1kwoGPk0Jq8Gb+eaPB73U4XQnBN1cgm5nK8F1B/ug0eVLqlOLQAAAABJRU5ErkJggg==")
PNG.Amulet.StoneSkinAmulet         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJKSURBVDhPlVPva1JhGL1WtKzbJFisqBFBrMGwVawgNCKrIU4ZNQNr3pzRD0LRYKKIX4wGdxGrRWLJ+hREHxoGg4UO1sD8UxRE1H/h9D7vuLf7y2rC8d7nnPMcnvflucKT25PY/vgQ0cBFHBm0QxAEsB/9qSDOPrAPoSknKu8jWM3NYGTYYfIRhGn3KNbfzOGQfT+rzQYtKPjsqSF8eRnEuwWfZY9wffI0NgsRHB86bBKtQKETo8d4z0LYBZuNaI3uEA/g++t7eDB9ntw6sR/IN3NtDNsfoqYeLkYDF/B18S7Eg/8+tgLq23gbRsQwiCpuFecRuDqmE/8G8i0/92Lx2U3rQLoPupcrzpH/CiXPNzkEyWcxoWJIsdCNlTBmPePYu8emmqxA/k22QtowzusKVt73nkN99TF/9gslPi25sfYqBIc4wKg/ms7ICUb5XDu7SRdOC23U6QS/Pj2iQqdx3UhwktF0lz9WJMjxKd6o4PL4Sfxk6/L0ziXLE+gKLZSAzy9msbYU4kH0udExl+K3+n5ZJsIICpVZwBaban15joedODrIpD5+K9IImkbyTbCduwHnmWE+udGjwJLUgppdLhdkWUapVEI+n4fH4+kbaiK0EEURuVwO9Xod3W4XnU4HjUYDlUoFqVTKMlRXaEFmv9+PRCLBA3q9HtrtNprNJq+J93q9plD1xQgyxuNx1Go1NaTVaqFarfKa+HQ6vbvAYrEIt9vNQRNlMhn+VLhCobC7wGQyCUmSeHM2m0W5XFYDg8EgYrGYIRDCbzEz6IzoLpSRAAAAAElFTkSuQmCC")
PNG.Amulet.EnchantedTheurgicAmulet := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFqSURBVDhPrZFbSsNQFEVDZ+ADBAfhAx/FCWiqSYYQU6p+qFT88EFRoRGqP9bHv0gV/BBRHID+6CQcjBzvvuk53JumtbUNLHLuPntv2lyHiAT10NfdOQbB3LPnNFyi7cIUvdX3WjyWMQ5d2lJG1toBL3i93KfN5WmrVAwvamkuugF+EIcFycriJFoRsReQebo+pI/Ghc5rYcOb+VcZg+xx5CWF7/f1vsoA8vyjnKPIH0gh/rYuXPdmB1L4eFNJCp+vDpKhj1JkK8WAexyKgjytKpqC8mQHs+AM5yxx7HtcFt0C/+7DouSsBdhxJ2T5F5xhtJY2lHss5NsVjQcRlLTmJzdvGk14V3YnWzwyWKKS231PaCD/uZC9TwtabIaKwbwVwlzy5zTs4Z140oIJF3C4UxGTKZrogjhHQ7cjHYsY+4Bw8uhwbjQpqv2cWaUGVl53WAd1rNaqugiXwoVguKTKVClreMNr5onI+QXXnL0tM2rS0gAAAABJRU5ErkJggg==")
PNG.Amulet.EnchantedPendulet       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAEVSURBVDhPrZKxccJAEEXVBi0QuwZacIAjl0BOxDimAirwuAknasKpEwICUoZZ7zv4pz0hwDeSZr7u797tY29F4499vM+NFfnDK6uf07mYx2eGEvuvN2u3i+JgjahLUAUAWT/XL6Og2Qio1uPBGl1evqizSYDJTABDnXE7Zn5SZ9zylTVL5WvVGbfqcAy0DDzUHOP1WeWf6TbhKaAAZ6/LrP/86dkvEhGAdseTtSezw9luoKk4/AA+jUqJVODFErDVd5vhFGgM8jHO+xG2+fnNHSE8exrBEEixZl/A6EogvHLqUFdDADLkqrQ/BCPmuggPkMNREVLk1c0QDKnDfuE9NY9g6rwKCIyiKWAodTgEo+NamJk1f48jIPGW1t/wAAAAAElFTkSuQmCC")
PNG.Amulet.KosheisAncientAmulet    := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAJ/SURBVDhPrZNNb1JBFIaJNa0SLNLSC2KBlls+W2jlIlA+KgkQkpaW2KZNrDVRFyXWmNTEhVEXujLduXGha135F9y6cOFvOt73vc54S9kpycvMnI/nnjkz4xGR/6qxxnGyf/ijRn1uXTS4Et2q5Gbk2Z5JYT2ap3R+YS8bldvy9NEDraO9AdVvtyjENNcMjuPAGgSdvX1DCKDKlghek/3avHTSNyQZ8stWISZnA4vqZiI6TgOxwJcB2+51dcCwY8q3F1UmntzJEuTzXaEwd4MPigsait8F2FZpkbDXd5cJwIi1gmL+61NTwwFtpOecfGwPQCxyySVW+3InK4PKPBNq+SB11FpgImDtYkiykQClPoAcAtEzVR1ggCKgljVYxXA7Tl/U8Mr6yqwsRadlxj9FG3qIj6RsMHJMu98eVV14Liidxjp7h+oAgz1yLy+Tdr8xBxAVYQ4bfJgDurESkue9jANEhbmkSShK763dJNB9isf9GKv0TV1m35RdVdm2wvJupyAea7Vw7lAAbNlBDzfjumff39d1xRCqhA862ciIEfDJQSsqh6UE/B6pWrf0waAPCIwbfiZCgAGsgNWEwauk/KvxIP3H9ZQDxFbdF/rz47JOwJaslJ8fwbZxwbHlyHUvfYjZLS7S33dagevivE9AMZ52M4Qi+EnTbrRt28xHWSkSl6OztMGHGNiGjTRttpzrghFAXJuq6WwBlXw5LcvExCUmugUbfOpil2LBv0BUqKBqxBtG4M+PTYn4vWzB11eW3C+bUk+GafvxocEYxCKHT+/P+9NQVIi1EvqkThrC/NCGAuS+VuBooIKOOt32gHdSwtNXKczHxTJ+1PBvEs9v/lfxX3ZDjXYAAAAASUVORK5CYII=")
PNG.Amulet.ShockwaveAmulet         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAALnSURBVDhPnZRLSFRRGMcvzJ0xI1+jMzrqYnxlmlhZkiRJmYTZlJGLzDEnNR89wEVWltZCU8iSrIVJLSJcJYQPSPOVTqUgOVAGBVHmtFAiU2wSBw3+ne/ovY5moS5+fO//nHO+ywgAhPuuQbjjokepJgDWfddxRtSiRKmT6fGP4pxneeonipQ+sDcMoj84HvW6zfheUIdUUT1XvKr0xfiDTgwZSvFlVxFyRY08SOQpPEEUOggSNFfhocdEWTOOMzHK8cIF0RsfE4uRonBHPhM7p/TmxZWQxoQ+7S0GWYp58iITfBedimSFG0+uFKPoicaASFSq9SCf4IVLTPB1eCwSFa4s/HvwXxhFL3w+UIKO0GiYg3YyQS8I11R+eKQOxkBUAvavQvCE0gs/alpANll0R7tuG/eFsap69MbEoW97LOIUG1jv8gKO0OBUk4ULSHGHb9Sc4JPASHZVN3Y6F+xhSEP/I0OlASH5DdpwORbK2LdHzloxiG5o9gxD+vxphXJtIJLYGxwUPXhiNaQo1XixKQYtoXRdDUd4tWM33iQYYFij4GB8EiYbezD1fAAmdm2BNvQ26TAOzX+YqyHLyRtE59YY/J6wcV84qdJiMDkFVf4bQf4pJx+ZpQLLQX2zY+Nyv5Cl8sZwcSnatkTD1trDmba8R84SQYqXy9mHrIvywi3/EFhLy2FrN/PVV/gEwvbMjJx1Ot5Elvh2uVLOSVA8UvcQx1RzGyaEkYIryGRXPTK/dnpYW2sX8px9OTOWD5hu7eVQLA2SP9nWhVQmdlcfJteE0cIS9ssLRzY5afCrrRuYmcXk4wbks0YJ+8sB2f/Z3c3n0lj/16x8TJn7kElLyWVJQhK8yZYzUn0DuR461rzw/8cF++YEx582cUv5dCY4bMyANSMT2SQoDRCnnf1QExwBsiRG1rFm77dgtLZ6UZ6gZzKx/my2HDl5dj1rYtccq74NIytKce1RE/fvhURwy/MOYouB8AdC09OYWUS9IQAAAABJRU5ErkJggg==")
PNG.ShockwaveAmulet1               := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAALkSURBVDhPnZJrSJNRGMdfaJs5KfCyeUnL21LTD0lmdqPoMmszR063qekHM+tzkVJYULokCHMQIVYkGCGaEOSISMmlhZYiZFZL7IKVkKWTZoYF/85z5H3Z1ML68HvP8zzn///znsMRAAh34jajMWYDajem4XPDFZT7aWBbnigxkJnNOafUMDm458KyeMy8eg1ncQk6tXsxec+Ow8qVs5s1zPSttxujDbUYvWTDcb9oyUiULV0FwqqM9ZqTry5pPdwPOlDCwmjGNyqZcOSqDYU+oShVRuGkn7fxb1DQx8u2+YHDR4/Bogjhw8VySBkBR3o66uKSQTXBNyp8YzBotCBToWLtfOOfKPaNwIeLNejOMKBPawT1QpXfarREpuB5XgH0iiCmW9g8l4O+4XDd7wCtOT7BeJSk5bUwftuO3nwT+oxG7JD7M+3CAZ6QcbpngAeIfVfi7tnA1nVboJcHYY8sADtliwssYkZCrO2RaVIvWMPX8OJ/2ScPRGtoCn8h1AuVKxKgY0P6S1G0WLIUajxM3gX72q0oUIRyBMcmLfoyTNDJ/j1wv1yFfl0OJu92wd3VjwPs2Ql6dne9+v8LLPQJY0cNgz15G35NuHkt5LPUpzoLrGEJoLqA3YXI3ICFIN3PsXFJL+TJg+E8UoGm+FS4Whycqccv2O97B1K/0Gza+d5rLpxWa+AsqYSryYEcduwTAdFwNTr4fcyaQng9UnhemolQ/7b6OjI9rkt4YyiDSaZC+pIAPsxmmxP1bfz4xI/2QUzVd3KoF41Uf21oY2GBOBMcJ+0Jw/pSmOVqSZjFBBPX2oHpGYxZm0FXIjLV/ESqv9xo5z4KfLm9CJONXeyEKghm9iHEwDL/KAyZz8KsVCODicV5LgU29oDWT9W3+EpzA3slz1JNGEjLBZ2Oi0UsTHQqSANaM5iQVs89980eDOVWec0JA7suCjZ6Blro2N9n8E5nhZ4JxJ5WojwwVqpFz3wg/AaRrtknbG44hwAAAABJRU5ErkJggg==")
PNG.ShockwaveAmulet2               := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAALoSURBVDhPnZRtSJNRFMcH69l0pcx8n1Mz51uoGZlFfbAwhV40LfOtbJmmIVEgUZjkp0SHIhZWCypD6I0FQiAroZiomQZhKDQs8svMFLNkaqkf/t1zH545U0j98Id7z7339/zPOfc+MgAyc8RumDbvgDEhHqO37qBcFYK6DeGoXR8Gg0qH3p378S4+CVcVWrYd/EwFG/9p7UdP9AE8DYzDWNljZK3zFBcb3bfA/r4bI/dvY8RQh0uqYMdB0kVBgwuC/yIg6ZoyCFVeOvysamUwL77GF8jF8IMG6JV+uOwazB1SfCXKYaDBfZVLgUNXypCn8OXBlSpX8IYpZBuqPEI40JEyAQdzcpChEL+yUhHwc3IlWkMT0Ba0SwQ2uEXCrEvA4JlTSFsFMI/BxhvNoJQPytV44RknAifbzRgozcVA/nEkCx5s7/IAZ50QfDDV8gHkkObZDOoAdiTuZal6I1XwRIqwkW/4nwhIDmlMDpvVkbyGNJfd1MXywVqVIndHs1s4MuWiGQ4kh0cVPjywGh2We8Cs3Y5HmhgOPMYk60tPh7VEv2Zgd3QSJu69xuTzXhGYqfSGtbRgTUBqCtXwGXt682N2sSklrlpYzxeiMSwWRS4BKGbzs64BfPwvYDkRcO7bj4WmENDWVAfLnkTY33bB3tGJ3/3WJUC9wg/5TM4xcjjTNwS6NlKMNSUGtof1mOrp4m+5OiAC9jedDmCB0h+nmYaLDMsCv5Qb+cWWYrLvNddR6KJx1FCv9IW9zcKBFJ/t/oQZUyemn3QsAvKXYnyJQ6wxFepNCykTsJjVTNqYT8BX7cDsPCaaWiA5pJSnW3pxkv1A6GKPN7VxCHV6YGsuft21IIONeQ2dgTXaSNhqa1Gg9kcmu59S3Bk4Um9yvJQ0lm5fVCo+Rh0RgdIBUolKixuhMbzLWawElLK0JgG/FlZzh1KcRFDSIuA5VSAwN49RQwOylT5iU1jaUsrVmgheQ3IonVkqyP4C+RnWEXu8zsIAAAAASUVORK5CYII=")
PNG.ShockwaveAmulet3               := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAALPSURBVDhPnZNbSJRBFMeXdb/VBy+bl12vlVmuBmIgFa4t5i2QLXIxLU27kVDRS1QstSaCWk+p9LBJdIMggwIltBJNbQvpRXzQyCRp66kLuxWtJRX9O2c+vs+1NVAf/jBzZuY3/3POjAaAxhWVjtaINDQa18JTegHHpHjU61NwjtQQmgJ3ugVPzRY4pETaDnGmIXQlZgdfYMxqR09WLryX7uFAaLy8eFZKgvfKY7ze0YxpqxOHJZN6kHVEZ8RRUiCQ1RSWiovJmfh6rQ/79fFiTSyc0JkwWVyPshAD6uggO+T4YrRPb4KnriUYOJZdBZvWIIKLVS3BerM3oy3RLIBqygwcSbOgWBtJ0+CD/xMD3xxsxtCmfIzkFMnA01ICXJFpGDEXonAJwFq9Ed6bfeCU7VIMhlLzZOAH5x0MUAcH1+XCog2nvQsDAlVDsJneMbBDnjNUBV43ZgpnWwmWtwQgO+Qxw7oSsuea4ohIEYPlyqYzoDs2S71AANlhsTZKBJaiMh3Vjsp1P2OjAHIJND3JOXCbC5YNHLXa8KXrCfxDozKwhNy5zUXLAjKAa/iAvt7vz365KeUh0XBnbIMzahUqaLybbt2jixX6F7CQGPjrk2+uKQyc2OLADdN6+C73w9fRD/+j8SBgtRSHvZJceEXs8MfkW+FSiVFTkjGRfwY+V7/4yyfDk2g8oAKrCMSwd7amBYGe1qviYSsxzdSG47CHrFBraCeor/2hADJstnccftcw/B3D84Dip9wiE1Si8wnpcykzcBelrWzcycC2PuD7T3x0dAooO2TNdD5HDUH5YXtvD9AFcbATcKr0EL51PxN7RA0DgaeoBFMlTlSGxWA7wZV4IPB9+131IZfrovGyoBKvSqploHKAxR2uN6wW6doIxu6UNQU4XdsiHCpxVgVBK6mO84AM+0NpeqyNAiaaQnMl5caYNaKG7FA5Eyxo/gIJvMamqFG+EQAAAABJRU5ErkJggg==")
PNG.Amulet.EnchantedSleepShawl     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFOSURBVDhPldItUgNBEIbhPQCKAh8BAofAxILlCigsGAwWg4bLUMUVcJyIZd5m36nOZGZTpOpLUjPdz/zsTvM8T+XD13x99xK5urmPXFzeRpwn1K+FTzQDHR+d1Dy9fcXv5nxbYfEWyZkyBvL5/RPZnJ5FXMDxQ+gOSGEbYTAXXUMDJMOCBIt6Db2e6fH1oz6EEUpadAgCcYyMjmDGqWWHI3Ri0ssWzXBONJTfVZBmQI7D8Vs4R9gMQQIax1meqvfleLuQ2B7oIAWGI3ksAup/EguWeeszmuWYMDQ8PL/HNbhbdkoqmmB6dsA2GScVWCLqUxftYr30cFF2/y+QQu8LpEUB6y57QA7NPFUa3FEXLP8PgmLtg2Bc1Dcg5sqie0AOWG4AZtxax2K+YF3QFzeOWRo8EhHL9bxWvF6idTIXxfaXI3g/LVZrl539gdv5F9yANXXGx/n+AAAAAElFTkSuQmCC")
PNG.Amulet.EnchantedWerewolfAmulet := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFYSURBVDhPpZI9SwNBFEW3VCsVQUhUEEJMZ+EXrIKCBGxktdA+QgoR7RYLW3tBbCz9Bfb+uTHn6R1mJmM2koWz8/a+O3dmlim+Pm/dsFp07VZhjB5eHun4cv0Um/D4sDfRrNBUz2Gv/0xoIivOQlachaw4Cf2eFPUjcxNMPNmdM7gZIQqNzCGhppogaSkK9WFaSTuQxv07PW413kP5fcGY4/2l8vCdBoXQLxSWNgGdS09Y0+UHC5Rp9PAyZAD6f+1uYanthLQo8OL+1ZVXdRSqwG6niCZS42VOFOiL38DO4bUFauXNnTMbe+Wl6988e31+ecO89dOPNhYImLRLRtUhoZ6GQRRIk1W3jyrbAbArQYh0PDBVIOOHe3O1G9huOC5Qo9HD0xgIGFa7pTs4H5oZBsM7X6+s9ay3vrU/FgbRB2AikDEMFdKmCsTAkXVsJulYQK2g/D90xTdxhpCFI42UogAAAABJRU5ErkJggg==")
PNG.Amulet.TheCobraAmulet          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAMJSURBVDhPdZNdSFRBGIaP7h5/jhpErukaBbaZEanE2s/6s2jWmmZZLFgJeaMVipGhooimoRBR3VhddBPRBhkUlBdJYVcF4UVWGoQVKpUWZNpKdBHxNu8c57grdOA9M+eb7332m29mtXxPFjRNkxKP5oqMwJ/gEDorEuBPiwa/B5uSw0Z/WpRc//mq3vJx9BXnQMtIXwvKm5dtgQlsKomXwFKHLiFKhNVuj5XwmYEyy5Ofm4l8T6ZJpjw7NsO13innP4aPS2NpkgmrdOmW+M0fObIpWkKZv8290fKyXin5saipQB5unVyF00WGhAw2p+Dj+VR0HEiQ36yQ649bUiwPJTkKqKBqa6MXXOg6aAIIIpziGvtHYCjIYlgTMeVWKQVlpayOUParMlmX21WVKW+ozNcijOZ3V7PlWFdgIELECSaMW+7zx0kg4/Z9wqivFPb/ABWEUlBWRhEKtMotq1PX8l4jqkuYl0EtoDJShLJiglX811A53vamyjUFtPsXcPhuOHSJLKZaTouUgrJKbpdw3HfLg7CAIs/bsICUveHQJaAIJOb+RuEVIKomEAblKb/sdobBPD0L2NMZhL0miDVnguFAXQwUk5UUdLkYjx0DqkaA8jeAXj0PW8Wc1U8JU4eg+kaFQlgRQZQhKoj9AFy7AVSL+bqHQKRvBrbCeTOXZoLU9hQY308BD9yYvpRqgY1x4FwAKO0DXkwA7QK4YRKwV32BzTtnAmnmzSdQic0f63HiSXOisAjb6E4ZU+CYR8Cdp8BfseoUla6o+wxb2SJw8qZHAlVyqFp3x+HrxSTcPhovrG141pYoxbUYUWX/MHDoMmDs/yRjQ93pZg/5V2IgtFfq+lCE4J4bGMzBeI/DOm0l8YTcFgFkgqoy2fsNq0sm4J8Sq+0j0OoHrBtwtiROQt/3OhAMbJVtYFVhQL4UlMfuOiFOzjsNd8MsMjqA2usiQUBZNfMaCw0JIbBmSzQGGtnnZUCKyRSh+jGIazALR8EsstqAon7A91wkiTaoaluKDTTtMqUYALR/TFIwOA7IYiIAAAAASUVORK5CYII=")
PNG.Amulet.StrangeTalisman         := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAH8SURBVDhPrZLLSxtRFIdnmZ10EwlJ46CN1Aqmgai1GBEkLTYRBVNt8JEoPmiLSIgQBPtYNOhCWruQ+ELJSmldSKkUbVFUEAVFa3HTuqoViv/Er/eM3HEyuTFRu/gy95x7ft+9mUQCcClki5E9xHuEsJmKdDJC2EzFfxVmIiOETT2ZyGiGEG7quUjIRbxOGtCjD/Ba3+ckFByv28oe52se1vZTkdSg0OlhUAkTJztudf33uy+tVNik0P6cSQlvjJzdbGs8O62MEDbv593AStSI3ck2bL6vx/qwF99eG2HKMrDt5HktwiYJ488cOFl8gaNVC5Ze3sOHUP71hH1eG76+eYA9l4yn7lyEqvOuLiRIGvHY8Kr+NnwlloxkhPJBYREknA870eqyKkIRWhmhyA5mOvDn8wCOP/Xj90IEX6IeRGrvYLLbroRinXaEPbewGK3Bz7le/PoYUvgR706SSttjQQy1ONBYdhPN5VY8LrUg4MrBxPNidZgOfdtaiGBFDuqKzXhoN6HOaUaA1XvTXQlSqYG9n0d3TWirlBHvcbCb2OBncvpltcK1d374Ss3oqJIR6ypCuMaGJnYBH7vA7IBXnZXoRCoIklA4wN4Z/fe0wt2pTtSyWaecpR5G9FTnYvBJgTor8QXBh9rZV9ke9ScIl0faFSGf0WfODjHgHzsE6bsduAE3AAAAAElFTkSuQmCC")
PNG.Amulet.ExoticAmulet            := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAFqSURBVDhPrZK/SgNBEIcPSXGQQlIlWEREUqSTvICthWUglU9gI9hooSmshRCxUFKKPoBgpSBiY+0jWPoCdut+s5l1b+8uOU8PfvtndubbmZ1L0sMrk6RNY7+kTJxPri/N0dmpiL0q9pMhNJapDBLKftWBVfSvQAezavTWF5ZRRYBGTx9G+uEXNaHAGr22ALsPNyZhEKA9iJ2XiZjm7rZvlkuModV2B7+E4k92GsfsfwcBWrAzOodFIsaXGfj/OMyz9G8aQfUitTPjh0JoJkDfU5/BO9l5bXIrlyH2XK7lIk0iBxPjPFt5BlsasFZ/IFrdOzabF48OZs+IV4YoNmT2NgAA80p3Q3T+/C7AEBYqZ4ilMMCjt3uz9fpiOrM7kw4PCqGZTSwCpFEWRFYKI8vOcKceUGGAZp9fAuOSwXT8NyDdBQqM8usDLah/si8QYHRaSq9TMiKIDIEBYl3WEJQzFEkzVTBZFgNN8g2WHcalYERWfAAAAABJRU5ErkJggg==")
PNG.Amulet.BonfireAmulet           := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAG9SURBVDhPpZQ9TwJBEIa3U0SOk4NDDZWNH6UmIgjHpxpjYWJpZ2lhaaeFtv4HC/+BMTGxszYhsVALCwstiYUWqCQyzruw57EiHkjyJHczy7OzuzcrNhMDxD+RiRm0PRMgvC9GDSrYIQlyYN4yyOE4aFQCVLaHKRf7zitEdd+kJA8+Kg5RhgdDrA/SWWLZ4VSITuZMKfbmBGZDVafJn7N1o9CS3uyatDE+yKFmXC75ZcKgcjzoBv2SjoboIh1pF66OBum2bMoqVdAvEGLZad4qSJe5KCnsR6bI8p5X90x6TMTlYYnLzMi/hDjIu7glZbLCKyfctzDLsvNURIoAYu532A/YNxyKkgGxNtb76SpWWJT3fPxA6AG/QFbs8N+2l15wfukoke/Qj3+Bk9VjCoEjd3xIZZ8zOa7M2xk6Upjiy0FPeMGE6lv7qESoZHepsLYTlEJ8UwhgdrSUGoAtQWtBWH8K0/uD1b1Cbx9CiirqpVla4EkgO5gOyTwmfd1q5p/XLcL9qMuA+wAhllKbjNF1OCCrxPXkrQZjIPs89iEEEEJUbN11nZYGkULPAfcBAxpnBr3d24R99baTf0h8AU2b+jm2eXn6AAAAAElFTkSuQmCC")
PNG.Amulet.ProtectionAmulet        := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAJUSURBVDhPpVPva1JhGL1WtFaWX9YvSqov20D6BRbEHKNoJYpFrYWmzqSVCI5VWxH2YZQbOoZrMVmMRaNIhGUEwpYYM8E+L4II+hr0d5ze59m9N6/eO4MOHO69zznPuc/7vvdKbkc7CtN+7GjdCgFpIwqg41AbsolreD7iauhhnLUfQSkTwv62nRrRiAI43r6Pe0YCXTCZqKxqkmQxb8OHKR8G3CeoooobkXyXezrx+UVY06MAYc9J5Mb7Yd7efNkKqW/5WQChmkEYirg6dxOe7k5VbEbype86MR49rx9I+0H7cuao9Z9CyfMu6UXQpTOhYhgVocszAfSds2HzJhObjEj+0mxIDZNrfwPlAm44j+HLwm2+GoVS/WHQgfykFxZziyip/dpAuQhX1/q3SRve2rJFlLU6raD6cpAe6rXGQFngvVyZCSIZu8CNCk/bDqIsPpfI1VMNK2DUFmpJEvHNkz7kU14Osu618DJTsV7dP4tRX6wnWZIiYFVMVUj7OezA7l1C0vU2DySSrTA/hjvXe3nqel0hQ0+oJVmqS9P4Uckhn4ljeMBjGMrQE2pJlkp2Ej+reSxMDCHivfh/gUSy0ZSZsahhGJFhIKiNdC29nsD3chbziRiGAm6NptzLz/ykIZXoACq5KTaX36Z4qXQgDwav4OmwOOnR9V/O53agx96hhjLqw9KPbmHt4yv8Wivy3lG439ON398+ce393GM+mHikH4l7AX6RdY+FQymgIfB++BJPRUFLs3GeKOpz8qF8LS6iuJjgF9B0NDHd222H5UBJ+gO2XKS/tvqzfwAAAABJRU5ErkJggg==")
global Amulets
For each, element in PNG.Amulet {
Amulets .= (Amulets ? "|" : "") each
}
PNG.FlaskMedium              := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABEAAAAOCAIAAABGj2DjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHlSURBVChTTZHPS9tgGMdfVlpb3PwxENK1iWmamJgmaWy3WgoTKd68iB4stOyg9LTT8GJF9CwIlcKEDbaLY2y37Q9wEfwDBrt68h/Qy+71k74i/fIe3ueb5/P8eCPuv68Or9eHv5p3PbubFMhaQLZtO7peME2rYBi+H+TyeVVD86ZpiuF5+f/Xlbv+679tpZcWvd3NmBuT5/uqqoXhkud5lWq1CPPlubjpzPzbmvltidO37udvP8mbm87kkarOv1IkaRhFOtNz0XVFLvFskBE/ghefqrmL4w/b73bCMJxIJhxnUclmmecq+gMjYUxd18Vup3VxtL+3uXaw0xqcf5ycSLMMDGMEQZkFKAxw1u8Dc/G8knip5Mh7Oq5bKnklGEgY+lCb1MPDk6mpLGTcUI7B4UFsx2FoHD8ImAGTNZiw2WySCtNpt+PlSCVp/DDMm1qNPtaCBcOLszq1JBYz/A0+kFcOy7wmVQl533q9jin/DxgmVTRNT6UcsbHRJYak4VKlwqOxNwzm+5EwOfDkKIqGIwgYXZahGmRc2CjwrdFocOciy9WWl+PBkDKb563ozsaXl7dsz88kjyq2Y1MolbqXGE6cnx2tJIULSRInHmBMhJiUfoxRNBIXXEj2fjKlCGFknyiKHgCyCom5O2JqnAAAAABJRU5ErkJggg==")
PNG.FlaskLarge               := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABEAAAAOCAIAAABGj2DjAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAGxSURBVChTPZG9TgJBFIWHQitiLcTAsuwf+8e6rLAuiQnBhAKCNDRQUVNZmkhhpYWtjRRa2eobUPkIvoRP4bd7kZvJZObOOfece0e9nKjP58d0eD0aDizLbrlu7JiviSI0rWEYZkPXPwbq5zbP1Gp1wzDU+83V08P92KlfRud+EJiWmSQJiPF4nKP+AxoRdzpNOJvN3XIySo9KruvBIWtaFjRisViwa5qGvnAIjKizcjk8LoELwtB2HJhRFAVh4Dit00plOp1yAAfga7KnKeyC5kHXm7whRVXaQDAM27PZTAjsb5lC1vc9RU8tt8Wz5/nb7S86nu+BgHmwJyEcBHIOIiwOeLNtx/d9AZFcrVY4ZFw4Ypi7ZdGPcJACyjNn0BfdLjrMEB0mjn9qCe17pRRepZN21BYFrnSVpiki8j/QSFKFPf86bpxgIgiBoeEEznq9Po9j0OwsmUS1Ws2yLPfGD0gZOFypggImeeZcjNGA1u31+FBC9ft9Bjqfz8FRW6JeVLEdGwIKMiEyuKDn4o+KQAQngKTwPlsErkjyDfnQJHZFcBBv9H1ISnCFg06e3+3+ALkAiJRSlJQYAAAAAElFTkSuQmCC")
PNG.HP:=[]
PNG.HP.HealthPotion          := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAG9SURBVDhPjZKxaxNRHMd/d0mTNF4uaTnTu7YxQ0gxWFqotqCFLAULpR1DBhFXQdSIZpEU1CJ20qHQwSEOFqxCKboGlBbs0g4tdNG9/0EXp4/vXakm5pI4fHj3+9573y/feydAGyIu28vz+oEJN8SDOZeV29MUp8aoVCq+rvc9LV8nm/XU7Prz/xAoarTJGcJQQsg4Fl+2t9jcrPt61BQKl3J+oBsVn389gggUz9HGZw3Eb/a4+sgPS6c9kkmP8XGPV3Y/lQGDWxeEy5Y+Fux1TqDYzN+m7p8WVWX+KZViZ3KG3Wtz1Idy1PqFF/kM0bDp7+lEoBiEbtmnPuNzy6RhZzhIOhxP3uTHwl1eOja7hSyfZ4tUM0liXUIDxU7owGeWQWM4x97oGD9L99kqzPDVMPiu3r1J9FEbTlAaDHcMbRO6EVGm99I2+8UlDm8s8iE/QV0Z74vJe4mxIgZPYkJZ3WU5JURC7aEtQy90w2UnwvqIx+rFKCdX5tlQIXti0VDrWkh4qO5Z/0B3BoRQLK6OtXq0DL3Qgetx4WPc5NfsKKdvdzhyrvJNbN6FhdeqWS2iAm2hpAOtlDrW7IH8Bt7RU3HItC/gAAAAAElFTkSuQmCC")
PNG.HP.StrongHealthPotion    := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIYSURBVDhPfZLNaxNRFMXvmJc3k68ZOpBmNJoqYiNFE2TAveA2Rd1YSBCpFYRAtSoIWui2fkAlVkFRXIig1EA3oqi10qiUUuhCqKsuivYfELKU430vTswk2MWBd888zu+dyxCA/6rfziAb2YFajPCikMJDP4tnUxM4fWYUE2kHR6WJJfLRkCncSBIqAwJuhDCwywORiujN7DXYCi6b8RjOVUawvrKMK6eO4/roCGoP7iNhWrhjijZwiTKYjjPQbcHuzszg0+JHfQ5yA4UHHhcWNvXlAOx6WZwYHtaQQLcMwjztQ1mYeEP78Y3yIeDk5E3Y9k4N7ob2AM+PjaFWu4ehocMaaEYj2KKzeEuDeEyOVidsntJokoVZXvtUinDRH9QQBayUyzojxAgNPBYKBT6CSqWSho7bpMO7pWDPGbRKh1CXUcxFCU8Zesn511RBtwVqg61isYh8Pq+BFxi4ZsTwXjh4JVxuegB16uNmEuvkYlFY+MBSwM/Uj9uJFlApl9sLKQ9y7DZAbbLt+8dwJHkS13hNDfLwnfagaaTxmwQ2KIdNXutyJI6vQmKV/+QvUUM37AR6Xg7VajXUMgRqm3+BXt9uXOUVvRNJNAwLP7nZlpLhYMOw8ZpXWZf8nWFzFmGWf5wnZLaBKidQOzs4dEtdUq9T0JfcYo0S3CqD5mXJsDh+8ANWBOEXN27wOlWzR9xwuqNhJ6gl0B9v7/zV3LEfwQAAAABJRU5ErkJggg==")
PNG.HP.GreatHealthPotion     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAIiSURBVDhPjZO9a1NRGIdP/ahpaMlgCYTeYsShcVEsNdUOVjqoEAcXF4uBDjqIDlpsFylWLArSxo8iNEaCUq0GjB9oBR06FaFDFRRxMK4Oikj7B7w+v5N7K2IFA0/e8/k+77n3XMfPPp11Vuxyxk9/fqx7V9biLS0WNDfbtsYG6290djrm7PwGZ2VilX51XZ1X650doX+CuU76h2g/OeiUyBPl9bkjgYSRNFqUy+Usn89b51pnZ5BINEHSq3AfSTkUzoTC0aa6LMtYucdZKpWyVMOfUv/nGzSFpIqSRePX43WZEhdhAT5SxCRMk/wxHGPsAoVcht2hMBaL2SnWHFjzW7oijNCE6M1kfNzKhtvIxklSZePX7j77Bg9pT1L9a+Yvgk4+wukGYQtzKnyu31kra3bS3x6e9C9hJO1Np/2CvVR+F6FOMsvGt/ACxkkwm+6w54yfA51O0jHWS6q9ks4POFs+6qztf4U9JHtKgkXiS0TTbHyT7bMap/xMv0BfF2iQop4hm2LdEHRBMplcuRuFPXFbvvYPofDVwA49UhJ+If5A8nPfYR/fIbuD7EEoHOPClIgVxh/BLeQn6W9kPqCf2dTu3+uqMiGZFuh9HKfaAlSUHOagCB+Yew8SXuJi3eSUehIzFFci3kM6zJwe8X7a/hCryYQm9QiCILArvBt9a/Mkr8F3ZEsDw1bb3FH/HmEKmT6XErGC7AaMgoqILlIikbBfUoLJBYw/4VkAAAAASUVORK5CYII=")
PNG.HP.UltimateHealthPotion  := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJLSURBVDhPhZJfSFNRHMfPnVPvbOMyktX+xGxLjRK2hu2qYxQW+dBLBPqQEBnYQxT9o4Qeo16SiggUcj0U+SK0IPpDPWRCYg9SkUkjNt9EpSjRhyCCb9/fqRvKoi587u+cu9/5fc7vnCk+KJxVOGop8JGX/rb7w3PU+HyIeL36+4+HLTp+zu3V0bZt5N0KJZfCBOOBKtaoVkhxHDOq0L9ZSSGN5Dv8EZwP/8KZC6FLk5p3J2N6PhxxYWtdFN7TBWxYXkA2m8U0hR+JCO+RfWSdcuO4XyEYDCJorJbq10qJSCUOtoR0dBhLVSDKxRGOk01N8F0uwv9kXkvvs6veSqU7fkBChqmFpmniBTdzgkiNVUIHR3AobCHGxOSmOFrTaTS4DWyvj2PObscnItKRhBd2KoWLFQpXeZyDlA5RWOvy4yA7He1WWGN4sJ91Er87LRM60s7GqE7YySJ3TIWXLPqYC9+QR+QKC2yJRrW0OZnABQqnmfuKwjOUyVr5X4z3KCxfV7AM37+FTmxjgUkyT+EMRXcpmki3o8Qui5xLp+vnFrCjrRVF5n1l3jnGZhIIBLT0sEfhVF2lFpfJVuKIb3HHMyz0bdsuLO7pxBfK3lJ2m3IR1t8YQyaTQY55BX5fIkPs9hjna+XeOQ97qtFb8x+hEGfyEe72Ghnh4jwZJTfJe/42RUT6tKMW3V1deM08WZdjHKa0j1I54g6OpYEywd/o5/0844JxFl8k3ylb6ulDaWMj8iwmwgHLxVSKeN8SZ3kiEgc4F6Fs3LIs/ATH1eWd/xUKzgAAAABJRU5ErkJggg==")
PNG.HP.SupremeHealthPotion   := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAH9SURBVDhPhZJBSFRRFIbP05lxxmYYJCHHGZhhnprggONQPnUYihJmoSshXASiQS0EQYWIBMGNq1YV5MaNUhAJulCMNoGQO2lRim50q0G4mBZBBL/nnPfuyzHQB//7uf8973x3zlziB69yBH7kpZJsbnoSw/1FzM4+x8PBctV+p21jro7QUuPKCRAy7JWxZ2izgngSD0kTVCRjrYQIEctlaPODp4TxuBt4Ifr3P6M+FkMqGtX870aP+s/FAXXHcbDKoENu+IebCazyfl09a4Xwop186Feu84H6YptJujJrUfP8jurbZFbX71I16MikEZ0+0LpSqYQ9D+hDWTcogIkGQiKRUJjoTdiFKvA8RKDiCz3N6kZbhVqkvVPmczn1ho8n6mvc0EBFkgkwHA77QDNWH2hkAKPJOLJ8+nyLjd7ubrQFLNxutXHs3OOyf/VOoYC9IKlkbXyEAeLXrAiGvP9Re0t4UbLx4GZaC+5yg2Uex5dawiZ/eLFWdCvfWQU1knuxPUb49ZIQt2KXA4338Th2WCcMPGLgW29kRjLepuMfuNPXW5UbCfRRhDCVCSr4v4LzMuBtBh0x8HfXfV2femNd8uCtr7dQLBax6I3R6AMf9DrXpPj7ZKQOj+uvAIpsLhaggRrJ3i5n31nyKz+VGzWTCyJuxitQuaFlXhMRzgCz2RB3qwy5LQAAAABJRU5ErkJggg==")
PNG.HP.GreatSpiritPotion     := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAI5SURBVDhPhZPbThNRFIaXF2qtNBUD1TqFtqicIXgcopGJQZBkPLRQbCumWgWiBK3RNDEaRSWSSjR4qInxRu+Md0YfwCvfgffwAX7Xv7dDNBKd5J+9Z8+e9a317zWiF1argncHBXrxZtbcwcMIRyJINDSgf9MG1Ot1FPeI0eMRq7snfumoYDQhmEgLOrYJvLjg8ylhIKMgrokdAAgMoMEm3/dRKpWQzWYxN2gh1w8JqkMWVNXnh759JnCmy8K6GwXvjwji8TgaN/8JNTcz0SlFKEfCgvWlk4LnWcGTjODOqKA2ZteuKejRpIMbmgSB57X6Urugd7sFhkIhHN8l6NEEGMfE4+138QXleZ4ZUxGtQquZPya4r9W8LQpWdKwobFqtXNAEJjoFV1T53YJMSrAzbBP/NiVwHMfESGy1cf8CBtAAuL9J8OZiCot5B0tTDp7lBLc8Dd6vSYzswGKmBYUDzZgesHbn2iyU3xL6vSz48VLWrP0vsE/t+XDTxetzaqMCK8OC2eFmLJcHsJxLmurYNDzjqmpGwX6roEubJxaLrfXGylDYgNcFUiYbVXvUNsXHShs+3XPx5ek4vtZyeDDWinHtyoLaSOBt1+5jpbP7BBf2WnBko4K3CDqTLeZc14VRhHGDo97z4CfVKp4RFQSr9FoRyOoIfVFIYSHfZ36fyx32VzmrFruxf1hK8SUtYIaX9EMGZTdyrJ1J41UxbeYUoXPdWp3aO98jKOt+Vn46Kbiq6wQy8Wg0ip9Misr+rOpY9AAAAABJRU5ErkJggg==")
PNG.HP.UltimateSpiritPotion  := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAJASURBVDhPfZNPaBNBFMZfq2KMCTFSQ9PddpNo/ybaGCpbG9JFWlRYUWlj2hhR65/iQU0p5KIoBVFqEKoWRUTQi4ieRAXxovTgzZMXe/CuBW+9Cp/vzbihTdGFb77dYeb93rx5S/xgsUJ43EfgRwY1N/ztI/zBIMxAQM3/ftev/NcTV7lt27gyTFpZwn6TMBondG4hOFHC60MkgZRkvacaQIAe1FvYcvOL0tephPp+bjYiGbMQmF5E6/IScrkcZlxCZVADz3drWE+Y8HSAEI1GEd64GqqGlRCBiruuq9zTQmYdrAaCye/pVArB6neE3/9U0Mt7NPD4DsLJDkJqqwb6fD7sayEkOQGJsQroyQM4jqM8FiTMcNk61jfgGp/mUZEwxy7QV70B2JkMRrsIZ1lj2wlHY4Rmv078U4lgGIaKYW7+m3w90IN6wEwT4cGpGG6MGbhVMnAnT5h2OPguLp1lKWhfuhfn0oRLfNJ8QkNlr0A/TxCW71GttP8Eer6Ty/NsysZ8gRSwPESYHNqG6kQa1bylTtr8YwnOwF5U+vkeGey2Ebq5eSKRSK035gb9CrwGtlIeWJriRTmBl1dtvLk9grezeVw/2IYR7koBts8vIJvNquaRk07uJpxo1+DgBgZvInRZrepe10DqZXDt5eKPcankjkResHJKS6AfDjShVCjg7niMt4GK3EBnOvWvcoRLbEf+U9J6neaN8q9JN4rPHo7jfjGu3kUCfBhq5KWgi0nZAhrnxMQv9GigJB4KhfAHCAfjRS7DpAMAAAAASUVORK5CYII=")
PNG.MP:=[]
PNG.MP.ManaPotion            := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHDSURBVDhPrZLPS1RRGIa/uePMWOSMgei9MTYLSRIlQXJhgpuCgcJoM7iISGhRKDRjNkWi0iimIPSDxIXWZCqohZmzCbxaNOBgmFDQxvb9B21aPd17RLE8oy1aPHC+l/O9L+/hCLAHEZOFnqh74JTp5eZZk/4r9TTVVZJIJJTu3utqaSASsZzZVPO/oBVdXJMthLIiobzkCJmFeWZn00oPiI+q4xUq0JSjir89dGjFbVzjrQaimnUmO1RYaalFKGRRU2MxeKiPhKeVy3KJkxJ21vRe22jF3ew0Nc2dFklp41XxHEu1H8mczvKkLE233KKvvIuA4VN38qEVdbgtfeIlZdzlddAmF/rMcu037PObDAR7yUbe8aZxkWToOoWG31nJ46MT8+EG3vckyRyzscM5srHvTFTN896zwqpkeeR7QHdRnFhBNG/oHmE//FJAe/Aay03rrJz5wvMTM6SNZ6zJOmMyRUr6uS3ttMgFhyh+zfP+MRyE27DHH2fUGmEocI9P1T+YlGmWJOdg81QeE5cb6gNdlYt4D/+HwFEZZs54ya/wJhtjP1ks+cpb+cALGeehpJzPc8cJbCYm5/AWB5y13R7Ib2umb7ZW2H69AAAAAElFTkSuQmCC")
PNG.MP.StrongManaPotion      := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHzSURBVDhPfdFNSBRhGAfwPwqaRht1qKmNrdvKQrvBikqXKMKCWAML2mWXDjZisBCKdolFo4Syy8TYB1bUoS8thA2kL1iVoAg69XWqS1DXTt3/Pc+DM+ys6OHPvO/DO89vnnlBcs1si21nvLmJfhs4m97EmWycDydGeOr0AJErMN/cy3d4wUkc43kc4MShEgFw907Hno39NKsLUgoOt7a38Uwpz09vXnK0/zAvDOTp37rJja0bOI0yh5sKBv7AP07hJEtIGXbd87i8tGjroG+Q6Ea2tdovOxzAW524AfW5hgKruGETvsIdQRd4FcdDsFKZYiy2w+BGdBU46Lr0/WmmUntD9Dv+8DXu8x7GLPVYFVdYQ9XAYexnX7LbEAVLxaK9HzEiG9mm02lZyhXlcoaekybavDGKPcYol1emu42iPPvkfE84qaLrglaQUiaTYTKZNPAsuvgEF20SjULPUeFTmXQBnmGe3J+C87IfR6+BmkRiD1taOqTtOqAVpZzNHiQ2uwJ28hEu8T3m+BN/+QXf+BFv+RWfpfmRENTpNPWg4yRYLpcjU0agsLgCOlt20cU+adQvdzfIOVyWu5wRoBDBxnHUIAV9DIWg9gkS9g4WjdFD+nWKKnhXwA8y2e+hZwY+gCu/Mc9ZTIaTeThh63ow2pf4D79IFpYClHfhAAAAAElFTkSuQmCC")
PNG.MP.GreatManaPotion       := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAKgSURBVDhPhZNZT1NBGIZLsbQUChiRRcomlGILLZa9IohKWAqKCkWCHFnLYhuR1dBgoAgiBFkSgwETjBcmBjXGC43xwit/gom3/gZ/wOOZSUo0kjjJO/OdmTnv88135mjUxo8pDbslGtQmOjlXXlGG0WTCHBvLCfW5SleCR18rpRiuSbXpG6REXKUrpj6qiuzIdEp1Dt43a4SRVNhXeocBAhiGhjd5PB4URVFNzHiNTQRPDRCyDrB11s9m0R2WCweYzxlkKK5TAr36JgnLjcxk360hNTWV+AjTX1DZyUANhQRUjAIWng+YFAnbLvazVTrCQeU8786FCGS086RoFH+8ws2UOlr0F2nV15EXmSWBBoOBcp0Ti5qA8JF+ovtTYkGopqZGjtn6NJZzh5mwdDBrUXjrDvG5ZpW5nH4641rYsI7RbmqUJ20zNnA5yk2i9rhM/GuXhpiIaNK0yaRoT0q/f4BhaBhYEmNj1eInZO9l2T7Iy/JZlqxDeOM8TGR2sV92H1/mVZnMZKpCQ9R5CRXvCui3Xg2/tjSHpf0v0GnMYyt/nD3nDJslIzwo6Gam0Mur2mk+1i2y4LrFbvE4gfR2glk9+DNucNvcgC36NElJSYd3Y6PaKMFHAoVkNqrEhVm1jfLatciH2pCqBb7UL/OpMcR6+SDbFaPsuMZYKxjm4Zl+gtZuFmx9TOV0ciWhGrPZjMPhID8zXX7XI2FCAiY2VFZW0p58iZlshTlLL+ulPp65A0xaOzhwL7DjHGfDHmDNPsKKfYi94kmCanlDhT34Tl6Xv4oosfNYvjzAkTAhsShKIDIcz+hg03qPtby76qVZ5OfsG777XvDcNc2ea4qVXBVmG+Kxw8dT5xhLtgEeufpoTbhAp6FZApO1iURF6PgNGtjwqWy9e98AAAAASUVORK5CYII=")
PNG.MP.UltimateManaPotion    := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAABwAAAAJCAYAAAAhFky8AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAKDSURBVDhPdZNdSFNhGMfPNvfh3DRhTpdH59c+2nRHjpPTNuewHJvNog+dibjUUCuMbEwFpciZCxaSElmkUAQFfUFEJBIUXnTXVRB50U1XJXTnbfDvnIfOKMUX/uf/npfneX7P+573MOLA5gSD+14G4pAetNb+9T30RiNYg4HWf785SP5rNUYuCAK6tFFSQncCLeomRDQtqFZVoFntwatORipEkuJl5QASUIbKgfvnP5E+j9fQ+2NWCXeVFYbkJiq2txAMBnGtdhijhb0EjGuPEKxOZcUDPwOLxYIihZFypbpUOzf5C5GgksdiMXJZG7wKVgUDVpw31tfDmP2G4rWfBB0rSuB0WRhHtYdwXBuGXVVFQJ1OB0HNwSY2INX4DyhLBoRCIfJqbTkydedgz1Ng2pbAS38a66EsQZ9xBgg8j25jB+20Sx9Fu8YPk7KYGv/Qx6BAkY9yZSnKlCVUbxdQhspAb4ELWdsY0u5BZNzDeCRMY94xinhhDC6rlaDeRo6aSVkSiGqCBJVyJejHQQbbS0zuaPcEys7p7VhyJrHCTWHRex5X6/sx1RDHk7ZJvA3P0U7Lfmwh5PdhpmoAY5WncIaNwpVfA7PZnLsbt1r1BN4F+1cyOOu6gKf8HF63pUXN4l0kg7WONBaEYQLabm8gEAjg+oGzmHH0Y9Y1hInaXhzb1wqWZeHxeOC0VtB33QXZKZ/Ph+7Sw5iqTuCKbRALzSO457+IlKMHz/2zuMslCboeMaEvHsdKU0pMA5NuGMBIyUn6VaQj5vKcex/pTiUre7DouIyb9kvipZnD9+kX+DLyEKv8JFb4CQIuFynFUDB3uHHyG/wQea+uk4ClShM0CjX+AKUN/cGDPpfoAAAAAElFTkSuQmCC")
PNG.Bless := BitmapFromBase64(1,0,"iVBORw0KGgoAAAANSUhEUgAAAAoAAAAKCAYAAACNMs+9AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAACWSURBVChTdZDLDcQgDERzpwjEJya0QSH0wJFuqIL2vDteGRGkPQy2x08j5IsScQiBiYifJ7Exhr33HGMUzznHlBJfMHLOsgA0xpCKOcTA901srf2BJ7TDKgFhQr13qbXW5S0Qgyac0J4s4JyTW2uyKKVID8F/gTBR//UC4tEFEpGif1VogSosFNp93PUFQieUvscmIv4Afnyd90kNfI8AAAAASUVORK5CYII=")
pBitmap:=Gdip_CreateBitmap( 330, 22)
G := Gdip_GraphicsFromImage( pBitmap )
Brush := Gdip_BrushCreateSolid( "0xFF333333" )
Gdip_FillRectangle( G , Brush , 0 , 0 , 330, 22)
Gdip_DeleteBrush( Brush )
PNG.TopBarra  := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G ), Gdip_DisposeImage(pBitmap)
pBitmap:=Gdip_CreateBitmap( 470, 22)
G := Gdip_GraphicsFromImage( pBitmap )
Brush := Gdip_BrushCreateSolid( "0xFF333333" )
Gdip_FillRectangle( G , Brush , 0 , 0 , 470, 22)
Gdip_DeleteBrush( Brush )
PNG.TopBarra470  := Gdip_CreateARGBHBITMAPFromBitmap(pBitmap)
Gdip_DeleteGraphics( G ), Gdip_DisposeImage(pBitmap)
SetTimer, PartyList  , 1000
LoadData()
Gui, Main: +AlwaysOnTop +ToolWindow -caption +HwndMHTibia -DPIScale -0x20000
Gui, Main:Color,%GColor1%,%GColor2%
Gui, Main:Font, c569cd6
Gui, Main:Font, bold, Tahoma
Gui, Main:Add, Picture, x0  y0, % "HBITMAP:*" PNG.32x32Logo
Gui, Main:Add, Picture, x144  y0, % "HBITMAP:*" PNG.TopBarra470
English     := "License Time:"
Portuguese  := "Tempo da Licen" Chr(231) "a:"
Gui, Main:Add, Text, x170 y4 cWhite +BackgroundTrans, % %GlobalLanguage%
Gui, Main:Add, Text, x+5 +BackgroundTrans vTimeRemaining, % " 000d 00h 00m"
classButton.Push(New IMG_Button(490-28 , 0 , 28 , 22 , PNG.XClose    , PNG.HXClose    , "Main" , "MainGuiClose"))
classButton.Push(New IMG_Button(490-56 , 0 , 28 , 22 , PNG.ConfigTop , PNG.ConfigHTop , "Main" , "OpenConfigurationScreen"))
classButton.Push(New IMG_Button(490-84 , 0 , 28 , 22 , PNG.DBug      , PNG.DBugH      , "Main" , "TibiaDeBug"))
classButton.GuiContext := New IMG_Button(138,6,10,27 , PNG.A1        , PNG.AH1        , "Main" , "GuiContextBT")
Data.BarHP := New StatusBar("BarHP","x34 y15","MHHP","Main")
Data.BarMP := New StatusBar("BarMP","x34 y25","MHMP","Main")
classButton.Start := New Button_Type_1( 2 , 5 , w := 30 , h := 30 , Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := "ON" , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "FF0000" , Font_Color_Bottom := "111111" , "Main", Label := "StartButton" , Roundness:=2, Name := "Start" )
English     := "Profile:"
Portuguese  := "Perfil:"
Gui, Main:Add, Text, x5 y50 w55 cWhite +BackgroundTrans Right, % %GlobalLanguage%
Gui, Main:Add, DDL, x+5 y47 w35 gProfile vProfileSelected, 1|2|3|4
English     := "Vocation:"
Portuguese  := "Voca" Chr(231) Chr(227)"o:"
Gui, Main:Add, Text, x5 y+7 w55 cWhite +BackgroundTrans Right, % %GlobalLanguage%
Gui, Main:Add, DDL, x+5 y73 w77 gProfile vVocationSelected, Knight|Paladin|Druid|Sorcerer
cx:=15, cy:=30, GuiName := "Main"
English     := "Copy Profile"
Portuguese  := "Copiar Perfil"
classButton.Push(New Button_Type_1( cx+138  , cy+42 , w := 90 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 12 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "ProfileScreen", Roundness:=3 ) )
if (Locked = 1){
Gui, Main:Add, Picture , % "x115 y44 0xE hwndLockedID gLockedState", % "HBITMAP:*" PNG.LockOpened
GuiControl, Main:Enable , ProfileSelected
GuiControl, Main:Enable , VocationSelected
} else {
Gui, Main:Add, Picture , % "x115 y44 0xE hwndLockedID gLockedState", % "HBITMAP:*" PNG.LockClosed
GuiControl, Main:Disable , ProfileSelected
GuiControl, Main:Disable , VocationSelected
}
English     := "Reconnect"
Portuguese  := "Reconectar"
cx:=15, cy:=30, ItemName:= GlobalLanguage, GuiName:= "Main"
classButton.Push(New Switch_Type1(257 , 74, 120, GuiName, InI["Reconnect"] , %GlobalLanguage% , "12 Bold", TColor,,2,"242424", "ConfigHotkeys"))
Gui, Main:Add, Text, x0 y30 w480 Right c569cd6 +BackgroundTrans, % VersionType
if(VersionType == "OTServer"){
English     := "Choose the Client:"
Portuguese  := "Escolha o Client:"
Gui, Main:Add, Text, x160 y30 cWhite +BackgroundTrans, % %GlobalLanguage%
English     := "Find"
Portuguese  := "Pesquisar"
classButton.Push(New Button_Type_1(270, 26 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 12 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "FindClientScreen", Roundness:=3 ) )
English     := "Click Find"
Portuguese  := "Clique Pesquisar"
Gui, Main:Add, Text, x35 y0 w114 c00c000  +BackgroundTrans vWindowTitle, % %GlobalLanguage%
Gui, Main:Add, Text, x360 y30 w50 c00c000  +BackgroundTrans vLoopMS
}
if (VersionType == "OTServer" || userData.autoHuntActive == 1){
CreateAutoHuntScreen()
CreateAutoHuntConfigurationScreen()
} else {
English     := "Acquire more days to use Auto Hunt"
Portuguese  := "Compre mais dias para usar o Auto Hunt"
Gui, Main:Add, Text, x0 y77 w480 cRed +BackgroundTrans Right, % %GlobalLanguage%
}
English     := "Healer|Combo|Extras|Split Loot"
Portuguese  := "Curas|Combo|Extras|Divisor de Loot"
classButton["MainTab"]:=(New Tabs_Type_1_4(5,100,120,45, GColor := "242424", Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 12 " Bold" , Font_Color := "fefefe" , "Main", Label := "MainTabsSwap" , Roundness:=22))
Gui, Healer:New, +parentMain -caption -DPIScale
Gui, Healer:Color,%GColor1%,%GColor2%
Gui, Healer:Font, c569cd6
Gui, Healer:Font, bold, Tahoma
Gui, Combo:New, +parentMain -caption -DPIScale
Gui, Combo:Color,%GColor1%,%GColor2%
Gui, Combo:Font, c569cd6
Gui, Combo:Font, bold, Tahoma
Gui, ComboConfig:New, +parentCombo -caption -DPIScale
Gui, ComboConfig:Color,%GColor1%,%GColor2%
Gui, ComboConfig:Font, c569cd6
Gui, ComboConfig:Font, bold, Tahoma
Gui, FirstCombo:New, +parentCombo -caption -DPIScale
Gui, FirstCombo:Color,%GColor1%,%GColor2%
Gui, FirstCombo:Font, c569cd6
Gui, FirstCombo:Font, bold, Tahoma
Gui, SecondCombo:New, +parentCombo -caption -DPIScale
Gui, SecondCombo:Color,%GColor1%,%GColor2%
Gui, SecondCombo:Font, c569cd6
Gui, SecondCombo:Font, bold, Tahoma
Gui, ThirdCombo:New, +parentCombo -caption -DPIScale
Gui, ThirdCombo:Color,%GColor1%,%GColor2%
Gui, ThirdCombo:Font, c569cd6
Gui, ThirdCombo:Font, bold, Tahoma
Gui, Extras:New, +parentMain -caption -DPIScale
Gui, Extras:Color,%GColor1%,%GColor2%
Gui, Extras:Font, c569cd6
Gui, Extras:Font, bold, Tahoma
Gui, General:New, +parentExtras -caption -DPIScale
Gui, General:Color,%GColor1%,%GColor2%
Gui, General:Font, c569cd6
Gui, General:Font, bold, Tahoma
Gui, Smart:New, +parentExtras -caption -DPIScale
Gui, Smart:Color,%GColor1%,%GColor2%
Gui, Smart:Font, c569cd6
Gui, Smart:Font, bold, Tahoma
Gui, PvP:New, +parentExtras -caption -DPIScale
Gui, PvP:Color,%GColor1%,%GColor2%
Gui, PvP:Font, c569cd6
Gui, PvP:Font, bold, Tahoma
Gui, Training:New, +parentExtras -caption -DPIScale
Gui, Training:Color,%GColor1%,%GColor2%
Gui, Training:Font, c569cd6
Gui, Training:Font, bold, Tahoma
if(VersionType == "OTServer"){
English     := "General|Smart|PvP/OT|Training"
Portuguese  := "Geral|Smart|PvP|Treino"
} else {
English     := "General|Smart|PvP|Training"
Portuguese  := "Geral|Smart|PvP|Treino"
}
classButton["ExtrasTab"]:=(New Tabs_Type_1_4(30,0,110,33, GColor := "242424", Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 12 " Bold" , Font_Color := "fefefe" , "Extras", Label := "ExtrasTabs1Swap" , Roundness:=15))
Gui, SplitLoot:New, +parentMain -caption -DPIScale
Gui, SplitLoot:Color,%GColor1%,%GColor2%
Gui, SplitLoot:Font, c569cd6
Gui, SplitLoot:Font, bold, Tahoma
Gui, HighPriority:New, +parentHealer hwndHighPriorityID -caption -DPIScale
Gui, HighPriority:Color,%GColor1%,%GColor2%
Gui, HighPriority:Font, c569cd6
Gui, HighPriority:Font, bold, Tahoma
Gui, OTServerHighPriority:New, +parentHighPriority hwndHighPriorityID -caption -DPIScale
Gui, OTServerHighPriority:Color,%GColor1%,%GColor2%
Gui, OTServerHighPriority:Font, c569cd6
Gui, OTServerHighPriority:Font, bold, Tahoma
Gui, EnergyRingHighPriority:New, +parentHighPriority hwndHighPriorityID -caption -DPIScale
Gui, EnergyRingHighPriority:Color,%GColor1%,%GColor2%
Gui, EnergyRingHighPriority:Font, c569cd6
Gui, EnergyRingHighPriority:Font, bold, Tahoma
Gui, SSAHighPriority:New, +parentHighPriority hwndHighPriorityID -caption -DPIScale
Gui, SSAHighPriority:Color,%GColor1%,%GColor2%
Gui, SSAHighPriority:Font, c569cd6
Gui, SSAHighPriority:Font, bold, Tahoma
Gui, KnightHighPriority:New, +parentHighPriority hwndHighPriorityID -caption -DPIScale
Gui, KnightHighPriority:Color,%GColor1%,%GColor2%
Gui, KnightHighPriority:Font, c569cd6
Gui, KnightHighPriority:Font, bold, Tahoma
Gui, DruidSorcererHighPriority:New, +parentHighPriority hwndHighPriorityID -caption -DPIScale
Gui, DruidSorcererHighPriority:Color,%GColor1%,%GColor2%
Gui, DruidSorcererHighPriority:Font, c569cd6
Gui, DruidSorcererHighPriority:Font, bold, Tahoma
Gui, Potions:New, +parentHealer -caption -DPIScale
Gui, Potions:Color,%GColor1%,%GColor2%
Gui, Potions:Font, c569cd6
Gui, Potions:Font, bold, Tahoma
Gui, HealingSpells:New, +parentHealer -caption -DPIScale
Gui, HealingSpells:Color,%GColor1%,%GColor2%
Gui, HealingSpells:Font, c569cd6
Gui, HealingSpells:Font, bold, Tahoma
Gui, KnightHealingSpells:New, +parentHealingSpells -caption -DPIScale
Gui, KnightHealingSpells:Color,%GColor1%,%GColor2%
Gui, KnightHealingSpells:Font, c569cd6
Gui, KnightHealingSpells:Font, bold, Tahoma
Gui, KnightPaladinHealingSpells:New, +parentHealingSpells -caption -DPIScale
Gui, KnightPaladinHealingSpells:Color,%GColor1%,%GColor2%
Gui, KnightPaladinHealingSpells:Font, c569cd6
Gui, KnightPaladinHealingSpells:Font, bold, Tahoma
Gui, DruidHealingSpells:New, +parentHealingSpells -caption -DPIScale
Gui, DruidHealingSpells:Color,%GColor1%,%GColor2%
Gui, DruidHealingSpells:Font, c569cd6
Gui, DruidHealingSpells:Font, bold, Tahoma
Gui, DruidSorcererHealingSpells:New, +parentHealingSpells -caption -DPIScale
Gui, DruidSorcererHealingSpells:Color,%GColor1%,%GColor2%
Gui, DruidSorcererHealingSpells:Font, c569cd6
Gui, DruidSorcererHealingSpells:Font, bold, Tahoma
English     := "High Priority|Potions|Healing Spell"
Portuguese  := "Alta Prioridade|Po" Chr(231) Chr(245) "es|Magias de Cura"
classButton["HealerTab"]:=(New Tabs_Type_1_3(80,0,110,33, GColor := "242424", Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 12 " Bold" , Font_Color := "fefefe" , "Healer", Label := "HealerTabs1Swap" , Roundness:=15))
cx:=10, cy:=0, ItemName:= "HealthFood", GuiName:= "HighPriority"
New Group_Box(cx, cy, 150, 70, GuiName, "Health Food")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+1Field|HP -|Red"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=0, ItemName:= "ManaFood", GuiName:= "HighPriority"
New Group_Box(cx, cy, 150, 70, GuiName, "Mana Food")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+1Field|MP -|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
if(VersionType == "OTServer"){
cx:=0, cy:=0, ItemName:= "OldUtamoVita", GuiName:= "OTServerHighPriority"
New Group_Box(cx, cy, 150, 90, GuiName, "Old Utamo Vita")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|MagicShield|HP -|Red|MP +|569cd6"))
classButton.Push(New IMG_Switch( cx+5, cy+89, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
English     := "Always Active"
Portuguese  := "Sempre Ativo"
Gui, %GuiName%:Add, Text, % "x" cx+22 " y" cy + 88 " cWhite +BackgroundTrans", % %GlobalLanguage%
}
cx:=0, cy:=0, ItemName:= "EnergyRing", GuiName:= "EnergyRingHighPriority"
New Group_Box(cx, cy, 150, 110, GuiName, "Energy Ring")
classButton.EnergyRing := New Switch_Type2(cx+87 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb")
classButton.Push(New IMG_Button( cx+123, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config", "HkEnergyRing|HotkeySmall"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|EnergyRing|HP -|Red|HP +|Red|MP +|569cd6"))
classButton.Push(New IMG_Switch( cx+5, cy+104, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " w40 Right ced2121 +BackgroundTrans", % "HP On"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y+5 w40 Right ced2121 +BackgroundTrans", % "HP Off"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y+5 w40 Right c569cd6 +BackgroundTrans", % "MP Off"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "8", % InI[ItemName][8] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 82 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
English     := "Always Equipped"
Portuguese  := "Sempre Equipado"
Gui, %GuiName%:Add, Text, % "x" cx+22 " y" cy + 103 " cWhite +BackgroundTrans", % %GlobalLanguage%
cx:=0, cy:=0, ItemName:= "UtamoTempo", GuiName:= "KnightHighPriority"
New Group_Box(cx, cy, 150, 110, GuiName, "Utamo Tempo")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|MagicShield|HP -|Red|MP +|569cd6"))
classButton.Push(New IMG_Switch( cx+5, cy+104, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
English     := "Always Equipped"
Portuguese  := "Sempre Equipado"
Gui, %GuiName%:Add, Text, % "x" cx+22 " y" cy + 103 " cWhite +BackgroundTrans", % %GlobalLanguage%
cx:=0, cy:=0, ItemName:= "SSA", GuiName:= "SSAHighPriority"
New Group_Box(cx, cy, 150, 110, GuiName, "SSA")
classButton.SSA := New Switch_Type2(cx+87 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb")
classButton.Push(New IMG_Button( cx+123, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config", "HkSSA|HotkeySmall"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|SSA|HP -|Red|HP +|Red"))
classButton.Push(New IMG_Switch( cx+5, cy+104, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
English     := "Always Equipped"
Portuguese  := "Sempre Equipado"
Gui, %GuiName%:Add, Text, % "x" cx+22 " y" cy + 103 " cWhite +BackgroundTrans", % %GlobalLanguage%
cx:=0, cy:=0, ItemName:= "UtamoVita", GuiName:= "DruidSorcererHighPriority"
New Group_Box(cx, cy, 470, 115, GuiName, "New Utamo Vita")
classButton.UtamoVita := New Switch_Type2(cx+400 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb")
classButton.Push(New IMG_Button( cx+443, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config", "HkUtamoVita|Hotkey"))
classButton.Push(New IMG_Button( cx+440, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|UtamoVita|HP -|Red|MP +|569cd6"))
English     := "Current Configuration"
Portuguese  := "Configura" Chr(231) Chr(227) "o Atual"
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 26, % "HBITMAP:*" PNG.TxtArea
Gui, %GuiName%:Add, Text, % "x" cx+9 " y" cy + 30 " w130 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx+9 " y" cy + 58 " w130 cWhite BackgroundTrans v" ItemName "9", % "--------------------------- --------------------------- ---------------------------"
Gui, %GuiName%:Add, Picture, % "x" cx + 150 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 190 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % "----------------------------"
Gui, %GuiName%:Add, Text, % "x" cx + 190 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % "----------------------------"
Gui, %GuiName%:Add, Text, % "x" cx + 152 " y" cy + 62 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
Gui, %GuiName%:Add, Picture, % "x" cx + 150 " y" cy + 80 " +BackgroundTrans hwndGuiCancelUtamoVita", % "HBITMAP:*" PNG["CancelUtamoVita"]
English     := "Break with"
Portuguese  := "Quebrar com"
Gui, %GuiName%:Add, Text, % "x" cx + 190 " y" cy + 82 " cWhite  +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 190 " y+5 ced2121  +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "7", "----------------------------"
Gui, %GuiName%:Add, Text, % "x" cx + 152 " y" cy + 117 " cWhite +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "8", % HotkeyRemane(InI[ItemName][8])
Gui, %GuiName%:Add, Picture, % "x" cx + 310 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG["ManaShieldPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 350 " y" cy + 29 " cWhite +BackgroundTrans", % "Mana Shield"
Gui, %GuiName%:Add, Text, % "x" cx + 350 " y" cy + 41 " cWhite +BackgroundTrans", % "Potion"
Gui, %GuiName%:Add, Text, % "x" cx + 312 " y" cy + 62 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "11", % HotkeyRemane(InI[ItemName][11])
classButton.Push(New IMG_Switch( cx+310, cy+89, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 10))
English     := "Renew with Potion during Cooldown if necessary"
Portuguese  := "Renovar com Potion durante o Cooldown se necess" Chr(225) "rio"
Gui, %GuiName%:Add, Text, % "x" cx+327 " y" cy + 88 " cWhite w120 +BackgroundTrans", % %GlobalLanguage%
cx:=10, cy:=240, ItemName:= "SwapRing", GuiName:= "HighPriority"
New Group_Box(cx, cy, 230, 120, GuiName, "Swap Ring")
classButton.SwapRing := New Switch_Type2(cx+160 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424","ProfileComb")
classButton.Push(New IMG_Button( cx+203, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config", "HkSwapRing|Hotkey"))
If (Ini[ItemName][11] != 1 || Vocation == "Knight" || Vocation == "Paladin")
classButton.Push(New IMG_Button( cx+200, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Swap|HP -|Red|HP +|Red|Rings"))
Else
classButton.Push(New IMG_Button( cx+200, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Swap|MP -|569cd6|MP +|569cd6|Rings"))
classButton.Push(New IMG_Switch( cx+5, cy+117, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 30 " +BackgroundTrans hwndGuiRingTank", % "HBITMAP:*" PNG["NoRing"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 28 " w75 Left cWhite +BackgroundTrans", % "Tank Ring"
If (Ini[ItemName][11] != 1 || Vocation == "Knight" || Vocation == "Paladin")
Gui, %GuiName%:Add, Text, % "x+2 w20 Right ced2121 +BackgroundTrans vSwapRingPointsLess", % "HP"
Else
Gui, %GuiName%:Add, Text, % "x+2 w20 Right c569cd6 +BackgroundTrans vSwapRingPointsLess", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 cWhite +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 75 " +BackgroundTrans hwndGuiRingMain", % "HBITMAP:*" PNG["NoRing"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 73 " w75 Left cWhite +BackgroundTrans", % "Main Ring"
If (Ini[ItemName][11] != 1 || Vocation == "Knight" || Vocation == "Paladin")
Gui, %GuiName%:Add, Text, % "x+2 w20 Right ced2121 +BackgroundTrans vSwapRingPointsMore", % "HP"
Else
Gui, %GuiName%:Add, Text, % "x+2 w20 Right c569cd6 +BackgroundTrans vSwapRingPointsMore", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 cWhite +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "8", % HotkeyRemane(InI[ItemName][8])
English     := "Tank Ring Always Equipped"
Portuguese  := "Tank Ring Sempre Equipado"
Gui, %GuiName%:Add, Text, % "x" cx+22 " y" cy + 118 " cWhite +BackgroundTrans", % %GlobalLanguage%
cx:=250, cy:=240, ItemName:= "SwapAmulet", GuiName:= "HighPriority"
New Group_Box(cx, cy, 230, 120, GuiName, "Swap Amulet")
classButton.SwapAmulet := New Switch_Type2(cx+160 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb")
classButton.Push(New IMG_Button( cx+203, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config", "HkSwapAmulet|Hotkey"))
If (Ini[ItemName][11] != 1 || Vocation == "Knight" || Vocation == "Paladin")
classButton.Push(New IMG_Button( cx+200, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Swap|HP -|Red|HP +|Red|Amulets"))
Else
classButton.Push(New IMG_Button( cx+200, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Swap|MP -|569cd6|MP +|569cd6|Amulets"))
classButton.Push(New IMG_Switch( cx+5, cy+117, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 30 " +BackgroundTrans hwndGuiAmuletTank", % "HBITMAP:*" PNG["NoAmulet"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 28 " w75 Left cWhite +BackgroundTrans", % "Tank Amulet"
If (Ini[ItemName][11] != 1 || Vocation == "Knight" || Vocation == "Paladin")
Gui, %GuiName%:Add, Text, % "x+2 w20 Right ced2121 +BackgroundTrans vSwapAmuletPointsLess", % "HP"
Else
Gui, %GuiName%:Add, Text, % "x+2 w20 Right c569cd6 +BackgroundTrans vSwapAmuletPointsLess", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 cWhite +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 75 " +BackgroundTrans hwndGuiAmuletMain", % "HBITMAP:*" PNG["NoAmulet"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 73 " w75 Left cWhite +BackgroundTrans", % "Main Amulet"
If (Ini[ItemName][11] != 1 || Vocation == "Knight" || Vocation == "Paladin")
Gui, %GuiName%:Add, Text, % "x+2 w20 Right ced2121 +BackgroundTrans vSwapAmuletPointsMore", % "HP"
Else
Gui, %GuiName%:Add, Text, % "x+2 w20 Right c569cd6 +BackgroundTrans vSwapAmuletPointsMore", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 cWhite +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "8", % HotkeyRemane(InI[ItemName][8])
English     := "Tank Amulet Always Equipped"
Portuguese  := "Tank Amulet Sempre Equipado"
Gui, %GuiName%:Add, Text, % "x" cx+22 " y" cy + 118 " cWhite +BackgroundTrans", % %GlobalLanguage%
UH_PotionsScreen()
HealingSpellsScreen()
ComboScreen()
cx:=10, cy:=0, ItemName:= "Loot", GuiName:= "General"
English     := "Lootpicker"
Portuguese  := "Pegar Loot"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkLoot"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
if(VersionType == "OTServer" && InI[ItemName][6] == "1"){
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " w80 cWhite +BackgroundTrans v" ItemName "5", % "Exeta Loot"
} else {
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " w80 cWhite +BackgroundTrans v" ItemName "5", % "Delay: 100ms"
}
cx:=170, cy:=0, ItemName:= "EatFood", GuiName:= "General"
English     := "Eat Food"
Portuguese  := "Comer Food"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=0, ItemName:= "Haste", GuiName:= "General"
English     := "Keep Haste"
Portuguese  := "Haste Ativo"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Haste := New Switch_Type2(cx+87 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb")
classButton.Push(New IMG_Button( cx+123, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config", "HkKeepHaste|HotkeySmall"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=100, ItemName:= "CureParalyze", GuiName:= "General"
English     := "Cure Paralyze"
Portuguese  := "Curar Paralyze"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkCureParalyze"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans", % "Hk1:"
Gui, %GuiName%:Add, Text, % "x+5 w80 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans", % "Hk2:"
Gui, %GuiName%:Add, Text, % "x+5 w80 cWhite +BackgroundTrans v" ItemName "5", % HotkeyRemane(InI[ItemName][4])
English     := "Hk 1 Heal - Hk 2 Haste"
Portuguese  := "Hk 1 Cura - Hk 2 Haste"
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % %GlobalLanguage%
cx:=170, cy:=100, ItemName:= "CureCurse", GuiName:= "General"
English     := "Cure Curse"
Portuguese  := "Curar Curse"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=100, ItemName:= "CurePoison", GuiName:= "General"
English     := "Cure Poison"
Portuguese  := "Curar Poison"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=200, ItemName:= "SpecialPotion", GuiName:= "General"
New Group_Box(cx, cy, 150, 70, GuiName, "Special Potion")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Use again"
Portuguese  := "Usar se"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "when expire"
Portuguese  := "terminar"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=200, ItemName:= "Quiver", GuiName:= "General"
New Group_Box(cx, cy, 150, 70, GuiName, "Quiver")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkQuiver"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Equip when"
Portuguese  := "Equipar se"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "below 600x"
Portuguese  := "abaixo 600x"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans v" ItemName "5", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=200, ItemName:= "ChatOn", GuiName:= "General"
New Group_Box(cx, cy, 150, 70, GuiName, "Pause: Chat On")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Macro will pause"
Portuguese  := "Macro vai pausar"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans", % %GlobalLanguage%
English     := "with Chat On"
Portuguese  := "com o Chat On"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans", % %GlobalLanguage%
cx:=10, cy:=300, ItemName:= "AutoBless", GuiName:= "General"
New Group_Box(cx, cy, 150, 65, GuiName, "Auto Bless")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Use a"
Portuguese  := "Use uma"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans", % %GlobalLanguage%
English     := "!bless hotkey"
Portuguese  := "hotkey !bless"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=0, ItemName:= "TimedSpell1", GuiName:= "Smart"
New Group_Box(cx, cy, 150, 70, GuiName, "Timed Hotkey 1")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkTimedHotkey"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG["TimedSpell"]
English     := "Every: 100s "
Portuguese  := "Cada:  100s "
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans v" ItemName "5", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 42 " cWhite  +BackgroundTrans v" ItemName "6", % "CD: Healing "
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=0, ItemName:= "TimedSpell2", GuiName:= "Smart"
New Group_Box(cx, cy, 150, 70, GuiName, "Timed Hotkey 2")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkTimedHotkey"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG["TimedSpell"]
English     := "Every: 100s "
Portuguese  := "Cada:  100s "
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans v" ItemName "5", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 42 " cWhite  +BackgroundTrans v" ItemName "6", % "CD: Healing "
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=0, ItemName:= "TimedSpell3", GuiName:= "Smart"
New Group_Box(cx, cy, 150, 70, GuiName, "Timed Hotkey 3")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkTimedHotkey"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG["TimedSpell"]
English     := "Every: 100s "
Portuguese  := "Cada:  100s "
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans v" ItemName "5", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 42 " cWhite  +BackgroundTrans v" ItemName "6", % "CD: Healing "
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=110, ItemName:= "SmartCast1", GuiName:= "Smart"
New Group_Box(cx, cy, 150, 70, GuiName, "Smart Rune 1")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkSmartCast"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG.SmartRuna
English     := "Use HK at"
Portuguese  := "Usar HK na"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "mouse pos"
Portuguese  := "pos mouse"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=110, ItemName:= "SmartCast2", GuiName:= "Smart"
New Group_Box(cx, cy, 150, 70, GuiName, "Smart Rune 2")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkSmartCast"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG.SmartRuna
English     := "Use HK at"
Portuguese  := "Usar HK na"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "mouse pos"
Portuguese  := "pos mouse"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=110, ItemName:= "SmartCast3", GuiName:= "Smart"
New Group_Box(cx, cy, 150, 70, GuiName, "Smart Rune 3")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkSmartCast"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG.SmartRuna
English     := "Use HK at"
Portuguese  := "Usar HK na"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "mouse pos"
Portuguese  := "pos mouse"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=220, ItemName:= "MoveItems", GuiName:= "Smart"
English     := "Move Items"
Portuguese  := "Mover Itens"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkMoveItems"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Drag and "
Portuguese  := "Clique e"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "drop items"
Portuguese  := "Arraste itens"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=220, ItemName:= "MoveItemsBP", GuiName:= "Smart"
English     := "Move to BP"
Portuguese  := "Move pra BP"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkMoveItemsBP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Drag and "
Portuguese  := "Clique e"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "drop items"
Portuguese  := "Arraste itens"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=220, ItemName:= "MoveItemsMouse", GuiName:= "Smart"
English     := "Move to Mouse"
Portuguese  := "Move pro Mouse"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkMoveItemsMouse"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Drag and "
Portuguese  := "Clique e"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "drop items"
Portuguese  := "Arraste itens"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=0, ItemName:= "Dance", GuiName:= "PvP"
New Group_Box(cx, cy, 150, 70, GuiName, "Dance")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkDance"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans v" ItemName "5", % "Sleep: 100ms"
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=0, ItemName:= "GodFlower", GuiName:= "PvP"
New Group_Box(cx, cy, 150, 70, GuiName, "God Flower")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkGodFlower"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Throw at your"
Portuguese  := "Jogar na pos"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "mouse pos"
Portuguese  := "do mouse"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=0, ItemName:= "AntiPush", GuiName:= "PvP"
New Group_Box(cx, cy, 150, 70, GuiName, "Anti Push")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkAntiPush"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Move items to"
Portuguese  := "Mover itens"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "your position"
Portuguese  := "no seu p" chr(233) ""
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
if(VersionType == "OTServer"){
cx:=10, cy:=110, ItemName:= "Ammo", GuiName:= "PvP"
New Group_Box(cx, cy, 150, 70, GuiName, "Ammo Slot")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkAmmo"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Equip again"
Portuguese  := "Equipar se"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "below 100x"
Portuguese  := "abaixo 100x"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans v" ItemName "5", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=110, ItemName:= "DragQuiver", GuiName:= "PvP"
New Group_Box(cx, cy, 150, 70, GuiName, "Drag Quiver")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkDragQuiver"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Drag again"
Portuguese  := "Arrasta se"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "below 600x"
Portuguese  := "abaixo 600x"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans v" ItemName "7", % %GlobalLanguage%
English     := "If not attacking"
Portuguese  := "Se n" Chr(227) "o estiver atacando"
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % %GlobalLanguage%
cx:=330, cy:=110, ItemName:= "GoldConverter", GuiName:= "PvP"
New Group_Box(cx, cy, 150, 70, GuiName, "Gold Converter")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Will convert"
Portuguese  := "Vai converter"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "gold and platinum"
Portuguese  := "gold e platinum"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "If not attacking"
Portuguese  := "Se n" Chr(227) "o estiver atacando"
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % %GlobalLanguage%
}
cx:=10, cy:=0, ItemName:= "SpellMax", GuiName:= "Training"
English     := "Spell MP Full"
Portuguese  := "Magia MP Full"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Use spell"
Portuguese  := "Usar magia"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "when MP full"
Portuguese  := "com MP cheio"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=0, ItemName:= "Weapon", GuiName:= "Training"
New Group_Box(cx, cy, 150, 70, GuiName, "Weapon Slot")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Equip again"
Portuguese  := "Equipar se"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
English     := "when empty"
Portuguese  := "acabar"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans ", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=0, ItemName:= "Targeting", GuiName:= "Training"
New Group_Box(cx, cy, 150, 70, GuiName, "Targeting")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+60, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkTargeting"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Seconds:  Disabled"
Portuguese  := "Segundos: Disabled"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans v" ItemName "5", % %GlobalLanguage%
English     := "Life %: Disabled"
Portuguese  := "Vida %: Disabled"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans v" ItemName "6", % %GlobalLanguage%
cx:=10, cy:=110, ItemName:= "ExerciseDummy", GuiName:= "Training"
English     := "Use Dummy"
Portuguese  := "Usar Dummy"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.ExerciseDummy := New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb")
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkExerciseDummy"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
if(VersionType == "OTServer"){
English     := "Use it every"
Portuguese  := "Usa a cada"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans", % %GlobalLanguage%
English     := % InI[ItemName][9] " seconds"
Portuguese  := % InI[ItemName][9] " segundos"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans v" ItemName "9", % %GlobalLanguage%
} else {
English     := "Charges: 14400x"
Portuguese  := "Cargas:  14400x"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans v" ItemName "5", % %GlobalLanguage%
English     := "Qty: 100x"
Portuguese  := "Qtd: 100x"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans v" ItemName "6", % %GlobalLanguage%
}
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=110, ItemName:= "AntiAfk", GuiName:= "Training"
New Group_Box(cx, cy, 150, 70, GuiName, "Anti AFK")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
English     := "Rotates every"
Portuguese  := "Gira a cada"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans", % %GlobalLanguage%
English     := "14 minutes"
Portuguese  := "14 minutos"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans", % %GlobalLanguage%
English     := "Will Rotate with Ctrl Key"
Portuguese  := "Gira com a tecla Control"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % %GlobalLanguage%
cx:=330, cy:=110, ItemName:= "PairofSoftBoots", GuiName:= "Training"
New Group_Box(cx, cy, 150, 70, GuiName, "Equip Softboots")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk"))
English     := "Keeps soft"
Portuguese  := "Deixa a soft"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans", % %GlobalLanguage%
English     := "equipped."
Portuguese  := "equipada"
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=220, ItemName:= "TrainSpells", GuiName:= "Training"
English     := "Train Spells"
Portuguese  := "Treinar Magias"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkTrainSpells"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans", % "Hk1:"
Gui, %GuiName%:Add, Text, % "x+5 w80 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 40 " cWhite  +BackgroundTrans", % "Hk2:"
Gui, %GuiName%:Add, Text, % "x+5 w80 cWhite +BackgroundTrans v" ItemName "5", % HotkeyRemane(InI[ItemName][4])
English     := "Hk 1 Heal - Hk 2 Support"
Portuguese  := "Hk 1 Cura - Hk 2 Suporte"
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % %GlobalLanguage%
cx:=170, cy:=220, ItemName:= "TakeFromFloor", GuiName:= "Training"
English     := "Take from Floor"
Portuguese  := "Pegar do Ch" Chr(227) "o"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|HkTakeFromFloor"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG["TakeFromFloor"]
English     := "Every: 100s "
Portuguese  := "Cada:  100s "
Gui, %GuiName%:Add, Text, % "x" cx + 40 " y" cy + 25 " cWhite  +BackgroundTrans v" ItemName "4", % %GlobalLanguage%
English     := "Below your character"
Portuguese  := "Embaixo do seu char"
Gui, %GuiName%:Add, Text, % "x" cx + 5  " y" cy + 67 " cWhite  +BackgroundTrans", % %GlobalLanguage%
cx:=0, cy:=0, ItemName:= "SplitLoot", GuiName:= "SplitLoot"
Gui, %GuiName%:Font, s12
English     := "How to use Loot Split"
Portuguese  := "Como usar o Divisor de Loot"
Gui, %GuiName%:Add, Text, % "x" cx + 150 " y10 c569cd6 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Font, s10
English     := "1 - Go to Party Hunt and select 'Copy to Clipboard'"
Portuguese  := "1 - No Party Hunt selecione 'Copy to Clipboard'"
Gui, %GuiName%:Add, Text, % "xp-90 y+10 cWhite  +BackgroundTrans", % %GlobalLanguage%
English     := "2 - Click 'Analyze' and results will appear below"
Portuguese  := "2 - Clique em 'Analisar' e os resultados aparecem abaixo"
Gui, %GuiName%:Add, Text, % "xp    y+5 cWhite  +BackgroundTrans",  % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "xp y+10 +BackgroundTrans", % "HBITMAP:*" PNG.SplitLootInfo
English     := "Analyze"
Portuguese  := "Analisar"
classButton.Push(New Button_Type_1( 70  , 200 , w := 350 , h := 30, Button_Color := "865ABB" , Button_Background_Color := "242424" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 13 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , "SplitLoot", Label := "LootAnalyser", Roundness:=3 ) )
If (VersionType == "OTServer") {
Gui, NewOldUtamoHighPriority:New, +parentHighPriority hwndHighPriorityID -caption
Gui, NewOldUtamoHighPriority:Color,%GColor1%,%GColor2%
Gui, NewOldUtamoHighPriority:Font, c569cd6
Gui, NewOldUtamoHighPriority:Font, bold, Tahoma
cx:=0, cy:=0, GuiName:= "NewOldUtamoHighPriority"
New Group_Box(cx, cy, 130, 35, GuiName, "Utamo Vita")
classButton.Push(New Switch_Type2(cx+85 , cy+29, 35, GuiName, InI["OTServer"] , "Active" , "12 Bold", TColor,,4,"333333", "ProfileComb"))
Gui, %GuiName%:Add, Text, % "x" cx+17 " y" cy+32 " cWhite  +BackgroundTrans", New / Old
Gui, NewOldUtamoHighPriority: Show,Hide x340 y35 w130 h65, High Priority
}
Gui, Healer:    Show,     x0 y150 w490 h440, Healer
Gui, Combo:     Show,Hide x0 y150 w490 h440, Combo
Gui, Extras:    Show,Hide x0 y150 w490 h440, Extras
Gui, SplitLoot: Show,Hide x0 y150 w490 h440, Split Loot
Gui, HighPriority:               Show,     x0   y50   w490 h390, High Priority
Gui, OTServerHighPriority:       Show,Hide x170 y100  w150 h130, High Priority
Gui, DruidSorcererHighPriority:  Show,     x10  y95   w480 h140, High Priority
Gui, EnergyRingHighPriority:     Show,     x10  y100  w150 h130, High Priority
Gui, KnightHighPriority:         Show,     x170 y100  w150 h130, High Priority
Gui, SSAHighPriority:            Show,     x330 y100  w150 h130, High Priority
Gui, Potions:                    Show,Hide x0   y50  w490 h390, Potions
Gui, HealingSpells:              Show,Hide x0   y50  w490 h390, Healing Spells
Gui, KnightHealingSpells:        Show,Hide x330 y110 w150 h90 , Healing Spells
Gui, KnightPaladinHealingSpells: Show,Hide x10  y110 w320 h90 , Healing Spells
Gui, DruidHealingSpells:         Show,Hide x10  y210 w480 h180, Healing Spells
Gui, DruidSorcererHealingSpells: Show,Hide x10  y110 w150 h90 , Healing Spells
Gui, ComboConfig:                Show,     x0   y35  w490 h405, Combo
Gui, FirstCombo:                 Show,Hide x0   y35  w490 h405, Combo
Gui, SecondCombo:                Show,Hide x0   y35  w490 h405, Combo
Gui, ThirdCombo:                 Show,Hide x0   y35  w490 h405, Combo
Gui, General:                    Show,     x0   y50  w490 h390, Extras
Gui, Smart:                      Show,Hide x0   y50  w490 h390, Extras
Gui, PvP:                        Show,Hide x0   y50  w490 h390, Extras
Gui, Training:                   Show,Hide x0   y50  w490 h390, Extras
Gui, Healer:+LastFound
WinSet, Top
Gui, HighPriority:+LastFound
WinSet, Top
PopulateFields()
Tabs.Main:={Tab1: "Healer",Tab2: "Combo",Tab3: "Extras",Tab4: "SplitLoot",Last: "Tab1"}
MainTabsSwap(){
Gui Config:+LastFoundExist
If WinExist() {
English     := "Please, click Update button before doing anything else."
Portuguese  := "Por favor, clique no botao Update antes de realizar outras a" Chr(231) Chr(245) "es."
MsgBox, 4144, Update Error, % %GlobalLanguage%
Return
}
Gui, Config:Destroy
Suspend, Off
If (A_GuiControl="Tab1" && A_GuiControl != Tabs.Main.Last) {
Gui, Healer:Show
Gui, % Tabs.Main[Tabs.Main.Last] ":Hide"
Tabs.Main.Last:=A_GuiControl
classButton["MainTab"].Draw_Active(A_GuiControl)
} Else if(A_GuiControl="Tab2" && A_GuiControl != Tabs.Main.Last) {
Gui, Combo:Show
Gui, % Tabs.Main[Tabs.Main.Last] ":Hide"
Tabs.Main.Last:=A_GuiControl
classButton["MainTab"].Draw_Active(A_GuiControl)
} else if(A_GuiControl="Tab3" && A_GuiControl != Tabs.Main.Last){
Gui, Extras:Show
Gui, % Tabs.Main[Tabs.Main.Last] ":Hide"
Tabs.Main.Last:=A_GuiControl
classButton["MainTab"].Draw_Active(A_GuiControl)
} else if(A_GuiControl="Tab4" && A_GuiControl != Tabs.Main.Last){
Gui, SplitLoot:Show
Gui, % Tabs.Main[Tabs.Main.Last] ":Hide"
Tabs.Main.Last:=A_GuiControl
classButton["MainTab"].Draw_Active(A_GuiControl)
}
}
Tabs.Healer:={Tab1: "HighPriority",Tab2: "Potions",Tab3: "HealingSpells", Last: "Tab1"}
HealerTabs1Swap(){
Gui Config:+LastFoundExist
if WinExist(){
English     := "Please, click Update button before doing anything else."
Portuguese  := "Por favor, clique no botao Update antes de realizar outras a" Chr(231) Chr(245) "es."
MsgBox, 4144, Update Error, % %GlobalLanguage%
Return
}
Gui, Config:Destroy
Suspend, Off
if (A_GuiControl="Tab1" && A_GuiControl != Tabs.Healer.Last){
Gui, HighPriority:Show
Gui, % Tabs.Healer[Tabs.Healer.Last] ":Hide"
Tabs.Healer.Last:=A_GuiControl
classButton["HealerTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab2" && A_GuiControl != Tabs.Healer.Last){
Gui, Potions:Show
Gui, % Tabs.Healer[Tabs.Healer.Last] ":Hide"
Tabs.Healer.Last:=A_GuiControl
classButton["HealerTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab3" && A_GuiControl != Tabs.Healer.Last){
Gui, HealingSpells:Show
Gui, % Tabs.Healer[Tabs.Healer.Last] ":Hide"
Tabs.Healer.Last:=A_GuiControl
classButton["HealerTab"].Draw_Active(A_GuiControl)
}
}
Tabs.Combo:={Tab1: "ComboConfig", Tab2: "FirstCombo",Tab3: "SecondCombo",Tab4: "ThirdCombo", Last: "Tab1"}
ComboTabs1Swap(){
Gui Config:+LastFoundExist
if WinExist(){
English     := "Please, click Update button before doing anything else."
Portuguese  := "Por favor, clique no botao Update antes de realizar outras a" Chr(231) Chr(245) "es."
MsgBox, 4144, Update Error, % %GlobalLanguage%
Return
}
Gui, Config:Destroy
Suspend, Off
if (A_GuiControl="Tab1" && A_GuiControl != Tabs.Combo.Last){
Gui, ComboConfig:Show
Gui, % Tabs.Combo[Tabs.Combo.Last] ":Hide"
Tabs.Combo.Last:=A_GuiControl
classButton["ComboTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab2" && A_GuiControl != Tabs.Combo.Last){
Gui, FirstCombo:Show
Gui, % Tabs.Combo[Tabs.Combo.Last] ":Hide"
Tabs.Combo.Last:=A_GuiControl
classButton["ComboTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab3" && A_GuiControl != Tabs.Combo.Last){
Gui, SecondCombo:Show
Gui, % Tabs.Combo[Tabs.Combo.Last] ":Hide"
Tabs.Combo.Last:=A_GuiControl
classButton["ComboTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab4" && A_GuiControl != Tabs.Combo.Last){
Gui, ThirdCombo:Show
Gui, % Tabs.Combo[Tabs.Combo.Last] ":Hide"
Tabs.Combo.Last:=A_GuiControl
classButton["ComboTab"].Draw_Active(A_GuiControl)
}
}
Tabs.Extras:={Tab1: "General",Tab2: "Smart",Tab3: "PvP",Tab4: "Training", Last: "Tab1"}
ExtrasTabs1Swap(){
Gui Config:+LastFoundExist
if WinExist(){
English     := "Please, click Update button before doing anything else."
Portuguese  := "Por favor, clique no botao Update antes de realizar outras a" Chr(231) Chr(245) "es."
MsgBox, 4144, Update Error, % %GlobalLanguage%
Return
}
Gui, Config:Destroy
Suspend, Off
if (A_GuiControl="Tab1" && A_GuiControl != Tabs.Extras.Last){
Gui, General:Show
Gui, % Tabs.Extras[Tabs.Extras.Last] ":Hide"
Tabs.Extras.Last:=A_GuiControl
classButton["ExtrasTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab2" && A_GuiControl != Tabs.Extras.Last){
Gui, Smart:Show
Gui, % Tabs.Extras[Tabs.Extras.Last] ":Hide"
Tabs.Extras.Last:=A_GuiControl
classButton["ExtrasTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab3" && A_GuiControl != Tabs.Extras.Last){
Gui, PvP:Show
Gui, % Tabs.Extras[Tabs.Extras.Last] ":Hide"
Tabs.Extras.Last:=A_GuiControl
classButton["ExtrasTab"].Draw_Active(A_GuiControl)
} else if (A_GuiControl="Tab4" && A_GuiControl != Tabs.Extras.Last){
Gui, Training:Show
Gui, % Tabs.Extras[Tabs.Extras.Last] ":Hide"
Tabs.Extras.Last:=A_GuiControl
classButton["ExtrasTab"].Draw_Active(A_GuiControl)
}
}
UH_PotionsScreen(){
Global
cx:=10, cy:=0, ItemName:= "FirstHealthPotion", GuiName:= "Potions"
English     := "Priority 1"
Portuguese  := "Prioridade 1"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|HP -|Red|PNGHP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiFirstHealthPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=0, ItemName:= "FirstManaPotion", GuiName:= "Potions"
English     := "Priority 2"
Portuguese  := "Prioridade 2"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|MP -|569cd6|PNGMP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiFirstManaPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=95, ItemName:= "SecondHealthPotion", GuiName:= "Potions"
English     := "Priority 3"
Portuguese  := "Prioridade 3"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|HP -|Red|PNGHP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiSecondHealthPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=95, ItemName:= "SecondManaPotion", GuiName:= "Potions"
English     := "Priority 4"
Portuguese  := "Prioridade 4"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|MP -|569cd6|PNGMP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiSecondManaPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=190, ItemName:= "ThirdHealthPotion", GuiName:= "Potions"
English     := "Priority 5"
Portuguese  := "Prioridade 5"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|HP -|Red|PNGHP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiThirdHealthPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=190, ItemName:= "ThirdManaPotion", GuiName:= "Potions"
English    := "Priority 6"
Portuguese  := "Prioridade 6"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|MP -|569cd6|PNGMP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiThirdManaPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=10, cy:=285, ItemName:= "FourthHealthPotion", GuiName:= "Potions"
English     := "Priority 7"
Portuguese  := "Prioridade 7"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|HP -|Red|PNGHP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiFourthHealthPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=285, ItemName:= "FourthManaPotion", GuiName:= "Potions"
English     := "Priority 8"
Portuguese  := "Prioridade 8"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Potion|MP -|569cd6|PNGMP"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans hwndGuiFourthManaPotion", % "HBITMAP:*" PNG["NoPotion"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
}
cx:=330, cy:=0, ItemName:= "UHRune", GuiName:= "Potions"
New Group_Box(cx, cy, 150, 90, GuiName, "UH Rune 1")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Party|HP -|Red|MP +|569cd6|UH"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
PartyListButton.Push(New IMG_Switch( cx+5, cy+90, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
English     := "Party List Opened?"
Portuguese  := "Party List Aberta?"
Gui, %GuiName%:Add, Text, % "x" cx + 25 " yp c569cd6 +BackgroundTrans", % %GlobalLanguage%
cx:=330, cy:=120, ItemName:= "UHRuneTwo", GuiName:= "Potions"
New Group_Box(cx, cy, 150, 90, GuiName, "UH Rune 2")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Party|HP -|Red|MP +|569cd6|UH"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG["UHRune"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 35 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
PartyListButton.Push(New IMG_Switch( cx+5, cy+90, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
English     := "Party List Opened?"
Portuguese  := "Party List Aberta?"
Gui, %GuiName%:Add, Text, % "x" cx + 25 " yp c569cd6 +BackgroundTrans", % %GlobalLanguage%
HealingSpellsScreen(){
Global
cx:=10, cy:=0, ItemName:= "FirstHealing", GuiName:= "HealingSpells"
English     := "Critical Healing"
Portuguese  := "Cura Cr" Chr(237) "tica"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+2Field|HP -|Red|MP +|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG.HealingSpells
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=170, cy:=0, ItemName:= "SecondHealing", GuiName:= "HealingSpells"
English     := "Medium Healing"
Portuguese  := "Cura M" Chr(233) "dia"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+2Field|HP -|Red|MP +|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG.HealingSpells
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=330, cy:=0, ItemName:= "ThirdHealing", GuiName:= "HealingSpells"
English     := "Light Healing"
Portuguese  := "Cura Leve"
New Group_Box(cx, cy, 150, 70, GuiName, %GlobalLanguage%)
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+2Field|HP -|Red|MP +|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG.HealingSpells
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=0, cy:=0, ItemName:= "ExuraMaxVita", GuiName:= "DruidSorcererHealingSpells"
New Group_Box(cx, cy, 150, 70, GuiName, "Exura Max Vita")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+2Field|HP -|Red|MP +|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=0, cy:=10, ItemName:= "ExuraGranSio", GuiName:= "DruidHealingSpells"
New Group_Box(cx, cy, 150, 90, GuiName, "Exura Gran Sio")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Party|HP -|Red|MP +|569cd6|Sio"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
PartyListButton.Push(New IMG_Switch( cx+5, cy+90, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
English     := "Party List Opened?"
Portuguese  := "Party List Aberta?"
Gui, %GuiName%:Add, Text, % "x" cx + 25 " yp c569cd6 +BackgroundTrans", % %GlobalLanguage%
cx:=160, cy:=10, ItemName:= "ExuraSio", GuiName:= "DruidHealingSpells"
New Group_Box(cx, cy, 150, 90, GuiName, "Exura Sio 1 Prio")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|PartySio|HP -|Red|MP +|569cd6|Sio"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
PartyListButton.Push(New IMG_Switch( cx+5, cy+90, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
English     := "Party List Opened?"
Portuguese  := "Party List Aberta?"
Gui, %GuiName%:Add, Text, % "x" cx + 25 " yp c569cd6 +BackgroundTrans", % %GlobalLanguage%
cx:=320, cy:=10, ItemName:= "ExuraSioTwo", GuiName:= "DruidHealingSpells"
New Group_Box(cx, cy, 150, 90, GuiName, "Exura Sio 2 Last")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Party|HP -|Red|MP +|569cd6|Sio"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG["ExuraSio"]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
PartyListButton.Push(New IMG_Switch( cx+5, cy+90, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 7))
English     := "Party List Opened?"
Portuguese  := "Party List Aberta?"
Gui, %GuiName%:Add, Text, % "x" cx + 25 " yp c569cd6 +BackgroundTrans", % %GlobalLanguage%
cx:=0, cy:=0, ItemName:= "UturaGran", GuiName:= "KnightPaladinHealingSpells"
New Group_Box(cx, cy, 150, 70, GuiName, "Utura Gran")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+2Field|HP -|Red|MP +|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=160, cy:=0, ItemName:= "Utura", GuiName:= "KnightPaladinHealingSpells"
New Group_Box(cx, cy, 150, 70, GuiName, "Utura")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+2Field|HP -|Red|MP +|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
cx:=0, cy:=0, ItemName:= "ExuraGranIco", GuiName:= "KnightHealingSpells"
New Group_Box(cx, cy, 150, 70, GuiName, "Exura Gran Ico")
classButton.Push(New Switch_Type2(cx+115 , cy, 35, GuiName, InI[ItemName] , "Active" , "12 Bold", TColor,,3,"242424", "ProfileComb"))
classButton.Push(New IMG_Button( cx+120, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Hk+2Field|HP -|Red|MP +|569cd6"))
Gui, %GuiName%:Add, Picture, % "x" cx + 3 " y" cy + 25 " +BackgroundTrans", % "HBITMAP:*" PNG[ItemName]
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 27 " w20 Right ced2121 +BackgroundTrans", % "HP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "-"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "5", % InI[ItemName][5] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w20 Right c569cd6 +BackgroundTrans", % "MP"
Gui, %GuiName%:Add, Text, % "x+2 w9 Center cWhite +BackgroundTrans", % "+"
Gui, %GuiName%:Add, Text, % "x+3 w50 cWhite +BackgroundTrans v" ItemName "6", % InI[ItemName][6] "%"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 67 " cWhite  +BackgroundTrans", % "Hk:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
}
ComboScreen(){
Global
English     := "Config|First|Second|Third"
Portuguese  := "Configurar|Primeiro|Segundo|Terceiro"
classButton["ComboTab"]:=(New Tabs_Type_1_4(30,0,110,33, GColor := "242424", Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 12 " Bold" , Font_Color := "fefefe" , "Combo", Label := "ComboTabs1Swap" , Roundness:=15))
cx:=10, cy:=5, ItemName:= "ComboConfig", GuiName:= ItemName
English     := "Global Configuration"
Portuguese  := "Configura" Chr(231) Chr(227) "o Global"
New Group_Box(cx, cy, 470, 60, GuiName, %GlobalLanguage%)
English     := "Display Screen Info?"
Portuguese  := "Mostrar Info na Tela?"
classButton.Push(New Switch_Type1(300 , cy, 180, GuiName, InI[ItemName] , %GlobalLanguage% , "11 Bold", "FFFFFF",,5,"242424", "ProfileComb"))
English     := "Combo works using your main Battle List. Keep it always opened."
Portuguese  := "Combo funciona atrav" Chr(233) "s do seu Battle List principal. Mantenha-o aberto sempre."
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 23 " +BackgroundTrans", % %GlobalLanguage%
English     := "Filter to show only Mobs. Don't show Players, NPC and Summons."
Portuguese  := "Filtrar para mostrar apenas Mobs. N" Chr(227) "o mostre Players, NPC e Summons."
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y+5 +BackgroundTrans", % %GlobalLanguage%
English     := "If there is no Mobs in the Battle List, Combo will not start."
Portuguese  := "Se n" Chr(227) "o houver Mobs no seu Battle List, o Combo n" Chr(227) "o vai iniciar."
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y+5 +BackgroundTrans", % %GlobalLanguage%
cx:=10, cy:=90, ItemName:= "ComboConfig", GuiName:= ItemName
English     := "Auto Combo"
Portuguese  := "Auto Combo"
New Group_Box(cx, cy, 470, 35, GuiName, %GlobalLanguage%)
English     := "Auto start?"
Portuguese  := "Auto iniciar?"
classButton.Push(New Switch_Type1(100 , cy, 120, GuiName, InI[ItemName] , %GlobalLanguage% , "11 Bold", "FFFFFF",,3,"242424", "ProfileComb"))
English    := "Monster quantity to start"
Portuguese := "Qtd de monstros para iniciar"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y" cy + 30 " cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DropDownList, % "x+5 y" cy + 27 " w50 v" ItemName "6 gMonsterQuantitySelected choose1", % "1|2|3|4"
English     := "Which Combo Start?"
Portuguese  := "Qual Combo Iniciar?"
Gui, %GuiName%:Add, Text, % "x+1 y" cy + 30 " w120 Right cWhite +BackgroundTrans", % %GlobalLanguage%
English     := "First|Second|Third"
Portuguese  := "Primeiro|Segundo|Terceiro"
Gui, %GuiName%: Add, DropDownList, % "x+5 y" cy + 27 " w80 v" ItemName "4 gAutoComboSelected choose1", % %GlobalLanguage%
cx:=10, cy:=155, ItemName:= "HkCombo1"
English     := "First Combo"
Portuguese  := "Primeiro Combo"
New Group_Box(cx, cy, 470, 50, GuiName, %GlobalLanguage%)
English     := "Combo Name:"
Portuguese  := "Nome do Combo:"
Gui, %GuiName%:Add, Text, % "x" cx + 190 " yp w100 Right +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 yp w140 h17 -E0x200 +Border cE6E6E6 gSaveComboName v" ItemName "3", % InI[ItemName][3]
classButton.Push(New IMG_Button(cx+443, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config",ItemName . "|HkCombo"))
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y+30 +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
classButton.Push(New IMG_Switch( cx+180, cy+30, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 5))
English     := "Enable Retarget"
Portuguese  := "Ligar Retarget"
Gui, %GuiName%: Add, Text, % "x" cx + 200 " yp +BackgroundTrans", % %GlobalLanguage%
classButton.Push(New IMG_Switch( cx+310, cy+30, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 6))
English     := "Enable Auto Loot"
Portuguese  := "Ligar Auto Loot"
Gui, %GuiName%: Add, Text, % "x" cx + 330 " yp +BackgroundTrans", % %GlobalLanguage%
English     := "Auto Loot will loot during retarget and when the Combo is finished"
Portuguese  := "Auto Loot pega o loot quando retargetar e quando o Combo termina"
Gui, %GuiName%: Add, Text, % "x" cx + 5 " y+5 cWhite +BackgroundTrans", % %GlobalLanguage%
cx:=10, cy:=240, ItemName:= "HkCombo2"
English     := "Second Combo"
Portuguese  := "Segundo Combo"
New Group_Box(cx, cy, 470, 50, GuiName, %GlobalLanguage%)
English     := "Combo Name:"
Portuguese  := "Nome do Combo:"
Gui, %GuiName%:Add, Text, % "x" cx + 190 " yp w100 Right +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 yp w140 h17 -E0x200 +Border cE6E6E6 gSaveComboName v" ItemName "3", % InI[ItemName][3]
classButton.Push(New IMG_Button(cx+443, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config",ItemName . "|HkCombo"))
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y+30 +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
classButton.Push(New IMG_Switch( cx+180, cy+30, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 5))
English     := "Enable Retarget"
Portuguese  := "Ligar Retarget"
Gui, %GuiName%: Add, Text, % "x" cx + 200 " yp +BackgroundTrans", % %GlobalLanguage%
classButton.Push(New IMG_Switch( cx+310, cy+30, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 6))
English     := "Enable Auto Loot"
Portuguese  := "Ligar Auto Loot"
Gui, %GuiName%: Add, Text, % "x" cx + 330 " yp +BackgroundTrans", % %GlobalLanguage%
English     := "Auto Loot will loot during retarget and when the Combo is finished"
Portuguese  := "Auto Loot pega o loot quando retargetar e quando o Combo termina"
Gui, %GuiName%: Add, Text, % "x" cx + 5 " y+5 cWhite +BackgroundTrans", % %GlobalLanguage%
cx:=10, cy:=325, ItemName:= "HkCombo3"
English     := "Third Combo"
Portuguese  := "Terceiro Combo"
New Group_Box(cx, cy, 470, 50, GuiName, %GlobalLanguage%)
English     := "Combo Name:"
Portuguese  := "Nome do Combo:"
Gui, %GuiName%:Add, Text, % "x" cx + 190 " yp w100 Right +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Edit, % "x+5 yp w140 h17 -E0x200 +Border cE6E6E6 gSaveComboName v" ItemName "3", % InI[ItemName][3]
classButton.Push(New IMG_Button(cx+443, cy, 20, 20 , PNG.Config20x20 , PNG.ConfigH20x20 , GuiName , "Config",ItemName . "|HkCombo"))
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y+30 +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "4", % HotkeyRemane(InI[ItemName][4])
classButton.Push(New IMG_Switch( cx+180, cy+30, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 5))
English     := "Enable Retarget"
Portuguese  := "Ligar Retarget"
Gui, %GuiName%: Add, Text, % "x" cx + 200 " yp +BackgroundTrans", % %GlobalLanguage%
classButton.Push(New IMG_Switch( cx+310, cy+30, bw:=12,bh:=12,InI[ItemName],GuiName,PNG.on , PNG.off, GuiColor:="333333", 6))
English     := "Enable Auto Loot"
Portuguese  := "Ligar Auto Loot"
Gui, %GuiName%: Add, Text, % "x" cx + 330 " yp +BackgroundTrans", % %GlobalLanguage%
English     := "Auto Loot will loot during retarget and when the Combo is finished"
Portuguese  := "Auto Loot pega o loot quando retargetar e quando o Combo termina"
Gui, %GuiName%: Add, Text, % "x" cx + 5 " y+5 cWhite +BackgroundTrans", % %GlobalLanguage%
Loop, 3 {
Switch (A_Index){
case 1:
English     := "First Combo Configuration"
Portuguese  := "Primeira Configura" Chr(231) Chr(227) "o de Combo"
cx:=10, cy:=0, ItemName:= "FirstCombo", GuiName:= ItemName
New Group_Box(cx, cy, 470, 375, GuiName, %GlobalLanguage%)
case 2:
English     := "Second Combo Configuration"
Portuguese  := "Segunda Configura" Chr(231) Chr(227) "o de Combo"
cx:=10, cy:=0, ItemName:= "SecondCombo", GuiName:= ItemName
New Group_Box(cx, cy, 470, 375, GuiName, %GlobalLanguage%)
case 3:
English     := "Third Combo Configuration"
Portuguese  := "Terceira Configura" Chr(231) Chr(227) "o de Combo"
cx:=10, cy:=0, ItemName:= "ThirdCombo", GuiName:= ItemName
New Group_Box(cx, cy, 470, 375, GuiName, %GlobalLanguage%)
}
classButton.Push(New IMG_Button(cx+440, cy+26, 26, 26 , PNG.Config , PNG.ConfigH , GuiName , "Config",ItemName . "|Combo"))
English     := "Support Spells"
Portuguese  := "Spells de Suporte"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y23 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 38 " +BackgroundTrans hwnd" ItemName "5", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 40 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
pos := StrSplit(ItemName5, "CD:")
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "5", % pos.1
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "6", % HotkeyRemane(InI[ItemName][6])
English     := "Renew after"
Portuguese  := "Renovar em"
Gui, %GuiName%:Add, Text, % "x+20 yp-12 w75 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w20 cWhite +BackgroundTrans v" ItemName "5Cooldown", % pos.2
English     := "seconds"
Portuguese  := "segundos"
Gui, %GuiName%:Add, Text, % "x+5 w50 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 76 " +BackgroundTrans hwnd" ItemName "7", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 78 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
pos := StrSplit(ItemName7, "CD:")
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "7", % pos.1
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "8", % HotkeyRemane(InI[ItemName][8])
English     := "Renew after"
Portuguese  := "Renovar em"
Gui, %GuiName%:Add, Text, % "x+20 yp-12 w75 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w20 cWhite +BackgroundTrans v" ItemName "7Cooldown", % pos.2
English     := "seconds"
Portuguese  := "segundos"
Gui, %GuiName%:Add, Text, % "x+5 w50 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 114 " +BackgroundTrans hwnd" ItemName "9", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 116 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
pos := StrSplit(ItemName9, "CD:")
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "9", % pos.1
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "10", % HotkeyRemane(InI[ItemName][10])
English     := "Renew after"
Portuguese  := "Renovar em"
Gui, %GuiName%:Add, Text, % "x+20 yp-12 w75 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w20 cWhite +BackgroundTrans v" ItemName "9Cooldown", % pos.2
English     := "seconds"
Portuguese  := "segundos"
Gui, %GuiName%:Add, Text, % "x+5 w50 cWhite +BackgroundTrans", % %GlobalLanguage%
English     := "Attack Spells will be executed in the order below after cooldown"
Portuguese  := "Magias de Ataque ser" Chr(227) "o executadas na ordem abaixo depois do seu cooldown"
Gui, %GuiName%:Add, Text, % "x" cx + 5 " y+15 +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 165 " +BackgroundTrans hwnd" ItemName "11", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 167 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "11", % "UtitoTempoSan"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "12", % HotkeyRemane(InI[ItemName][12])
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 203 " +BackgroundTrans hwnd" ItemName "13", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 205 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "13", % "UtitoTempoSan"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "14", % HotkeyRemane(InI[ItemName][14])
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 241 " +BackgroundTrans hwnd" ItemName "15", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 243 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "15", % "UtitoTempoSan"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "16", % HotkeyRemane(InI[ItemName][16])
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 279 " +BackgroundTrans hwnd" ItemName "17", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 281 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "17", % "UtitoTempoSan"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "18", % HotkeyRemane(InI[ItemName][18])
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 317 " +BackgroundTrans hwnd" ItemName "19", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 319 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "19", % "UtitoTempoSan"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "20", % HotkeyRemane(InI[ItemName][20])
Gui, %GuiName%:Add, Picture, % "x" cx + 5 " y" cy + 355 " +BackgroundTrans hwnd" ItemName "21", % "HBITMAP:*" PNG["None"]
English     := "Spell Name"
Portuguese  := "Nome Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y" cy + 357 " w70 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "21", % "UtitoTempoSan"
Gui, %GuiName%:Add, Text, % "x" cx + 45 " y+5 w70 cWhite +BackgroundTrans", % "Hotkey: "
Gui, %GuiName%:Add, Text, % "x+5 w120 cWhite +BackgroundTrans v" ItemName "22", % HotkeyRemane(InI[ItemName][22])
Gui, %GuiName%:Add, Picture, % "x" cx + 275 " y" cy + 245 " +BackgroundTrans hwnd" ItemName "23", % "HBITMAP:*" PNG["None"]
English     := "Prioritizing Spell"
Portuguese  := "Priorizando a Magia"
Gui, %GuiName%:Add, Text, % "x" cx + 275 " y" cy + 225 " w140 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, Text, % "x" cx + 315 " y" cy + 255 "  w140 +BackgroundTrans v" ItemName "23", % "None"
}
}
MonsterQuantitySelected() {
global
Gui, Submit, NoHide
Ini["ComboConfig"].6 := ComboConfig6
IniWriteArray(Ini["ComboConfig"],"ComboConfig",ProfileComb)
}
AutoComboSelected(){
global
Gui, Submit, NoHide
Switch (ComboConfig4){
case "First":
Ini["ComboConfig"].4 := "FirstCombo"
case "Primeiro":
Ini["ComboConfig"].4 := "FirstCombo"
case "Second":
Ini["ComboConfig"].4 := "SecondCombo"
case "Segundo":
Ini["ComboConfig"].4 := "SecondCombo"
case "Third":
Ini["ComboConfig"].4 := "ThirdCombo"
case "Terceiro":
Ini["ComboConfig"].4 := "ThirdCombo"
}
IniWriteArray(Ini["ComboConfig"],"ComboConfig",ProfileComb)
}
SaveComboName(){
global
Gui, Submit, NoHide
temp := SubStr(A_GuiControl, 1, 8)
temp2 := temp  "3"
InI[temp][3] := %temp2%
IniWriteArray(Ini[temp],temp,ProfileComb)
}
Gui, Configuration: -Caption +ToolWindow +LastFound +AlwaysOnTop -0x20000
Gui, Configuration:Color,%GColor1%,%GColor2%
Gui, Configuration:Font, cFFFFFF
Gui, Configuration:Font, bold, Tahoma
Gui, Configuration:Add, Picture, x0  y0 +BackgroundTrans , % "HBITMAP:*" PNG.TopBarra
Gui, Configuration:Add, Picture, x3  y3 +BackgroundTrans , % "HBITMAP:*" PNG.16x16Logo
classButton.Push(New IMG_Button(350-28 , 0 , 28 , 22 , PNG.XClose , PNG.HXClose , "Configuration" , "ConfigurationGuiClose"))
English     := "Global Configuration"
Portuguese  := "Configura" Chr(231) Chr(245) "es Globais"
Gui, Configuration:Add, Text, x25 y4 +BackgroundTrans, % %GlobalLanguage%
Gui, GlobalHotkeys:New, +parentConfiguration -caption
Gui, GlobalHotkeys:Color,%GColor1%,%GColor2%
Gui, GlobalHotkeys:Font, c569cd6
Gui, GlobalHotkeys:Font, bold, Tahoma
GuiName:= "GlobalHotkeys"
cx:=15, cy:=0
English     := "Settings"
Portuguese  := "Configura" Chr(231) Chr(245) "es"
New Group_Box(cx, cy, 320, 40, GuiName, %GlobalLanguage%)
English     := "Save"
Portuguese  := "Salvar"
classButton.Push(New Button_Type_1( cx+20  , cy+30 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "SaveSettings", Roundness:=3 ) )
English     := "Load"
Portuguese  := "Carregar"
classButton.Push(New Button_Type_1( cx+120 , cy+30 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "LoadSettings", Roundness:=3 ) )
English     := "Reset"
Portuguese  := "Resetar"
classButton.Push(New Button_Type_1( cx+220 , cy+30 , w := 80 , h := 25, Button_Color := "865ABB" , Button_Background_Color := "333333" , Text := %GlobalLanguage% , Font := "Arial" , Font_Size := 15 " Bold" , Font_Color_Top := "dddddd" , Font_Color_Bottom := "111111" , GuiName, Label := "ResetSettings", Roundness:=3 ) )
English    := "Compatibility"
Portuguese := "Compatibilidade"
classButton.Push(New Switch_Type1(195 , 0, 145, GuiName, InI["Compatibility"], %GlobalLanguage% , "12 Bold", TColor,,2,"242424", "ConfigHotkeys"))
cx:=15, cy:=70, ItemName:= "HkStart"
English     := "Hotkey to Start"
Portuguese  := "HK para Iniciar"
New Group_Box(cx, cy, 155, 50, GuiName, %GlobalLanguage%)
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 35 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%: Add, Hotkey,  % "x+10 w80 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
cx:=177, cy:=70, ItemName:= "HkPause"
English     := "Hotkey to Pause"
Portuguese  := "HK para Pausar"
New Group_Box(cx, cy, 155, 50, GuiName, %GlobalLanguage%)
Gui, %GuiName%:Add, Text, % "x" cx + 10 " y" cy + 35 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%: Add, Hotkey,  % "x+10 w80 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
cx:=15, cy:=160, ItemName:= "HkFirstProfile"
English     := "First Hotkey for Profiles / Vocations"
Portuguese  := "Primeira Hotkey para Perfil / Voca" Chr(231) Chr(227)"o"
New Group_Box(cx, cy, 320, 80, GuiName, %GlobalLanguage%)
Gui, %GuiName%:Add, Text, % "x30 y" cy + 35 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%: Add, Hotkey,  % "x+10 w120 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
English     := "Profile"
Portuguese  := "Perfil"
Gui, %GuiName%:Add, Text, % "x30 y+10 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DDL,  % "x+5 w40 choose1 v" ItemName "4", 1|2|3|4
English     := "Vocation"
Portuguese  := "Voca" Chr(231) Chr(227)"o"
Gui, %GuiName%:Add, Text, % "x+10 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DDL,  % "x+5 w70 choose1 v" ItemName "5", Knight|Paladin|Druid|Sorcerer
If (Ini[ItemName][4])
GuiControl, %GuiName%:ChooseString, % ItemName "4", % Ini[ItemName][4]
If (Ini[ItemName][5])
GuiControl, %GuiName%:ChooseString, % ItemName "5", % Ini[ItemName][5]
cx:=15, cy:=280, ItemName:= "HkSecondProfile"
English     := "Second Hotkey"
Portuguese  := "Segunda Hotkey"
New Group_Box(cx, cy, 320, 80, GuiName, %GlobalLanguage%)
Gui, %GuiName%:Add, Text, % "x30 y" cy + 35 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%: Add, Hotkey,  % "x+10 w120 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
English     := "Profile"
Portuguese  := "Perfil"
Gui, %GuiName%:Add, Text, % "x30 y+10 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DDL,  % "x+5 w40 choose1 v" ItemName "4", 1|2|3|4
English     := "Vocation"
Portuguese  := "Voca" Chr(231) Chr(227)"o"
Gui, %GuiName%:Add, Text, % "x+10 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DDL,  % "x+5 w70 choose1 v" ItemName "5", Knight|Paladin|Druid|Sorcerer
If (Ini[ItemName][4])
GuiControl, %GuiName%:ChooseString, % ItemName "4", % Ini[ItemName][4]
If (Ini[ItemName][5])
GuiControl, %GuiName%:ChooseString, % ItemName "5", % Ini[ItemName][5]
cx:=15, cy:=400, ItemName:= "HkThirdProfile"
English     := "Third Hotkey"
Portuguese  := "Terceira Hotkey"
New Group_Box(cx, cy, 320, 80, GuiName, %GlobalLanguage%)
Gui, %GuiName%:Add, Text, % "x30 y" cy + 35 " cWhite  +BackgroundTrans", % "Hotkey:"
Gui, %GuiName%:Add, Hotkey,  % "x+10 w120 -E0x200 +Border cE6E6E6 v" ItemName "3", % InI[ItemName][3]
English     := "Profile"
Portuguese  := "Perfil"
Gui, %GuiName%:Add, Text, % "x30 y+10 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DDL,  % "x+5 w40 choose1 v" ItemName "4", 1|2|3|4
English     := "Vocation"
Portuguese  := "Voca" Chr(231) Chr(227)"o"
Gui, %GuiName%:Add, Text, % "x+10 cWhite +BackgroundTrans", % %GlobalLanguage%
Gui, %GuiName%:Add, DDL,  % "x+5 w70 choose1 v" ItemName "5", Knight|Paladin|Druid|Sorcerer
If (Ini[ItemName][4])
GuiControl, %GuiName%:ChooseString, % ItemName "4", % Ini[ItemName][4]
If (Ini[ItemName][5])
GuiControl, %GuiName%:ChooseString, % ItemName "5", % Ini[ItemName][5]
Gui, GlobalHotkeys:  Show,    x0 y30 w350 h520, Hotkeys
Tabs.Configuration:={Tab1: "GlobalHotkeys", Last: "Tab1"}
ConfigurationTabs1Swap(){
Gui Config:+LastFoundExist
if WinExist(){
English     := "Please, click Update button before doing anything else."
Portuguese  := "Por favor, clique no botao Update antes de realizar outras a" Chr(231) Chr(245) "es."
MsgBox, 4144, Update Error, % %GlobalLanguage%
Return
}
Gui, Config:Destroy
Suspend, Off
}
AvisosScreen(){
GuiName:= "Avisos"
Gui, %GuiName%:Destroy
Gui, %GuiName%: -Caption +ToolWindow +LastFound +AlwaysOnTop -0x20000
Gui, %GuiName%:Color,%GColor1%,%GColor2%
Gui, %GuiName%:Font, cFFFFFF
Gui, %GuiName%:Font, bold, Tahoma
Gui, %GuiName%:Add, Picture, x0  y0 +BackgroundTrans , % "HBITMAP:*" PNG.TopBarra
Gui, %GuiName%:Add, Picture, x3  y3 +BackgroundTrans , % "HBITMAP:*" PNG.16x16Logo
classButton.Push(New IMG_Button(350-28 , 0 , 28 , 22 , PNG.XClose , PNG.HXClose , GuiName , "AvisosGuiClose"))
English    := "Information"
Portuguese := "Informa" Chr(231) Chr(227) "o"
Gui, %GuiName%:Add, Text, x0 y4 w350 Center +BackgroundTrans, % %GlobalLanguage%
timeTHRemaining := userData.licenseEndDate
pos := StrSplit(timeTHRemaining, "d")
if(pos.1 <= 5){
English     := "Attention: Your license expires in: " timeTHRemaining
Portuguese  := "Aten" Chr(231) Chr(227) "o: Sua licen" Chr(231) "a expira em: " timeTHRemaining
Gui, %GuiName%:Add, Text, x0 y30 w350 cYellow +BackgroundTrans Center, % %GlobalLanguage%
}
English     := "Working for OTServers 12.6+ only."
Portuguese  := "Funcionando em OTServers 12.6+ apenas."
Gui, %GuiName%:Add, Text, x0 y+20 w350 cWhite +BackgroundTrans Center, % %GlobalLanguage%
Gui, %GuiName%:Show, w350
}
AvisosGuiClose(){
Gui, Avisos:Destroy
}
MainScreen()
Return
TimersOff(){
Timer.ExetaRes := False
SetTimer, exaustExetaRes, Off
Timer.ExetaAmpRes := False
SetTimer, exaustExetaAmpRes, Off
Timer.ExanaAmpRes := False
SetTimer, exaustExanaAmpRes, Off
Timer.UtamoTempo := False
SetTimer, exaustUtamoTempo, Off
Timer.UtitoTempo := False
SetTimer, exaustUtitoTempo, Off
Timer.UtitoTempoSan := False
SetTimer, exaustUtitoTempoSan, Off
Skills.BlockedAttack := False
SetTimer, EnableBlockedAttack, Off
Timer.exaustSupport := False
SetTimer, exaustSupportDisable, Off
Timer.exaustNormalFood := False
SetTimer, exaustNormalFoodDisable, Off
Timer.exaustAmmo := False
SetTimer, exaustAmmoDisable, Off
Timer.exaustWeapon := False
SetTimer, exaustWeaponDisable, Off
Timer.exaustBoots := False
SetTimer, exaustBootsDisable, Off
Timer.WaitingPrint := False
SetTimer, WaitingPrint, Off
Timer.OCRQuiver := False
SetTimer, OCRQuiverDisable, Off
Timer.exaustAmulet := False
SetTimer, exaustAmuletDisable, Off
Timer.exaustRing := False
SetTimer, exaustRingDisable, Off
Timer.exaustMagicShield := False
SetTimer, exaustMagicShieldDisable, Off
Timer.AntiAfk := False
SetTimer, AntiAfkDisable, Off
Timer.exaustPotion := False
SetTimer, exaustPotionDisable, Off
Timer.exaustPotionOT := False
SetTimer, exaustPotionOT, Off
Timer.Targeting := False
SetTimer, EnableTargeting, Off
Timer.TimedSpell1 := False
SetTimer, TimedSpell1, Off
Timer.TimedSpell2 := False
SetTimer, TimedSpell2, Off
Timer.TimedSpell3 := False
SetTimer, TimedSpell3, Off
Timer.SecondaryBattleList := False
SetTimer, enableSecondaryBattleListRead, Off
Timer.MessagesSound := False
SetTimer, MessagesSound, Off
Timer.ClickAttack := False
SetTimer, exaustClickAttackDisable, Off
Timer.exaustDummy := False
SetTimer, exaustDummyDisable, Off
Timer.TakeFromFloor := False
SetTimer, TakeFromFloorOff, Off
AutoHunt.Waiting := False
SetTimer, AutoHuntWaiting, Off
}
PartyList(){
If (Cords.Party.4 != Cords.Party.1 && Macro = 1){
For index, element in PartyListButton {
If (Cords.Party.1 = 0)
SetImage( element.GuiHwnd , element.On_hBitmap )
Else
SetImage( element.GuiHwnd , element.Off_hBitmap )
Cords.Party.4 := Cords.Party.1
}
}
if WinActive("ahk_ID" WindowInfo.ID){
if !WinExist("ahk_ID" ConfigID){
if (Macro == 1){
if(SQTLoot.Gui.x && SQTLoot.Gui.y){
if (ini.ExerciseDummy.3 == 1)
Gui, RunningDummy: Show, % "NA w250 h50 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y-120, RunningDummy
else
Gui, RunningDummy: Hide
if (ini.ComboConfig.5 == 1)
Gui, RunningCombo: Show, % "NA w250 h20 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y, RunningCombo
else
Gui, RunningCombo: Hide
if(AutoHunt.Active == 1)
Gui, RunningSteps: Show, % "NA w250 h110 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y-120, RunningSteps
else
Gui, RunningSteps: Hide
}
}
} else if WinExist("ahk_ID" ConfigID){
Gui, ConfigID: +LastFound
}
if (Data.WinActive == 1){
Data.WinActive := 0
}
Suspend, Off
} else if WinActive("ahk_class AutoHotkeyGUI",, "ahk_ID" ConfigID){
if !WinExist("ahk_ID" ConfigID) && WinActive("ahk_class #32768"){
if (Macro == 1){
if(SQTLoot.Gui.x && SQTLoot.Gui.y){
if (ini.ExerciseDummy.3 == 1)
Gui, RunningDummy: Show, % "NA w250 h50 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y-120, RunningDummy
else
Gui, RunningDummy: Hide
if (ini.ComboConfig.5 == 1)
Gui, RunningCombo: Show, % "NA w250 h20 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y, RunningCombo
else
Gui, RunningCombo: Hide
if(AutoHunt.Active == 1)
Gui, RunningSteps: Show, % "NA w250 h110 x" SQTLoot.Gui.x-97 " y" SQTLoot.Gui.y-120, RunningSteps
else
Gui, RunningSteps: Hide
}
}
Suspend, Off
} Else If WinExist("ahk_ID" ConfigID){
Gui, ConfigID: +LastFound
}
} Else If !WinExist("ahk_class #32770 ahk_exe TibiaSettings.ini:MH"){
Suspend, On
Cords.Running.3 := 1
Data.WinActive := 1
SysGet, MonitorPrimary, MonitorPrimary
SysGet, MonitorSize, Monitor, MonitorPrimary
Gui, RunningDummy: Hide
Gui, RunningCombo: Hide
Gui, RunningSteps: Hide
}
}
WaitingPrint(){
Timer.WaitingPrint := False
}
OCRQuiverDisable(){
Timer.OCRQuiver := False
}
exaustSupportDisable(){
Timer.exaustSupport := False
}
exaustFoodDisable(){
Timer.exaustFood := False
}
exaustNormalFoodDisable(){
Timer.exaustNormalFood := False
}
exaustAmuletDisable(){
Timer.exaustAmulet := False
}
exaustRingDisable(){
Timer.exaustRing := False
}
exaustAmmoDisable(){
Timer.exaustAmmo := False
}
exaustSpecialPotionDisable(){
Timer.exaustSpecialPotion := False
}
exaustWeaponDisable(){
Timer.exaustWeapon := False
}
exaustBootsDisable(){
Timer.exaustBoots := False
}
exaustMagicShieldDisable(){
Timer.exaustMagicShield := False
}
exaustGoldConverterDisable(){
Timer.exaustGoldConverter := False
}
exaustClickAttackDisable(){
Timer.ClickAttack := False
}
exaustDummyDisable(){
Timer.exaustDummy := False
}
Config:
HotkeysOff()
Gui Config:+LastFoundExist
if WinExist(){
English     := "Please, click Update button before doing anything else."
Portuguese  := "Por favor, clique no botao Update antes de realizar outras a" Chr(231) Chr(245) "es."
MsgBox, 4144, Update Error, % %GlobalLanguage%
Return
}
WinGetPos, BTPosX, BTPosY,,, % "ahk_id " classButton[A_GuiControl].GuiHwnd
if (Locked != 0){
SetImage( LockedID, PNG.LockClosed)
GuiControl, Main:Disable , ProfileSelected
GuiControl, Main:Disable , VocationSelected
}
Gui, Main: -AlwaysOnTop
Name:=StrSplit(classButton[A_GuiControl].Name, "|")
winName:=classButton[A_GuiControl].Window
Gui, Config: +HwndConfigID -caption +LastFound +AlwaysOnTop +ToolWindow
Gui, Config: Color,333333,444444
Gui, Config: Font, c569cd6
Gui, Config: Font, bold, Tahoma
switch (Name.2) {
case "Hotkey":
English     := "If you want to use Hotkey to Enable / Disable this option configure a Hotkey: "
Portuguese  := "Se quiser usar Hotkey para Ativar / Desativar esta op" Chr(231) Chr(227) "o configure uma Hotkey:"
Gui, Config: Add, Text, x5 y+5 w220 Left , % %GlobalLanguage%
Gui, Config: Add, Hotkey, x5 y+5 w140 vNew_Hotkey, % InI[Name.1][3]
Gui, Config: Add, Button, x170 y+7 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-230+30 " y" BTPosY+23 " w230"
case "HotkeySmall":
English     := "If you want to use Hotkey to Enable / Disable this option configure a Hotkey: "
Portuguese  := "Se quiser usar Hotkey para Ativar / Desativar esta op" Chr(231) Chr(227) "o configure uma Hotkey:"
Gui, Config: Add, Text, x5 y+5 w140 Left , % %GlobalLanguage%
Gui, Config: Add, Hotkey, x5 y+5 w110 vNew_Hotkey, % InI[Name.1][3]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY+23 " w150"
Name.2 := "Hotkey"
case "Hk":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey gShowHotkeys, % InI[Name.1][4]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "HkCureParalyze":
English     := "Hk 1 - Healing CD"
Portuguese  := "Hk 1 - Cooldown Cura"
Gui, Config: Add, Text, x5 y+5 w140, % %GlobalLanguage%
Gui, Config: Add, Text, x5 y+5, % "Hk 1:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey gShowHotkeys, % InI[Name.1][4]
English     := "Hk 2 - Haste CD"
Portuguese  := "Hk 2 - Cooldown Haste"
Gui, Config: Add, Text, x5 y+5 w140, % %GlobalLanguage%
Gui, Config: Add, Text, x5 y+5, % "Hk 2:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey2 gShowHotkeys, % InI[Name.1][5]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "HkTrainSpells":
English     := "Will use with 10%+ MP"
Portuguese  := "Vai usar com 10%+ MP"
Gui, Config: Add, Text, x5 y+5 w140 cYellow, % %GlobalLanguage%
English     := "Hk 1 - Healing CD"
Portuguese  := "Hk 1 - Cooldown Cura"
Gui, Config: Add, Text, x5 y+5 w140, % %GlobalLanguage%
Gui, Config: Add, Text, x5 y+5, % "Hk 1:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey gShowHotkeys, % InI[Name.1][4]
English     := "Hk 2 - Support CD"
Portuguese  := "Hk 2 - Cooldown Suporte"
Gui, Config: Add, Text, x5 y+5 w140, % %GlobalLanguage%
Gui, Config: Add, Text, x5 y+5, % "Hk 2:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey2 gShowHotkeys, % InI[Name.1][5]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "HkTakeFromFloor":
English     := "Seconds:"
Portuguese  := "Segundos:"
Gui, Config: Add, Text, % "x5 y+5 w25 Left", % %GlobalLanguage%
Gui, Config: Add, Edit, x+5 w35 h17 vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][4]
English     := "Adjust Positions"
Portuguese  := "Ajustar Posi" Chr(231) Chr(227) "o"
Gui, Config: Add, Button,x10 y+5 w130 vTakeFromFloor45 gUpdateTakeFromFloor, % %GlobalLanguage%
Gui, Config: Add, Button,x45 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "HkCombo":
English     := "Hotkey to Start/Pause Combo:"
Portuguese  := "Hotkey para Start/Pause Combo:"
Gui, Config: Add, Text, x10 y+5, % %GlobalLanguage%
Gui, Config: Add, Hotkey, x+5 w150 vNew_Hotkey gShowHotkeys, % InI[Name.1][4]
English     := "Enable Retarget"
Portuguese  := "Ligar Retarget"
classButton.Push(New Switch_Type1(10 , 30, 150, "Config", InI[Name.1] , %GlobalLanguage% , "12 Bold", "FFFFFF",,5,"333333", "ProfileComb"))
English     := "Enable Auto Loot"
Portuguese  := "Ligar Auto Loot"
classButton.Push(New Switch_Type1(170 , 30, 150, "Config", InI[Name.1] , %GlobalLanguage% , "12 Bold", "FFFFFF",,6,"333333", "ProfileComb"))
Gui, Config: Add, Button,x408 y30 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-471+29 " y" BTPosY+23 " w468"
case "HkSmartCast":
English     := "Potion Delay"
Portuguese  := "Atrasar Potion"
classButton.Push(New Switch_Type1(5 , 5, 140, "Config", InI[Name.1] , %GlobalLanguage% , "12 Bold", "FFFFFF",,5,"333333", "ProfileComb"))
Gui, Config: Add, Text, x5 y30 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Group Cooldown:"
Portuguese  := "Grupo Cooldown:"
Gui, Config: Add, Text, % "x5 y+5 w130 Left", % %GlobalLanguage%
Gui, Config: Add, DropDownList, x5 y+5 vPercet1 w90 Choose1, Attack|Healing|Support
temp := % InI[Name.1][6]
if (temp)
GuiControl, Config:ChooseString, Percet1, % InI[Name.1][6]
English     := "Type of Use:"
Portuguese  := "Tipo de Uso:"
Gui, Config: Add, Text, % "x5 y+5 w130 Left", % %GlobalLanguage%
Gui, Config: Add, DropDownList, x5 y+5 vPercet2 w90 Choose1, Crosshair|OnTarget|Yourself
temp := % InI[Name.1][7]
if (temp)
GuiControl, Config:ChooseString, Percet2, % InI[Name.1][7]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h175"
case "HkLoot":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey gShowHotkeys, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Left", % "Delay:"
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
if(VersionType == "OTServer"){
classButton.Push(New Switch_Type1(10 , 50, 130, "Config", InI[Name.1] , "Exeta Loot" , "12 Bold", "FFFFFF",,6,"333333", "ProfileComb"))
Gui, Config: Add, Button,x5 y+25 vBtnCtrl gUpdateHK, % "Update"
} else {
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
}
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "HkMoveItems":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Adjust Positions"
Portuguese  := "Ajustar Posi" Chr(231) Chr(227) "o"
Gui, Config: Add, Button,x10 y+5 w130 vMoveItems5678 gUpdateMousePosition, % %GlobalLanguage%
Gui, Config: Add, Button,x45 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "HkMoveItemsBP":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Adjust Positions"
Portuguese  := "Ajustar Posi" Chr(231) Chr(227) "o"
Gui, Config: Add, Button,x10 y+5 w130 vMoveItemsBP gUpdateMoveItemsBP, % %GlobalLanguage%
Gui, Config: Add, Button,x45 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "HkMoveItemsMouse":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Adjust Positions"
Portuguese  := "Ajustar Posi" Chr(231) Chr(227) "o"
Gui, Config: Add, Button,x10 y+5 w130 vMoveItemsMouse gUpdateMoveItemsMouse, % %GlobalLanguage%
Gui, Config: Add, Button,x45 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "HkGodFlower":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Flower Position"
Portuguese  := "Posi" Chr(231) Chr(227) "o da Flor"
Gui, Config: Add, Button,x5 y+5 w130 vGodFlower56 gUpdatePosition, % %GlobalLanguage%
Gui, Config: Add, Button,x45 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "HkDragQuiver":
English     := "Ammo Position"
Portuguese  := "Posi" Chr(231) Chr(227) "o da Muni" Chr(231) Chr(227) "o"
Gui, Config: Add, Button,x5 y+5 w130 vDragQuiver56 gUpdatePosition, % %GlobalLanguage%
English     := "Refill below:"
Portuguese  := "Repor abaixo:"
Gui, Config: Add, Text, % "x5 y+5 w25", % %GlobalLanguage%
Gui, Config: Add, Edit, x+5 w35 h17 vPercet1 gLimit800 -E0x200 +Border cE6E6E6, % InI[Name.1][7]
Gui, Config: Add, Button,x+5 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "HkAntiPush":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Position Trash"
Portuguese  := "Posi" Chr(231) Chr(227) "o do Lixo"
Gui, Config: Add, Button,x5 y+5 w130 vAntiPush56 gUpdatePosition, % %GlobalLanguage%
Gui, Config: Add, Button,x45 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "HkTargeting":
English     := "Select One of the below options"
Portuguese  := "Selecione uma das op" Chr(231) Chr(245) "es abaixo"
Gui, Config: Add, Text,     x5   y+5, % %GlobalLanguage%
English     := "Seconds to Retarget: "
Portuguese  := "Segundos para Retarget: "
Gui, Config: Add, Text,     x5   y+5 w135, % %GlobalLanguage%
Gui, Config: Add, DropDownList, x+2 vRetargetSeconds w90 Choose1, Disabled|1|3|5|7|9|11|13|15
temp := % InI[Name.1][5]
if (temp)
GuiControl, Config:ChooseString, RetargetSeconds, % InI[Name.1][5]
English     := "Life to Retarget: "
Portuguese  := "Vida para Retarget: "
Gui, Config: Add, Text,     x5   y+5 w135, % %GlobalLanguage%
Gui, Config: Add, DropDownList, x+2 vRetargetLife w90 Choose1, Disabled|30|60|90
temp := % InI[Name.1][6]
if (temp)
GuiControl, Config:ChooseString, RetargetLife, % InI[Name.1][6]
Gui, Config: Add, Text,     x0 y+1 w250 cWhite, % "__________________________________________"
Gui, Config: Add, Button,   x5   y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-250+29 " y" BTPosY-39 " w250 h120"
case "HkTimedHotkey":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Seconds:"
Portuguese  := "Segundos:"
Gui, Config: Add, Text, % "x5 y+5 w25 Left", % %GlobalLanguage%
Gui, Config: Add, Edit, x+5 w35 h17 vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
English     := "Group Cooldown:"
Portuguese  := "Grupo Cooldown:"
Gui, Config: Add, Text, % "x5 y+5 w55 Left", % %GlobalLanguage%
Gui, Config: Add, DropDownList, x+2 vPercet2 w75 Choose1, None|Attack|Healing|Support
temp := % InI[Name.1][6]
if (temp)
GuiControl, Config:ChooseString, Percet2, % InI[Name.1][6]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h105"
case "HkExerciseDummy":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
if(VersionType == "OTServer"){
English     := "Use it every"
Portuguese  := "Usa a cada"
Gui, Config: Add, Text, % "x5 y+8 w70 Left", % %GlobalLanguage%
Gui, Config: Add, Edit, x+1 w35 h17 vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][9]
English     := "secs"
Portuguese  := "segs"
Gui, Config: Add, Text, % "x+5 w40 Left", % %GlobalLanguage%
} else {
English     := "Charges: "
Portuguese  := "Cargas: "
Gui, Config: Add, Text, % "x5 y+5 w25 Left", % %GlobalLanguage%
Gui, Config: Add, Edit, x+5 w35 h17 vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
English     := "Qty: "
Portuguese  := "Qtd: "
Gui, Config: Add, Text, % "x5 y+5 w25 Left", % %GlobalLanguage%
Gui, Config: Add, Edit, x+5 w35 h17 vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
}
English     := "Position of Dummy:  "
Portuguese  := "Posi" Chr(231) Chr(227) "o do Dummy:  "
Gui, Config: Add, Text, % "x5 y+10 w130 Left", % %GlobalLanguage%
English     := "Configure Position"
Portuguese  := "Configurar Posi" Chr(231) Chr(227) "o"
Gui, Config: Add, Button, x17 y+5 vExerciseDummy78 gUpdatePosition, % %GlobalLanguage%
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, % "Update"
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "HkDance":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Left", % "Sleep:"
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "Potion":
temp := Name[5]
Gui, Config: Add, DropDownList, vPotion Choose1, % "NoPotion|" %temp%
temp := % InI[Name.1][9]
if (temp)
GuiControl, Config:ChooseString, Potion, % InI[Name.1][9]
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Button,x+5 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "HkQuiver":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Refill below:"
Portuguese  := "Repor abaixo:"
Gui, Config: Add, Text, % "x5 y+5 w25", % %GlobalLanguage%
Gui, Config: Add, Edit, x+5 w35 h17 vPercet1 gLimit800 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Button,x+5 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
Name.2 := "Hk+1Field"
case "HkAmmo":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
English     := "Refill below:"
Portuguese  := "Repor abaixo:"
Gui, Config: Add, Text, % "x5 y+5 w25", % %GlobalLanguage%
Gui, Config: Add, Edit, x+5 w35 h17 vPercet1 gLimit -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Button,x+5 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
Name.2 := "Hk+1Field"
case "Hk+1Field":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Button,x+5 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h65"
case "Hk+2Field":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Text, % "x+3 w29 Right c" Name.6, % Name.5
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "MagicShield":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Text, % "x+3 w29 Right c" Name.6, % Name.5
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
English     := "Always Equipped"
Portuguese  := "Sempre Equipado"
classButton.Push(New Switch_Type1(5 , 55, 140, "Config", InI[Name.1], %GlobalLanguage% , "10 Bold", TColor,,7,, "ProfileComb"))
Gui, Config: Add, Button,x5 y82 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "EnergyRing":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Text, % "x+3 w29 Right c" Name.6, % Name.5
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
Gui, Config: Add, Text, % "x3 y+5 w29 Right c" Name.8, % Name.7
Gui, Config: Add, Edit, x+3 w35 h17 gLimit vPercet3 -E0x200 +Border cE6E6E6, % InI[Name.1][8]
English     := "Always Equipped"
Portuguese  := "Sempre Equipado"
classButton.Push(New Switch_Type1(5 , 75, 140, "Config", InI[Name.1], %GlobalLanguage% , "10 Bold", TColor,,7,, "ProfileComb"))
Gui, Config: Add, Button,x5 y102 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "SSA":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Text, % "x+3 w29 Right c" Name.6, % Name.5
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
English     := "Always Equipped"
Portuguese  := "Sempre Equipado"
classButton.Push(New Switch_Type1(5 , 55, 140, "Config", InI[Name.1], %GlobalLanguage% , "10 Bold", TColor,,7,, "ProfileComb"))
Gui, Config: Add, Button,x5 y82 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
case "UtamoVita":
English     := "Select your Configuration:"
Portuguese  := "Selecione sua configura" Chr(231) Chr(227) "o:"
Gui, Config: Add, Text, % "x5 y+5 w85", % %GlobalLanguage%
English     := "Use Utamo on configured HP|Always Renew after expire|Always Renew after cooldown"
Portuguese  := "Usar utamo na vida indicada|Renovar sempre que expirar|Renovar sempre que tiver cooldown"
Gui, Config: Add, DropDownList, x+1 vUtamoOption gTimersUtamoOption cWhite w230 Choose1, % %GlobalLanguage%
UtamoOption := % InI[Name.1][9]
switch (UtamoOption){
case "Use Utamo on configured HP":
UtamoOption := "Usar utamo na vida indicada"
case "Always Renew after expire":
UtamoOption := "Renovar sempre que expirar"
case "Always Renew after cooldown":
UtamoOption := "Renovar sempre que tiver cooldown"
}
GuiControl, Config:ChooseString, UtamoOption, % UtamoOption
Gui, Config: Add, Text, x5 y+15, % "Hk:"
Gui, Config: Add, Hotkey, x+5 w100 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x+5 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Text, % "x+3 Right c" Name.6, % Name.5
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
English     := "Break with"
Portuguese  := "Quebrar com"
Gui, Config: Add, Text, % "x5 y+15 cWhite", % %GlobalLanguage%
Gui, Config: Add, Text, % "x+5 c" Name.4, % "HP +"
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet3 -E0x200 +Border cE6E6E6, % InI[Name.1][7]
Gui, Config: Add, Text, x+5, % "Hk:"
Gui, Config: Add, Hotkey, x+5 w100 vNew_Hotkey2, % InI[Name.1][8]
Gui, Config: Add, Text, x330 y5, % "Mana Shield Potion"
Gui, Config: Add, Text, x330 y+5, % "Hk:"
Gui, Config: Add, Hotkey, x+5 w100 vNew_Hotkey3, % InI[Name.1][11]
English     := "Renew during Cooldown if necessary"
Portuguese  := "Renovar durante Cooldown se necess" Chr(225) "rio"
classButton.Push(New Switch_Type1(310 , 50, 170, "Config", InI[Name.1], %GlobalLanguage% , "10 Bold", TColor,,10,, "ProfileComb"))
Gui, Config: Add, Button,x310 y+30 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-480+34 " y" BTPosY-3 " w480 h111"
TimersUtamoOption()
case "Party":
Gui, Config: Add, Text, x5 y+5 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
If (Name.7 == "Sio") {
Gui, Config: Add, Text, % "x+3 w29 Right c" Name.6, % Name.5
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
}
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150 h85"
case "PartySio":
English     := "Ignore Cooldown"
Portuguese  := "Spammar Sio"
classButton.Push(New Switch_Type1(5 , 5, 140, "Config", InI[Name.1] , %GlobalLanguage% , "12 Bold", "FFFFFF",,7,"333333", "ProfileComb"))
Gui, Config: Add, Text, x5 y30 w25 Left , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
Gui, Config: Add, Text, % "x5 y+5 w25 Right c" Name.4, % Name.3
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
if(Name.7 == "Sio"){
Gui, Config: Add, Text, % "x+3 w29 Right c" Name.6, % Name.5
Gui, Config: Add, Edit, x+5 w35 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
}
Gui, Config: Add, Button,x5 y+7 vBtnCtrl gUpdateHK, Update
Gui, Config: Show, % "x" BTPosX-150+29 " y" BTPosY-3 " w150"
Name.2 := "Party"
case "Swap":
Gui, Config: Add, Text, x5 y+5 w32 Right , % "Tank:"
temp := Name[7]
Gui, Config: Add, DropDownList, x+5 w177 vTank Choose1, % %temp%
temp := % InI[Name.1][9]
if (temp)
GuiControl, Config:ChooseString, Tank, % InI[Name.1][9]
Gui, Config: Add, Text, x5 y+5 w32 Right , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey, % InI[Name.1][4]
If (Ini[Name.1][11] != "1")
Gui, Config: Add, Text, % "x+2 w30 ced2121", % "HP -"
Else
Gui, Config: Add, Text, % "x+2 w30 c569cd6", % "MP -"
Gui, Config: Add, Edit, x+5 w30 h17 gLimit vPercet1 -E0x200 +Border cE6E6E6, % InI[Name.1][5]
Gui, Config: Add, Text, x5 y+10 w32 Right , % "Main:"
temp := Name[7]
Gui, Config: Add, DropDownList, x+5  w177 gHideMainHK vMain Choose1, % %temp%
temp := % InI[Name.1][10]
if (temp)
GuiControl, Config:ChooseString, Main, % InI[Name.1][10]
Gui, Config: Add, Text, x5 y+5 w32 Right , % "Hk:"
Gui, Config: Add, Hotkey, x+5 w110 vNew_Hotkey2, % InI[Name.1][8]
If (Ini[Name.1][11] != "1")
Gui, Config: Add, Text, % "x+2 w30 ced2121", % "HP +"
Else
Gui, Config: Add, Text, % "x+2 w30 c569cd6", % "MP +"
Gui, Config: Add, Edit, x+5 w30 h17 gLimit vPercet2 -E0x200 +Border cE6E6E6, % InI[Name.1][6]
English     := "Tank Always Equipped"
Portuguese  := "Tank Sempre Equipado"
classButton.Push(New Switch_Type1(5 , 105, 190, "Config", InI[Name.1], %GlobalLanguage%, "11 Bold", TColor,,7,, "ProfileComb"))
English     := "Check MP not HP"
Portuguese  := "Checar MP e n" Chr(227) "o HP"
classButton.Push(New Switch_Type1(5 , 125, 190, "Config", InI[Name.1], %GlobalLanguage%, "11 Bold", TColor,,11,, "ProfileComb"))
Gui, Config: Add, Button,x166 y+25 vBtnCtrl gUpdateHK, Update
If (InI[Name.1][10] = "NoRing" || InI[Name.1][10] = "NoAmulet")
GuiControl, Config:Hide , New_Hotkey2
Gui, Config: Show, % "x" BTPosX-230+29 " y" BTPosY-3 " w230"
case "Combo":
English     := "Support Spells will"
Portuguese  := "Magias de Suporte"
Gui, Config:Add, Text, % "x" cx + 5 " y+5 +BackgroundTrans", % %GlobalLanguage%
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Spell 1:"
Gui, Config:Add, DropDownList, % "x+5 vConfig5 w140 Choose1", % SupportSpells
temp := % InI[Name.1][5]
if (temp) {
pos := StrSplit(temp, "CD:")
GuiControl, Config:ChooseString, Config5, % pos.1
}
Gui, Config:Add, Text, % "x+5 +BackgroundTrans", % "Cooldown: "
Gui, Config: Add, Edit, x+5 w50 h17 gLimit vSupport1 -E0x200 +Border cE6E6E6, % pos.2
Gui, Config:Add, Text, % "x+5 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w80 +BackgroundTrans vConfig6 -E0x200 +Border cE6E6E6", % InI[Name.1][6]
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Spell 2:"
Gui, Config:Add, DropDownList, % "x+5 vConfig7 w140 Choose1", % SupportSpells
temp := % InI[Name.1][7]
if (temp) {
pos := StrSplit(temp, "CD:")
GuiControl, Config:ChooseString, Config7, % pos.1
}
Gui, Config:Add, Text, % "x+5 +BackgroundTrans", % "Cooldown: "
Gui, Config: Add, Edit, x+5 w50 h17 gLimit vSupport2 -E0x200 +Border cE6E6E6, % pos.2
Gui, Config:Add, Text, % "x+5 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w80 +BackgroundTrans vConfig8 -E0x200 +Border cE6E6E6", % InI[Name.1][8]
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Spell 3:"
Gui, Config:Add, DropDownList, % "x+5 vConfig9 w140 Choose1", % SupportSpells
temp := % InI[Name.1][9]
if (temp) {
pos := StrSplit(temp, "CD:")
GuiControl, Config:ChooseString, Config9, % pos.1
}
Gui, Config:Add, Text, % "x+5 +BackgroundTrans", % "Cooldown: "
Gui, Config: Add, Edit, x+5 w50 h17 gLimit vSupport3 -E0x200 +Border cE6E6E6, % pos.2
Gui, Config:Add, Text, % "x+5 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w80 +BackgroundTrans vConfig10 -E0x200 +Border cE6E6E6", % InI[Name.1][10]
English     := "Attack Spells will be executed in the order below after cooldown"
Portuguese  := "Magias de Ataque ser" Chr(227) "o executadas na ordem abaixo depois do seu cooldown"
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % %GlobalLanguage%
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Attack 1:"
Gui, Config:Add, DropDownList, % "x+5 vConfig11 w140 Choose1", % AttackSpells
temp := % InI[Name.1][11]
if (temp)
GuiControl, Config:ChooseString, Config11, % InI[Name.1][11]
Gui, Config:Add, Text, % "x+20 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w140 +BackgroundTrans vConfig12 -E0x200 +Border cE6E6E6", % InI[Name.1][12]
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Attack 2:"
Gui, Config:Add, DropDownList, % "x+5 vConfig13 w140 Choose1", % AttackSpells
temp := % InI[Name.1][13]
if (temp)
GuiControl, Config:ChooseString, Config13, % InI[Name.1][13]
Gui, Config:Add, Text, % "x+20 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w140 +BackgroundTrans vConfig14 -E0x200 +Border cE6E6E6", % InI[Name.1][14]
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Attack 3:"
Gui, Config:Add, DropDownList, % "x+5 vConfig15 w140 Choose1", % AttackSpells
temp := % InI[Name.1][15]
if (temp)
GuiControl, Config:ChooseString, Config15, % InI[Name.1][15]
Gui, Config:Add, Text, % "x+20 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w140 +BackgroundTrans vConfig16 -E0x200 +Border cE6E6E6", % InI[Name.1][16]
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Attack 4:"
Gui, Config:Add, DropDownList, % "x+5 vConfig17 w140 Choose1", % AttackSpells
temp := % InI[Name.1][17]
if (temp)
GuiControl, Config:ChooseString, Config17, % InI[Name.1][17]
Gui, Config:Add, Text, % "x+20 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w140 +BackgroundTrans vConfig18 -E0x200 +Border cE6E6E6", % InI[Name.1][18]
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Attack 5:"
Gui, Config:Add, DropDownList, % "x+5 vConfig19 w140 Choose1", % AttackSpells
temp := % InI[Name.1][19]
if (temp)
GuiControl, Config:ChooseString, Config19, % InI[Name.1][19]
Gui, Config:Add, Text, % "x+20 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w140 +BackgroundTrans vConfig20 -E0x200 +Border cE6E6E6", % InI[Name.1][20]
Gui, Config:Add, Text, % "x" cx + 5 " y+10 +BackgroundTrans", % "Attack 6:"
Gui, Config:Add, DropDownList, % "x+5 vConfig21 w140 Choose1", % AttackSpells
temp := % InI[Name.1][21]
if (temp)
GuiControl, Config:ChooseString, Config21, % InI[Name.1][21]
Gui, Config:Add, Text, % "x+20 +BackgroundTrans", % "Hotkey:"
Gui, Config:Add, Hotkey, % "x+5 w140 +BackgroundTrans vConfig22 -E0x200 +Border cE6E6E6", % InI[Name.1][22]
Gui, Config: Add, Button,x10 y+10 vBtnCtrl gUpdateHK, Update
English     := "Prioritize Attack Spell (Momentum): "
Portuguese  := "Priorizar a Magia de Ataque (Momentum): "
Gui, Config:Add, Text, % "x+5 +BackgroundTrans", % %GlobalLanguage%
Gui, Config:Add, DropDownList, % "x+5 vConfig23 w140 Choose1", % "Attack 1|Attack 2|Attack 3|Attack 4|Attack 5|Attack 6"
temp := % InI[Name.1][23]
if (temp)
GuiControl, Config:ChooseString, Config23, % InI[Name.1][23]
Gui, Config: Show, % "x" BTPosX-470+29 " y" BTPosY-3 " w470 h360"
}
WinSet, Top, , ahk_id %ConfigID%
return
UpdatePosition:
temp := SubStr(A_GuiControl, -1)
index1 := SubStr(temp, 1, 1)
index2 := SubStr(temp, 2, 1)
temp := StrReplace(A_GuiControl, temp, "")
English     := "Choose the position."
Portuguese  := "Escolha a posi" Chr(231) Chr(227) "o."
ToolTip, % %GlobalLanguage%
Sleep, 1000
KeyWait, LButton, D
MouseGetPos, xdown, ydown
InI[temp][index1] := xdown
InI[temp][index2] := ydown
ToolTip
English     := "A position was configured."
Portuguese  := "A posi" Chr(231) Chr(227) "o foi configurada."
MsgBox, 4160, %temp%, % %GlobalLanguage%
Gui, submit, nohide
If(Name.2 != "Hotkey"){
OldHotkey := Ini[Name.1][4]
Ini[Name.1][4] := New_Hotkey
}
Hotkey, % OldHotkey,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% OldHotkey,Off
}
switch (Name.2) {
case "HkExerciseDummy":
if(VersionType == "Global"){
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
} else {
Ini[Name.1][9] := Percet1
English     := % InI[ItemName][9] " seconds"
Portuguese  := % InI[ItemName][9] " segundos"
GuiControl, Training: Text, % Name.1 "9", % %GlobalLanguage%
}
case "HkGodFlower":
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4],GodFlowerHotkey
Hotkey,% Ini[Name.1][4],On
}
case "HkAntiPush":
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4],AntiPushHotkey
Hotkey,% Ini[Name.1][4],On
}
case "HkDragQuiver":
Ini[Name.1][7] := Percet1
}
IniWriteArray(Ini[Name.1],Name.1,ProfileComb)
PopulateFields()
Gui, Config:Destroy
if (Locked != 0){
SetImage( LockedID, PNG.LockOpened)
GuiControl, Main:Enable , ProfileSelected
GuiControl, Main:Enable , VocationSelected
}
Suspend, Off
Return
UpdateMousePosition:
temp := SubStr(A_GuiControl, -3)
index1 := SubStr(temp, 1, 1)
index2 := SubStr(temp, 2, 1)
index3 := SubStr(temp, 3, 1)
index4 := SubStr(temp, 4, 1)
temp := StrReplace(A_GuiControl, temp, "")
English     := "Click LEFT to configure the START position."
Portuguese  := "Clique com o botao ESQUERDO para configurar a posi" Chr(231) Chr(227) "o INICIAL."
ToolTip, % %GlobalLanguage%
Sleep, 50
KeyWait, LButton, D
MouseGetPos, xdown, ydown
InI[temp][index1] := xdown
InI[temp][index2] := ydown
Sleep, 100
English     := "Now click LEFT to configure the END position."
Portuguese  := "Agora clique com o botao ESQUERDO para configurar a posi" Chr(231) Chr(227) "o FINAL."
ToolTip, % %GlobalLanguage%
Sleep, 50
KeyWait, LButton, D
MouseGetPos, xdown, ydown
InI[temp][index3] := xdown
InI[temp][index4] := ydown
ToolTip
English     := "A position was configured."
Portuguese  := "A posi" Chr(231) Chr(227) "o foi configurada."
MsgBox, 4160, %temp%, % %GlobalLanguage%
Gui, submit, nohide
If(Name.2 != "Hotkey"){
OldHotkey := Ini[Name.1][4]
Ini[Name.1][4] := New_Hotkey
}
Hotkey, % OldHotkey,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% OldHotkey,Off
}
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4],MoveItemsHotkey
Hotkey,% Ini[Name.1][4],On
}
IniWriteArray(Ini[Name.1],Name.1,ProfileComb)
PopulateFields()
Gui, Config:Destroy
if (Locked != 0){
SetImage( LockedID, PNG.LockOpened)
GuiControl, Main:Enable , ProfileSelected
GuiControl, Main:Enable , VocationSelected
}
Suspend, Off
Return
UpdateMoveItemsBP:
ToolTip, % "Choose the position.`n`nSelecione a posicao."
Sleep, 100
KeyWait, LButton, D
MouseGetPos, MouseTestx, MouseTesty
ToolTip
Gui, submit, nohide
InI["MoveItemsBP"][5] := MouseTestx
InI["MoveItemsBP"][6] := MouseTesty
If(Name.2 != "Hotkey"){
OldHotkey := Ini[Name.1][4]
Ini[Name.1][4] := New_Hotkey
}
Hotkey, % OldHotkey,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% OldHotkey,Off
}
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4],MoveItemsBPHotkey
Hotkey,% Ini[Name.1][4],On
}
IniWriteArray(Ini[Name.1],Name.1,ProfileComb)
Return
UpdateMoveItemsMouse:
ToolTip, % "Choose the position.`n`nSelecione a posicao."
Sleep, 100
KeyWait, LButton, D
MouseGetPos, ItemsMouseX, ItemsMouseY
ToolTip
Gui, submit, nohide
InI["MoveItemsMouse"][5] := ItemsMouseX
InI["MoveItemsMouse"][6] := ItemsMouseY
If(Name.2 != "Hotkey"){
OldHotkey := Ini[Name.1][4]
Ini[Name.1][4] := New_Hotkey
}
Hotkey, % OldHotkey,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% OldHotkey,Off
}
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4],MoveItemsMouseHotkey
Hotkey,% Ini[Name.1][4],On
}
IniWriteArray(Ini[Name.1],Name.1,ProfileComb)
Return
UpdateTakeFromFloor:
FocusClient()
ToolTip, % "Choose the position.`n`nSelecione a posicao."
Sleep, 100
KeyWait, LButton, D
MouseGetPos, ItemsMouseX, ItemsMouseY
ToolTip
Gui, submit, nohide
InI["TakeFromFloor"][5] := ItemsMouseX
InI["TakeFromFloor"][6] := ItemsMouseY
IniWriteArray(Ini[Name.1],Name.1,ProfileComb)
Return
UpdateHK:
Gui, submit, nohide
If(Name.2 != "Hotkey"){
OldHotkey := Ini[Name.1][4]
Ini[Name.1][4] := New_Hotkey
} Else {
OldHotkey := Ini[Name.1][3]
Ini[Name.1][3] := New_Hotkey
}
Hotkey, % OldHotkey,, UseErrorLevel
if (ErrorLevel = 0) {
Hotkey,% OldHotkey,Off
}
switch (Name.2){
case "Hotkey":
IniWriteArray(InI[Name.1],Name.1,"ConfigHotkeys")
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% InI[Name.1].3, % Name.1
Hotkey,% InI[Name.1].3, On
}
Gui, Config:Destroy
if (Locked != 0){
SetImage( LockedID, PNG.LockOpened)
GuiControl, Main:Enable , ProfileSelected
GuiControl, Main:Enable , VocationSelected
}
Suspend, Off
PopulateFields()
Return
case "HkCureParalyze":
Ini[Name.1][4] := New_Hotkey
Ini[Name.1][5] := New_Hotkey2
case "HkTrainSpells":
Ini[Name.1][4] := New_Hotkey
Ini[Name.1][5] := New_Hotkey2
case "HkTakeFromFloor":
Ini[Name.1][4] := Percet1
case "HkDragQuiver":
Ini[Name.1][7] := Percet1
case "HkCombo":
Ini[Name.1][4] := New_Hotkey
IniWriteArray(InI[Name.1],Name.1,ProfileComb)
if (New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% InI[Name.1].4, % Name.1
Hotkey,% InI[Name.1].4, On
}
Gui, Config:Destroy
if (Locked != 0){
SetImage( LockedID, PNG.LockOpened)
GuiControl, Main:Enable , ProfileSelected
GuiControl, Main:Enable , VocationSelected
}
Suspend, Off
PopulateFields()
Return
case "HkLoot":
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4],LootHotkey
Hotkey,% Ini[Name.1][4],On
}
Ini[Name.1][5] := Percet1
case "HkExerciseDummy":
if(VersionType == "Global"){
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
} else {
Ini[Name.1][9] := Percet1
English     := % InI[ItemName][9] " seconds"
Portuguese  := % InI[ItemName][9] " segundos"
GuiControl, Training: Text, % Name.1 "9", % %GlobalLanguage%
}
case "HkSmartCast":
temp := % Name.1 "Hotkey"
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4], % temp
Hotkey,% Ini[Name.1][4],On
}
Ini[Name.1][6] := Percet1
Ini[Name.1][7] := Percet2
case "HkTargeting":
If(RetargetSeconds != "Disabled" && RetargetLife != "Disabled"){
if(GlobalLanguage == "English"){
MsgBox, 4112, Error - Seconds and Life, % "You have selected both Seconds and Life Percetage, choose only one of them."
} else {
MsgBox, 4112, Erro - Segundos e Percentual de Vida, % "Voc" Chr(234) " escolheu Segundos e Percentual de Vida, escolha apenas um deles."
}
Return
}
Ini[Name.1][5] := RetargetSeconds
Ini[Name.1][6] := RetargetLife
case "HkTimedHotkey":
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
case "HkDance":
if(New_Hotkey != "[...]" && New_Hotkey != ""){
Hotkey,% Ini[Name.1][4],DanceHotkey
Hotkey,% Ini[Name.1][4],On
}
Ini[Name.1][5] := Percet1
case "Potion":
Ini[Name.1] := {1: Name[1], 2: winName, 3: Ini[Name.1][3], 4: New_Hotkey, 5: Percet1, 6: 0, 7: 0, 8: "[...]", 9: Potion}
case "Hk+1Field":
Ini[Name.1][5] := Percet1
case "Hk+2Field":
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
case "MagicShield":
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
For index, element in classButton {
If (element.state=0 || element.state=1){
If (element.arrayNumber=7){
classButton[index].state := ini[element.array.1][element.arrayNumber]
classButton[index].Draw()
if (ini[element.array.1][7] = 1){
GuiControl,%winName%:Hide, % Name.1 . "5"
GuiControl,%winName%:Hide, % Name.1 . "6"
}  Else If (InI[element.array.1][7] = 0){
GuiControl,%winName%:Show, % Name.1 . "5"
GuiControl,%winName%:Show, % Name.1 . "6"
}
}
}
}
case "EnergyRing":
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
Ini[Name.1][8] := Percet3
For index, element in classButton {
If (element.state=0 || element.state=1){
If (element.arrayNumber=7){
classButton[index].state := ini[element.array.1][element.arrayNumber]
classButton[index].Draw()
if (ini[element.array.1][7] = 1){
GuiControl,%winName%:Hide, % Name.1 . "5"
GuiControl,%winName%:Hide, % Name.1 . "6"
GuiControl,%winName%:Hide, % Name.1 . "8"
}  Else If (InI[element.array.1][7] = 0){
GuiControl,%winName%:Show, % Name.1 . "5"
GuiControl,%winName%:Show, % Name.1 . "6"
GuiControl,%winName%:Show, % Name.1 . "8"
}
}
}
}
case "SSA":
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
For index, element in classButton {
If (element.state=0 || element.state=1){
If (element.arrayNumber=7){
classButton[index].state := ini[element.array.1][element.arrayNumber]
classButton[index].Draw()
if (ini[element.array.1][7] = 1){
GuiControl,%winName%:Hide, % Name.1 . "5"
GuiControl,%winName%:Hide, % Name.1 . "6"
}  Else If (InI[element.array.1][7] = 0){
GuiControl,%winName%:Show, % Name.1 . "5"
GuiControl,%winName%:Show, % Name.1 . "6"
}
}
}
}
case "UtamoVita":
Ini[Name.1][5] := Percet1
Ini[Name.1][6] := Percet2
Ini[Name.1][7] := Percet3
Ini[Name.1][8] := New_Hotkey2
Ini[Name.1][11] := New_Hotkey3
For index, element in classButton {
If (element.state=0 || element.state=1){
If (element.arrayNumber=11){
classButton[index].state := ini[element.array.1][element.arrayNumber]
classButton[index].Draw()
}
}
}
case "Party":
Ini[Name.1][5] := Percet1
If (Name.7 == "Sio") {
Ini[Name.1][6] := Percet2
}
case "Swap":
If (Name.7 = "Rings" || Name.7 = "Amulets")
Ini[Name.1] := {1: Name[1], 2: winName, 3: Ini[Name.1][3], 4: New_Hotkey, 5: Percet1, 6: Percet2, 7: ini[Name.1][7], 8: New_Hotkey2, 9: Tank, 10: Main, 11: ini[Name.1][11]}
If (Ini[Name.1][11] != "1") {
Gui, HighPriority: Font, ced2121, Tahoma
GuiControl, HighPriority: Font, % Name.1 "PointsLess"
GuiControl, HighPriority: Text, % Name.1 "PointsLess", HP -
GuiControl, HighPriority: Font, % Name.1 "PointsMore"
GuiControl, HighPriority: Text, % Name.1 "PointsMore", HP +
} Else {
Gui, HighPriority: Font, c569cd6, Tahoma
GuiControl, HighPriority: Font, % Name.1 "PointsLess"
GuiControl, HighPriority: Text, % Name.1 "PointsLess", MP -
GuiControl, HighPriority: Font, % Name.1 "PointsMore"
GuiControl, HighPriority: Text, % Name.1 "PointsMore", MP +
}
case "Combo":
InI[Name.1][5] := Config5 . "CD:" . Support1
InI[Name.1][6] := Config6
InI[Name.1][7] := Config7 . "CD:" . Support2
InI[Name.1][8] := Config8
InI[Name.1][9] := Config9 . "CD:" . Support3
InI[Name.1][10] := Config10
InI[Name.1][11] := Config11
InI[Name.1][12] := Config12
InI[Name.1][13] := Config13
InI[Name.1][14] := Config14
InI[Name.1][15] := Config15
InI[Name.1][16] := Config16
InI[Name.1][17] := Config17
InI[Name.1][18] := Config18
InI[Name.1][19] := Config19
InI[Name.1][20] := Config20
InI[Name.1][21] := Config21
InI[Name.1][22] := Config22
InI[Name.1][23] := Config23
}
IniWriteArray(Ini[Name.1],Name.1,ProfileComb)
PopulateFields()
Gui, Config:Destroy
if (Locked != 0){
SetImage( LockedID, PNG.LockOpened)
GuiControl, Main:Enable , ProfileSelected
GuiControl, Main:Enable , VocationSelected
}
Suspend, Off
return
HotkeyCtrlHasFocus(){
GuiControlGet, ctrl, Config:Focus
If InStr(ctrl,"hotkey") {
GuiControlGet, ctrl, Config:FocusV
Return, ctrl
}
}
HideMainHK:
Gui, submit, nohide
If (Main = "NoRing" || Main = "NoAmulet")
GuiControl, Config:Hide , New_Hotkey2
Else
GuiControl, Config:Show , New_Hotkey2
Return
ShowHotkeys(){
If InStr(%A_GuiControl%,"vk07")
GuiControl,Config:,%A_GuiControl%, % New_Hotkey
}
#MenuMaskKey vk07
#If ctrl := HotkeyCtrlHasFocus()
*AppsKey::
*Delete::
*Enter::
*Pause::
*Space::
*MButton::
*XButton1::
*XButton2::
*WheelUp::
*WheelDown::
*WheelLeft::
*WheelRight::
modifier := ""
If GetKeyState("Shift","P")
modifier .= "+"
If GetKeyState("Ctrl","P")
modifier .= "^"
If GetKeyState("Alt","P")
modifier .= "!"
Gui, Submit, NoHide
If (A_ThisHotkey == "*BackSpace" && %ctrl% && !modifier)
GuiControl,Config:,%ctrl%
Else
GuiControl,Config:,%ctrl%, % modifier SubStr(A_ThisHotkey,2)
return
#If
RunningScreen:
Gui, RunningCombo: Destroy
Gui, RunningCombo: +E0x20 -SysMenu +AlwaysOnTop +ToolWindow +HwndComboID -caption +LastFound +E0x08000000
Gui, RunningCombo:Color, 111111
WinSet, Transparent, 200
Gui, RunningCombo: Font, cc00000
Gui, RunningCombo: Font, bold, Tahoma
English     := "Press the Combo Hotkey to Start"
Portuguese  := "Pressione a Hotkey do Combo para Iniciar"
Gui, RunningCombo: Add, Text,  x5 y3 w240 h20 center vComboGui, % %GlobalLanguage%
Gui, RunningDummy: Destroy
Gui, RunningDummy: +E0x20 -SysMenu +AlwaysOnTop +ToolWindow +HwndRunningDummyID -caption +LastFound +E0x08000000
Gui, RunningDummy:Color, 111111
WinSet, Transparent, 200
Gui, RunningDummy: Font, c00c000
Gui, RunningDummy: Font, bold, Tahoma
Gui, RunningDummy: Add, Text,  x5 y3 w240 h45 center vDummyGui,
Return
HKs1:
KeyWait, %A_ThisHotkey% , T1.5
If (ErrorLevel){
ToolTip, % "Click LEFT to configure the START position.`n`nClique com o botao ESQUERDO para configurar a posicao INICIAL."
Sleep, 100
KeyWait, LButton, D
MouseGetPos, 1MouseTestx, 1MouseTesty
UpdateLayeredWindow(Data.GuiMark2, Data.Mark1, 1MouseTestx-8+WindowInfo.Window.x, 1MouseTesty-8+WindowInfo.Window.y, 16, 16)
ToolTip, % "Now click LEFT to configure the END position.`n`nAgora clique com o botao ESQUERDO para configurar a posicao FINAL."
Sleep, 100
KeyWait, LButton, D
MouseGetPos, 2MouseTestx, 2MouseTesty
UpdateLayeredWindow(Data.GuiMark3, Data.Mark2, 2MouseTestx-8+WindowInfo.Window.x, 2MouseTesty-8+WindowInfo.Window.y, 16, 16)
ToolTip
} else {
Data.MoveItems := !Data.MoveItems
SetTimer, HKs2 , On
}
Return
HKs2:
SetTimer, HKs2 , Off
While (Data.MoveItems = 1 && Macro = 1){
ControlClick % "x" 1MouseTestx " y" 1MouseTesty, ahk_id %WinID%,,,, D NA
Sleep, 250
ControlClick % "x" 2MouseTestx " y" 2MouseTesty, ahk_id %WinID%,,,, U NA
}
Return
Button1:
SetTimer, Button1, Off
ToolTip
Cords.Potions := []
Waiting := 0
Data.Dance := False
Data.MoveItems := False
Data.Combo := False
Skills.LastUsed := 1
Ini.HealConfig.3 := "Party List"
Gui Config:+LastFoundExist
if WinExist(){
English     := "Please, click Update button before Start."
Portuguese  := "Por favor, clique no botao Update antes clicar no Start."
MsgBox, 4144, Start Error, % %GlobalLanguage%
Return
}
if (!WinExist("ahk_ID " FindProcessesID) && VersionType == "OTServer"){
FindClientScreen()
waitForTibia := 0
While, waitForTibia = 0 {
If WinExist("ahk_ID " FindProcessesID){
waitForTibia := 1
Break
}
Sleep, 100
}
}
StartButton := 1
classButton["Start"].Editor("ON","00FF00")
SaveGuiPosition()
Dados.catchMalandros := 0
GetUserDetail()
SetTimer, GetUserDetail, 125000
if(StartButton == 0){
Return
}
PrintScreenData()
SearchPNG(PNG.Party, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.Party:=Erro
if (Erro.1 != 0 && (Ini.ExuraGranSio.3 || Ini.ExuraSio.3 = 1 || Ini.ExuraSioTwo.3 = 1 || Ini.UHRune.3 = 1 || Ini.UHRuneTwo.3 = 1) && Ini.HealConfig.3 = "Party List"){
English     := "Your Party List Window was not found. Leave it opened."
Portuguese  := "Sua Party List n" Chr(227) "o foi encontrada. Deixe ela aberta."
MsgBox, 4112, Party List, % %GlobalLanguage%
Goto Button2
}
if(ValidateFields()){
Goto Button2
}
SearchPNG(PNG.HPBar, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.HP:=Erro
if (Erro.1 != 0){
English     := "The Status Bar was not found. Check your Tibia Options to enable it."
Portuguese  := "O Status Bar n" Chr(227) "o foi encontrado. Cheque as op" Chr(231) Chr(245) "es do Tibia para habilitar."
MsgBox, 4112, Status Bar, % %GlobalLanguage%
Goto Button2
}
SearchPNG(PNG.ConditionsBar, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.Con:=Erro
if (Erro.1 != 0){
English     := "The conditions bar was not found. Check your Tibia Options to enable it."
Portuguese  := "A barra de condi" Chr(231) Chr(227) "o nao foi encontrada. Cheque as op" Chr(231) Chr(245) "es do Tibia para habilitar."
MsgBox, 4112, Conditions Bar, % %GlobalLanguage%
Goto Button2
}
SearchPNG(PNG.SkillBar, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.SkillBar:=Erro
if (Erro.1 != 0){
English     := "The Action Bar were not found. Check your Tibia Options to enable it."
Portuguese  := "Sua Action Bar n" Chr(227) "o foi encontrada (O come" Chr(231) "o dela). Cheque as op" Chr(231) Chr(245) "es do Tibia para habilitar."
MsgBox, 4112, Action Bar (Start), % %GlobalLanguage%
Goto Button2
}
SearchPNG(PNG.SkillBarEnd, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=20, Erro, Mode:=1), Cords.SkillBarEnd:=Erro
if (Erro.1 != 0){
English     := "The action bar were not found. Check your Tibia Options to enable it."
Portuguese  := "Sua action bar n" Chr(227) "o foi encontrada (O final dela). Cheque as op" Chr(231) Chr(245) "es do Tibia para habilitar."
MsgBox, 4112, Action Bar (End), % %GlobalLanguage%
Goto Button2
}
SearchPNG(PNG.CooldownDiv, 0, 0, WindowInfo.ClassNN.w, WindowInfo.ClassNN.h, Tole:=10, Erro, Mode:=1), Cords.CooldownDiv:=Erro
if (Erro.1 != 0){
English     := "Your Cooldown bars were not found. Check your Tibia Options to enable it."
Portuguese  := "A barra de cooldown n" Chr(227) "o foi encontrada. Cheque as op" Chr(231) Chr(245) "es do Tibia para habilitar."
MsgBox, 4112, Cooldown Bar, % %GlobalLanguage%
Goto Button2
}
if(PotionConfig()){
Goto Button2
}
HotkeysOn()
Gosub RunningScreen
Macro := 1
Locked := 1
SetImage( LockedID, PNG.LockClosed)
GuiControl, Main:Disable , ProfileSelected
GuiControl, Main:Disable , VocationSelected
Goto Start
Return
Button2:
SetTimer, Button2, Off
StartButton := 0
classButton["Start"].Editor("ON","FF0000")
ToolTip
GuiControl, Main:+c00c000 , WindowTitle
GuiControl, Main:, WindowTitle, % WindowInfo.Title
Data.ChatSet := 0
Data.BarHP.set(0), HP := 0
Data.BarMP.set(0), MP := 0
HotkeysOff()
TimersOff()
If (AutoHunt.Active == 1)
EnableAutoHunt()
Macro := 0
Waiting := 1
Data.Dance := False
Data.MoveItems := False
Data.GodFlower := False
Data.AntiPush  := False
Data.SmartCast1 := False
Data.SmartCast2 := False
Data.SmartCast3 := False
Data.RunePriority := False
Data.Combo := False
Skills.LastUsed := 1
Gui, RunningCombo: Destroy
Gui, RunningDummy: Destroy
SaveGuiPosition()
Return
MainGuiClose:
MouseGetPos,,,, ctrl , 2
classButton[ A_GuiControl ].Draw_Pressed()
If( ! classButton[ A_GuiControl ].Draw_Pressed() )
return
English     := "Do you want to close Tibia Helper?"
Portuguese  := "Voc" Chr(234) " quer fechar o Tibia Helper?"
MsgBox, 4132, Tibia Helper, % %GlobalLanguage%
IfMsgBox Yes
{
SaveGuiPosition()
ExitApp
}
Return
TrayClose:
English     := "Do you want to close Tibia Helper?"
Portuguese  := "Voc" Chr(234) " quer fechar o Tibia Helper?"
MsgBox, 4132, Tibia Helper, % %GlobalLanguage%
IfMsgBox Yes
{
SaveGuiPosition()
ExitApp
}
Return
MainOnTop:
Gui, Main: +AlwaysOnTop
Return
Start:
AmmoStartX := xp + 70
AmmoStartY := yp - 70
AmmoEndX := xp + 116
AmmoEndY := yp - 20
FocusClient()
While (Macro = 1 && Dados.Disconnect == 0){
CKTime := A_TickCount
if (Data.Loot = 1){
if (Ini.Loot.3 = 1 || Data.ComboLoot = 1){
GetLootTibia()
Sleep, 300
} else {
Data.Loot := 0
}
}
ReadData()
if (HP != Data.HP)
Data.BarHP.set(Data.HP), HP := Data.HP
if (MP != Data.MP)
Data.BarMP.set(Data.MP), MP := Data.MP
If (Ini.ChatOn.3 = 1) {
If (Data.Chat = 1 && Data.ChatSet != 1){
Suspend, On
Waiting := 1
English    := "Chat On - Paused"
Portuguese := "Chat On - Pausado"
GuiControl, Main:+cf0f000 , WindowTitle
GuiControl, Main:, WindowTitle, % %GlobalLanguage%
Data.ChatSet := 1
} Else If (Data.Chat != 1 && Data.WinActive != 1 && Data.ChatSet == 1) {
Suspend, Off
Waiting := 0
Data.ChatSet := 0
GuiControl, Main:+c00c000 , WindowTitle
GuiControl, Main:, WindowTitle, % WindowInfo.Title
}
If ( Data.ChatSet == 1 ) {
Waiting := 1
Suspend, On
if (Data.HP <= 45) {
Waiting := 0
Data.ChatSet := 0
Suspend, Off
GuiControl, Main:+c00c000 , WindowTitle
GuiControl, Main:, WindowTitle, % WindowInfo.Title
ControlClick % "x" Cords.Chat.2+30 " y" Cords.Chat.3+40, ahk_id %WinID%,,Right
ControlClick % "x" Cords.Chat.2+30 " y" Cords.Chat.3+40, ahk_id %WinID%,,Left
}
}
}
If (Waiting != 1) {
BlockedFunctions := False
Random, SleepExaust1sg , 1009, 1112
Random, SleepExaust500ms , 503, 619
Random, SleepFast      , 13, 69
If (Ini.AutoBless.3 == 1 && Data.Bless.1 == 0) {
PressKey(Ini.AutoBless.4)
}
If (Timer.exaustFood != 1) {
If (Ini.HealthFood.3 = 1 && Data.HP <= Ini.HealthFood.5) {
PressKey(Ini.HealthFood.4)
Timer.exaustFood := 1
SetTimer, exaustFoodDisable, -600000
} Else If (Ini.ManaFood.3 = 1 && Data.MP <= Ini.ManaFood.5) {
PressKey(Ini.ManaFood.4)
Timer.exaustFood := 1
SetTimer, exaustFoodDisable, -600000
}
}
If (VersionType == "OTServer") {
OldUtamoVita()
}
NewUtamoVita()
If (Ini.UtamoTempo.3 = 1 && Timer.UtamoTempo != 1 && Vocation == "Knight" && Data.Group.Support != 1) {
If(Data.Conditions.ProtectionZone != 1 && (Data.HP <= Ini.UtamoTempo.5 || Ini.UtamoTempo.7 = 1) && Data.MP >= Ini.UtamoTempo.8){
SetTimer, exaustUtamoTempo, -9800
Timer.UtamoTempo := True
SetTimer, exaustUtitoTempo, -10200
Timer.UtitoTempo := True
PressKey(Ini.UtamoTempo.4)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -400
}
}
EnergyRing()
SSA()
SwapAmulet()
SwapRing()
If (Vocation == "Knight" || Vocation == "Paladin"){
UH_Potions()
HealingSpells()
} Else {
HealingSpells()
UH_Potions()
}
CureSpells()
If (Ini.EatFood.3 = 1 && Timer.exaustNormalFood != 1 && Data.Conditions.EatFood = 1 && (Data.HP != 100 || Data.MP != 100)){
Timer.exaustNormalFood := 1
PressKey(Ini.EatFood.4)
SetTimer, exaustNormalFoodDisable, -400
}
If (Ini.Haste.3 = 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1 && Data.Conditions.Haste != 1 && Data.Conditions.ProtectionZone != 1 && Timer.UtitoTempoSan != 1){
PressKey(Ini.Haste.4)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -400
}
If (Ini.GoldConverter.3 == 1 && isAttacking == False && Data.Combo == False && Timer.exaustGoldConverter == False){
PrintScreenData()
SearchPNG(PNG.GoldCoinConverter, Cords.SkillBarEnd.2, 0,WindowInfo.Client.w, WindowInfo.Client.h, Tole:=5 , Erro, Mode:=1)
if(Erro.1 == 0){
ControlClick % "x" Erro.2+WindowInfo.ClassNN.x " y" Erro.3+WindowInfo.ClassNN.y, ahk_id %WinID%,,RIGHT,, NA
Timer.exaustGoldConverter := True
SetTimer, exaustGoldConverterDisable, -500
}
if(Timer.exaustGoldConverter == False){
SearchPNG(PNG.PlatinumCoinConverter, Cords.SkillBarEnd.2, 0,WindowInfo.Client.w, WindowInfo.Client.h, Tole:=5 , Erro, Mode:=1)
if(Erro.1 == 0){
ControlClick % "x" Erro.2+WindowInfo.ClassNN.x " y" Erro.3+WindowInfo.ClassNN.y, ahk_id %WinID%,,RIGHT,, NA
Timer.exaustGoldConverter := True
SetTimer, exaustGoldConverterDisable, -500
}
}
}
If (ini.SpecialPotion.3 = 1 && Timer.exaustSpecialPotion != 1 && Data.Conditions.LogoutBlock = 1){
Timer.exaustSpecialPotion := 1
PressKey(Ini.SpecialPotion.4)
SetTimer, exaustSpecialPotionDisable, -599000
}
If (ini.Ammo.3 == 1 && Data.Ammo != 1 && Timer.exaustAmmo != 1){
PressKey(Ini.Ammo.4)
Timer.exaustAmmo := True
SetTimer, exaustAmmoDisable, -2000
}
If (VersionType == "OTServer" && ini.DragQuiver.3 = 1 && Data.Quiver != 1){
QuiverSlotX := Cords.Con.2+90
QuiverSlotY := Cords.Con.3-50
ControlClick % "x" InI["DragQuiver"][5] " y" InI["DragQuiver"][6], ahk_id %WinID%,, Right
Sleep, 100
ControlClick % "x" InI["DragQuiver"][5] " y" InI["DragQuiver"][6], ahk_id %WinID%,,,, D NA
ControlClick % "x" QuiverSlotX " y" QuiverSlotY, ahk_id %WinID%,,,, U NA
Data.Quiver := 1
Sleep, 250
}
If (ini.Quiver.3 = 1 && Data.Quiver != 1){
Loop, 2 {
PressKey(Ini.Quiver.4)
}
Data.Quiver := 1
}
If (ini.Weapon.3 = 1 && Data.Weapon != 1 && Timer.exaustWeapon != 1){
Timer.exaustWeapon := 1
PressKey(Ini.Weapon.4)
SetTimer, exaustWeaponDisable, -400
}
If (ini.SpellMax.3 = 1 && Data.Group.Support != 1 && Timer.exaustSupport != 1 && Data.MP = 100 && Data.Group.Healing != 1 && Timer.UtitoTempoSan != 1){
PressKey(Ini.SpellMax.4)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -400
}
If (Ini.TrainSpells.3 = 1 &&  Data.MP >= 10){
if(Data.Group.Healing != 1){
PressKey(Ini.TrainSpells.4)
}
if(Data.Group.Support != 1 && Timer.exaustSupport != 1){
PressKey(Ini.TrainSpells.5)
Timer.exaustSupport := True
SetTimer, exaustSupportDisable, -400
}
}
If (ini.PairofSoftBoots.3 = 1 && Timer.exaustBoots != 1 && Data.PairofSoftBoots != 0){
PressKey(Ini.PairofSoftBoots.4)
Timer.exaustBoots := True
SetTimer, exaustBootsDisable, -400
}
AntiAfk()
Targeting()
Dance()
MoveItems()
GodFlower()
AntiPush()
ExerciseDummy()
TimedSpell()
TakeFromFloor()
SmartCast()
If (AutoHunt.Active != 1){
Combo()
}
If (AutoHunt.Active == 1 && Data.Loot != 1){
GetCoordenatesAutoHunt()
AutoHunt()
}
}
TotalTime := Floor(A_TickCount - CKTime)
If (TotalTime < 60 && TotalTime >= 0 ){
Sleep, 60 - TotalTime
Random,  oVar, 40, 50
TotalTime := oVar
}
If (LoopMSC > 4){
GuiControl, Main:, LoopMS, % Round(LoopTotalTime/5) "ms"
LoopMSC := 0
LoopTotalTime := 0
} Else {
LoopTotalTime += TotalTime
LoopMSC += 1
}
if (Ini.ComboConfig.5 == 1){
if (Data.Combo != 1 && Data.ComboSave != 1){
Data.ComboSave := 1
English     := Data.ComboName " Disabled"
Portuguese  := Data.ComboName " Desligado"
GuiControl, RunningCombo:+cc00000 , ComboGui
GuiControl, RunningCombo:, ComboGui, % %GlobalLanguage%
} else if (Data.Combo = 1 && Data.ComboSave = 1){
Data.ComboSave := 0
English     := Data.ComboName " Enabled"
Portuguese  := Data.ComboName " Ligado"
GuiControl, RunningCombo:+c00c000 , ComboGui
GuiControl, RunningCombo:, ComboGui, % %GlobalLanguage%
}
} else {
GuiControl, RunningCombo: Hide, RunningCombo
}
}
Return
